{
  "block whose width is 3 inches and that is right of block 1": {
    "denotation.  ": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that has a width of 3 inches and is to the right of block 1",
      "3 inch wide block to the right of block 1",
      "find me all 3 inch wide blocks right of block 1",
      "select the block which is right to block 1 with 3 inches"
    ]
  },
  "block that is right of two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks 2 blocks from the right",
      "select the block right of block 2",
      "block to right of two others"
    ]
  },
  "block that is below block 1 and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "get me a block below and above block 1",
      "find me all blocks below of which is above block 1",
      "select the blocks that are above and below block 1"
    ]
  },
  "block that block that block 1 is above is below": {
    "denotation": "(list (name en.block.25))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "block two below block 1",
      "find the block that block 1 is above and below",
      "which block is below the block below block 1"
    ]
  },
  "block whose length is at most length of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "the block that is equal to the length of block 1",
      "find me all blocks at most as long as block 1",
      "block not longer than block 1",
      "which brick is no longer than brick 1",
      "block whose length is at most length of block 1",
      "find a block as long or longer than block 1"
    ]
  },
  "block that block that block 1 is below is left of": {
    "denotation": "(list (name en.block.32))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me the block that block 1 is below and to the left of",
      "select the block to the right of the block above block 1"
    ]
  },
  "block that is above block that is below block 1": {
    "denotation": "(list (name en.block.3) (name en.block.4) (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "which brick is above the brick that is below brick 1",
      "block above block that is below block 1",
      "find a block between block 1 and a block below block 1",
      "there is a block below block 1 and a block above that one find it"
    ]
  },
  "block whose height is at least 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "which brick is at least 3 inches high",
      "select the block that is at least 3 inches tall",
      "choose a 3 inch tall brick",
      "block whose height is at least 3 inches",
      "find the block that is not less than 3 inches tall"
    ]
  },
  "block that is below block 1 and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that is below and to the right of block 1",
      "find me all blocks below and to the right of block 1",
      "find block that is below and to the right of block 1"
    ]
  },
  "block that is right of block that block 1 is below": {
    "denotation": "(list (name en.block.40))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block that is right and below block 1",
      "find me all blocks right of the block that block 1 is below",
      "find the block that is to the right of the block that block 1 is below",
      "above block 1 to the left"
    ]
  },
  "block that the most number of block is right of": {
    "denotation": "(list (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is to the left of the most blocks",
      "block which is at the right of most number of blocks",
      "find the block that has the most blocks to its right",
      "select the brick that is to the furthest left"
    ]
  },
  "block whose width is length of block 1": {
    "denotation": "(list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))",
    "paraphrases": [
      "find me a block with the same width as block 1s length",
      "choose a block that is the same width as block 1s length",
      "find a block that has the length of block 1",
      "find me all the blocks with the same width as the length of block 1",
      "what brick is as wide as brick 1 is long"
    ]
  },
  "block that block 1 is above and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "select all the pyramidshaped blocks above block1",
      "find the pyramid shaped block below block 1",
      "pyramid block below block 1"
    ]
  },
  "block whose height is 3 inches and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all 3 inch tall blocks that block 1 is above",
      "what 3 inch block is below block 1",
      "what block is of 3 inches height and above block 1 ",
      "what block  has a height of 3 inches and that block 1 is above"
    ]
  },
  "block whose width is at most 3 inches": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "choose a block no bigger than 3 inches",
      "what block is 3 or less inches wide",
      "find me all blocks at most 3 inches wide",
      "which brick is no wider than 3 inches",
      "not more than 3 inches wide block"
    ]
  },
  "block that block 1 is below and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks below block 1",
      "select the block that block 1 is below",
      "select the blocks above and below block 1"
    ]
  },
  "block that block that block 1 is right of is left of": {
    "denotation": "(list (name en.block.37))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks which block 1 is right and left of"
    ]
  },
  "width of block 1": {
    "denotation": "(list (number 5 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))",
    "paraphrases": [
      "width of block 1",
      "what is the width of block 1",
      "how wide is block 1"
    ]
  },
  "block that is below block 1 and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "select block that is below block 1 and block that is above block 1",
      "find me all blocks below block 1 which block 1 is also below",
      "what block has block 1 above and below"
    ]
  },
  "block that is below block 1 and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "below and to the right of block 1",
      "find me all blocks below and to the right of block 1",
      "find the block that is below and to the left of block 1 "
    ]
  },
  "block whose length is at most height of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "choose a block that is the same or below brick 1",
      "which brick is no longer than brick 1 is high",
      "find a block with a diameter that does not surpass the height of block 1",
      "block whose length is at most height of block 1",
      "what blocks length is less than or equal to block 1s height"
    ]
  },
  "block that is above block whose width is 3 inches": {
    "denotation": "(list (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.55) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find me all the blocks above 3 inch wide blocks",
      "what block is above the 3 inch wide block",
      "block that is above block whose width is 3 inches",
      "block above a block which is 3 inches wide",
      "which brick is above a brick that is 3 inches wide",
      "a 3 inch block has a block on top of it find that block"
    ]
  },
  "block that is below block whose length is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.18) (name en.block.23) (name en.block.27) (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.49) (name en.block.55) (name en.block.57))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block that is below block whose length is 3 inches",
      "3 inch long block below block",
      "choose a block below the 3 inch brick",
      "what block is below the 3 inch long block",
      "find me all blocks below 3 inch long blocks",
      "what brick is below a brick that is 3 inches long"
    ]
  },
  "block that is below two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is below two blocks ",
      "block below 2 blocks",
      "find me all blocks below 2 blocks"
    ]
  },
  "block that is below block 1 and that is below block 1": {
    "denotation": "(list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "choose a block that is under block 1",
      "block that is below block 1 and that is below block 1",
      "find the block that is underneath block 1"
    ]
  },
  "block that not is below block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string !=) en.block.block1))",
    "paraphrases": [
      "find me all the blocks not below block 1",
      "select all blocks above block 1",
      "find a block that is not below block 1",
      "which brick is not below brick 1"
    ]
  },
  "block whose width is height of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.31) (name en.block.39) (name en.block.5) (name en.block.51) (name en.block.6) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))",
    "paraphrases": [
      "choose the block that has the same width as block 1 has height",
      "what block has the same width as block 1s height",
      "block as wide as height of block 1",
      "which block is as wide as block 1 is high",
      "find me all blocks as wide as block 1 is tall"
    ]
  },
  "average height of block": {
    "denotation": "(list (number 4.500 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))",
    "paraphrases": [
      "average height of block",
      "what is the average height of a brick",
      "what is the average height of the blocks",
      "what is the average height of the bricks",
      "what is the height of an average block",
      "find the average height of a block"
    ]
  },
  "block that block whose height is 3 inches is below": {
    "denotation": "(list (name en.block.18) (name en.block.22) (name en.block.28) (name en.block.3) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.6) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block above 3 inch block",
      "find me a block that is below any block that is 3 inches",
      "find me all blocks that is above 3 inch tall blocks",
      "find me the block that has a height of 3 inches",
      "block above 3 inch tall block"
    ]
  },
  "block whose width is 3 inches and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find the block with 3 inches of width",
      "3 inch block below block 1",
      "find me all 3 inch wide blocks that block 1 is above"
    ]
  },
  "block that is left of block that is below block 1": {
    "denotation": "(list (name en.block.48))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "choose the block that is below and to the left of block 1",
      "block that is left of block that is below block 1",
      "find the block below and to the left of block 1",
      "find me all the blocks left and below block 1",
      "block that is left of block which is below block 1"
    ]
  },
  "block that block that is special is above": {
    "denotation": "(list (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.33) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "below special block",
      "block below special block",
      "find me all special blocks that are above"
    ]
  },
  "block that block 1 is above and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch tall bock below block 1",
      "find me all 3 inch tall blocks which block 1 is above",
      "block below block 1 and 3 inches in height",
      "what block is above block 1 and has a height of 3 inches"
    ]
  },
  "block that is above at least two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find a block that is above at least two other blocks",
      "what block is above at two or more blocks",
      "select a block with two blocks below it"
    ]
  },
  "block whose width is 3 inches and that is special": {
    "denotation": "(list (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.49))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))",
    "paraphrases": [
      "find the special block that is 3 inches",
      "which special brick is 3 inches wide",
      "the unique 3 inch wide block",
      "find the 3 inch wide special block"
    ]
  },
  "block whose height is at least 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "what block is 3 inches or taller",
      "find blocks that are at least 3 inches high or 6 inches high",
      "select bricks that are at least 3 inches high"
    ]
  },
  "block whose width is larger than height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.50) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "find a block wider than block 1 is tall",
      "choose blocks wider than block 1s height",
      "choose a brick that is wider than brick 1 is high",
      "what blocks have a width larger than the height of block 1",
      "find me all blocks wider than the height of block 1"
    ]
  },
  "block whose width is larger than width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.26) (name en.block.29) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.40) (name en.block.42) (name en.block.48) (name en.block.55) (name en.block.58) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "which brick is wider than brick 1 is wide",
      "find a wider block than block 1",
      "find me all the bricks wider than the width of block 1",
      "find a block that is wider than block 1",
      "block wider than block 1"
    ]
  },
  "block whose length is smaller than height of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "which brick has a length shorter than the height of brick 1",
      "block that is shorter than block one",
      "find the block that is shorer than block 1",
      "what block is not as long as block 1 is tall",
      "find me all the blocks shorter than block 1"
    ]
  },
  "block whose shape is a pyramid": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find me all the pyramid blocks",
      "select all pyramid blocks",
      "find me any pyramidshaped block",
      "block whose shape is a pyramid",
      "find a block shaped like a pyramid"
    ]
  },
  "block that block that is above block 1 is below": {
    "denotation": "(list (name en.block.12))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "find a block that is above block 1",
      "find me the block that is above block 1"
    ]
  },
  "block that is special and whose length is 3 inches": {
    "denotation": "(list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find me all special blocks with length less than 3 inches",
      "find me all special 3 inch long blocks",
      "find me a 3 inch long special block",
      "find all the special blocks that are 3 inches long",
      "block that is special and whose length is 3 inches"
    ]
  },
  "block that block 1 is below and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find me all pyramid blocks that block 1 is below",
      "pyramid block above block 1",
      "find the block that block 1 is below and that has a shape of a pyramid",
      "select the pyramid shaped block",
      "what pyramid shaped block above block 1"
    ]
  },
  "block that block 1 is right of and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find the block that is to the right of block 1 with a width of 3 inches",
      "find a block whose width is three inches that block 1 is to the right of",
      "find 3 inch block left of block 1"
    ]
  },
  "block that is right of block that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the right of the block that block 1 is above",
      "find me all blocks right of that block 1 is above",
      "block right of the block below block 1",
      "find me the block that is to the right of the block that block 1 is above"
    ]
  },
  "block that is right of block 1 and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "select the block that is to the right of block 1 and has a height of 3 inches",
      "select the block 3 inched high to the right of block 1",
      "find me all 3 inch tall blocks right of block 1",
      "3 inch block right of block 1",
      "select the block right of block 1 that is 3 inches tall"
    ]
  },
  "block that block 1 not is left of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string !=) en.block.block1))",
    "paraphrases": [
      "block that block one isnt left of",
      "select the block that block 1 is not to the left of",
      "block not right of block 1"
    ]
  },
  "block that block that block 1 is right of is right of": {
    "denotation": "(list (name en.block.29))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks front and left of block 1",
      "what block is two blocks to the right of block 1",
      "find the block on the right side of the block on the right side of block 1"
    ]
  },
  "block that is left of block 1 and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "block left and above block 1",
      "find me all blocks left and above block 1",
      "get me a block above and to the left of block 1",
      "block above and to the left of block 1"
    ]
  },
  "block that is special and that is special": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string is_special)))",
    "paraphrases": [
      "find a special block",
      "block that is special and that is special",
      "choose a block that is special"
    ]
  },
  "block that block 1 is below": {
    "denotation": "(list (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me the block that block 1 is below",
      "select the block above block 1",
      "find me all blocks above block 1"
    ]
  },
  "block that at least two block is above": {
    "denotation": "(list (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.6) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me a block below at least two blocks",
      "block above at leat two blocks",
      "find a block buried under at least two other blocks",
      "find me all blocks with at least 2 blocks above it",
      "which block has at least two blocks above it"
    ]
  },
  "block that is above less than two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which brick is above less than two bricks",
      "is there a block piled on any other block but only one",
      "block that is above less than two block",
      "what block has less than two blocks below it",
      "block above less than two blocks"
    ]
  },
  "block that block 1 is above and that is special": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "find me all special blocks that block 1 is above",
      "select the block that is special and that block 1 is above",
      "select the block 1"
    ]
  },
  "block that is above block whose shape is a pyramid": {
    "denotation": "(list (name en.block.12) (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "find a block with a pyramidshaped block below it",
      "block above a pyramid shaped block",
      "is there a block on top of the pyramidshaped block",
      "which brick is above the pyramidshaped block",
      "block that is above block whose shape is a pyramid"
    ]
  },
  "color of block 1": {
    "denotation": "(list (name en.color.red))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color)))",
    "paraphrases": [
      "what color is brick 1",
      "color of block 1",
      "what is the color of block 1",
      "what color is block 1"
    ]
  },
  "block that is left of less than two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which blocks are left of singleorfewer blocks",
      "find that block that is to the left of just one other block",
      "find me all blocks with at most two blocks to the left",
      "what block has less than two blocks to the right of it",
      "which brick is to the left of less than two bricks"
    ]
  },
  "block that block 1 is left of and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "block to the left of block 1 thats 3 inches wide",
      "what block is to the right of block 1 and has a width of 3 inches"
    ]
  },
  "block that is left of at least two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block to left of two or more blocks",
      "block left of 2 blocks",
      "select the block that is to the left of two or more blocks",
      "find me all blocks with at least 2 blocks to the right"
    ]
  },
  "block that is above block that block 1 is below": {
    "denotation": "(list (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks above that block 1 is below",
      "find me the block that is above the block that block 1 is below",
      "block two above block 1",
      "what block is above the block of block1 "
    ]
  },
  "block that is above block that is left of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.17) (name en.block.5) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "choose a block to the left of block 1",
      "choose the brick that is above the brick to the left of brick 1"
    ]
  },
  "block that block that is left of block 1 is left of": {
    "denotation": "(list (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "block to the left of block 1",
      "find the blocks that are to the left of block 1 "
    ]
  },
  "block that has the most number of color": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string color)))",
    "paraphrases": [
      "find the block with the most colors",
      "find the block with the greatest number of colors on it",
      "which brick has the most colors",
      "choose the most colorful block",
      "find me the most colorful block",
      "block that has the most number of color"
    ]
  },
  "block that is below block whose height is 3 inches": {
    "denotation": "(list (name en.block.12) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.34) (name en.block.40) (name en.block.43) (name en.block.53) (name en.block.54) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "select the lower block that is 3 inches tall",
      "block that is below block whose height is 3 inches",
      "find me a block below the 3 inch tall block",
      "find me all blocks below 3 inch high blocks",
      "find all blocks that are below blocks with height equal to 3 inches"
    ]
  },
  "block whose height is at most 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "find a block with a height no more than 3 inches",
      "find the block with a maximum height of 3 inches",
      "find me all the blocks at most as tall as 3 inches",
      "what block is 3 or less inches tall",
      "what brick is no more than 3 inches high",
      "block whose height is at most 3 inches"
    ]
  },
  "block that block whose width is 3 inches is below": {
    "denotation": "(list (name en.block.12) (name en.block.22) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.43) (name en.block.52) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block above 3 inch wide block",
      "select the block that is below the block with a width of 3 inches",
      "select the blocks that are 3 inches wide"
    ]
  },
  "block that block that is above block 1 is above": {
    "denotation": "(list (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block that is above block 1",
      "block two above block 1",
      "block above block 1"
    ]
  },
  "total width of block": {
    "denotation": "(list (number 27 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))",
    "paraphrases": [
      "what is the width of the block",
      "what is the total width of the brick",
      "what is the total width of the block",
      "what is the total width of the blocks",
      "total width of blocks"
    ]
  },
  "block that block 1 is right of and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find me all 3 inch tall blocks that block 1 is right of",
      "which is the 3 inches tall block at the left of block 1",
      "select the block that is to the left of block 1 and has a total height of 3 inches",
      "block right of block 1 which is 3 inches high"
    ]
  },
  "block whose length is 3 inches and that is left of block 1": {
    "denotation": "(list (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "which brick is to the left of brick 1 that is at least 3 inches long",
      "is there a block that is to the left of block 1 that is also 3 inches in length",
      "find me all the 3 inch long bricks left of block 1",
      "select a block to the left of block 1 that is 3 inches long",
      "a three inches block at the left of block 1"
    ]
  },
  "block that is right of block 1 and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that is to the right of and below block 1",
      "the block below block one and to the right of block 1",
      "find me all blocks right and below block 1",
      "look below and right of block 1"
    ]
  },
  "block that block 1 is below and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "above and to the right of block 1",
      "find me all blocks that block 1 is below and right of",
      "name a block with block 1 below and to the right",
      "block above and to right of block 1"
    ]
  },
  "block that block 1 is left of and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch block right of block 1",
      "which block is 3 in height and has block 1 on its left",
      "select the block that block 1 is to the left of and that has a height of 3 inches",
      "find me all 3 inch tall blocks that block 1 is left of",
      "select the block that is 3 inches and is left of block 1"
    ]
  },
  "block that block 1 not is above": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string !=) en.block.block1))",
    "paraphrases": [
      "find me all blocks which block 1 is not above",
      "block which does not have block 1 above",
      "block not below block 1",
      "what block is not above block 1"
    ]
  },
  "block whose length is 3 inches and that is below block 1": {
    "denotation": "(list (name en.block.30) (name en.block.38))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "choose the brick below brick 1 that is 3 inches long",
      "find me all the 3 inches long blocks and below block 1",
      "find the block underneath block 1 that is 3 inches long",
      "select the 3 inch block below block 1",
      "select a block below block 1 that is 3 inches long"
    ]
  },
  "block that the most number of block is above": {
    "denotation": "(list (name en.block.16))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block that is above the most bricks",
      "select the brick with the most blocks above it",
      "which block is closest to the bottom",
      "what block is below the most blocks"
    ]
  },
  "block that is left of block that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is above block 1",
      "find me all blocks and and over block 1",
      "what block is to the left of the block above block 1",
      "left of block over block 1"
    ]
  },
  "block whose shape is a pyramid or a cube": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))",
    "paraphrases": [
      "find the block that is shaped like a pyramid or a cube",
      "find me all the pyramid or cube bricks",
      "find me a pyramid or cube shaped block",
      "choose the brick shaped like a pyramid or a cube",
      "choose a block that is shape like a cube or pyramid"
    ]
  },
  "block that block that block 1 is below is below": {
    "denotation": "(list (name en.block.29))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block that is below block 1",
      "find me all blocks that block 1 is belo",
      "2 blocks below block 1"
    ]
  },
  "block whose shape is a pyramid and whose shape is a pyramid": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "a pyramid shaped block",
      "find a pyramidshaped block",
      "which brick is shaped like a pyramid",
      "locate the pyramidshaped block",
      "find me all pyramid shaped blocks",
      "block whose shape is a pyramid and whose shape is a pyramid"
    ]
  },
  "block that is right of block 1 and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "find me the block that is to the right and above block 1"
    ]
  },
  "block whose shape is a pyramid and whose height is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "which pyramidshaped brick is 3 inches high",
      "find me all the 3 inch tall pyramid bricks",
      "find me a 3 inch tall pyramidshaped block",
      "find a pyramidshaped block with a 3 inch height",
      "find me a pyramid block that is 3 inches tall"
    ]
  },
  "block that block 1 not is right of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string !=) en.block.block1))",
    "paraphrases": [
      "left of block 1",
      "block not to right of block 1",
      "find me all blocks that block 1 is not right of",
      "block not to the left of block 1",
      "what block is block 1 not to the right of"
    ]
  },
  "block that block whose height is 3 inches is left of": {
    "denotation": "(list (name en.block.16) (name en.block.17) (name en.block.27) (name en.block.29) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.59) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find the block of 3 inches height and placed in left ",
      "what block is left of a 3 inch block",
      "right of 3 inch block",
      "select the block that is left of a block that is 3 inches"
    ]
  },
  "block whose width is smaller than 3 inches": {
    "denotation": "(list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "select the block with a width smaller than 3 inches",
      "find me all blocks with a width shorter than 3 inches",
      "what block is less than 3 inches wide",
      "which brick has a width smaller than 3 inches",
      "block whose width is smaller than 3 inches",
      "find me all blocks with width less than 3 inches"
    ]
  },
  "block that block 1 or block 2 is below": {
    "denotation": "(list (name en.block.29) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "above block 1 or block 2",
      "find me all blocks that blocks 1 or 2 is below",
      "select the blocks above block 1 and 2",
      "find blocks above block 1 or block 2"
    ]
  },
  "block that is right of block 1 and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "select the block on the right side of block 1",
      "find me all blocks right of block 1 which block 1 is left of",
      "select the block that is to the right of block 1",
      "right of block 1"
    ]
  },
  "block whose length is smaller than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "a brick which length is between 3 and 6 inches",
      "find a block 6 inches long or less",
      "block whose length is smaller than 3 inches or 6 inches",
      "locate a block that is shorter than 3 inches or 6 inches",
      "which brick has a length smaller than 3 or 6 inches"
    ]
  },
  "block that is left of block 1 and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "left of block 1",
      "select the blocks to the right and left of block 1",
      "what block is to the left of the block that block 1 is to the right of",
      "find the block that is left of block 1"
    ]
  },
  "block that two block is above": {
    "denotation": "(list (name en.block.14) (name en.block.2) (name en.block.27) (name en.block.28) (name en.block.43) (name en.block.46) (name en.block.52) (name en.block.54) (name en.block.6) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "is there a block beneath two other blocks",
      "select the block that is two blocks above that block",
      "which block has two blocks above it",
      "find me all the bricks with 2 blocks above it"
    ]
  },
  "block whose shape is a pyramid and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "what pyramidshaped block is to the right of block 1",
      "find me all pyramid blocks that is right of block 1",
      "pyramid to right of block 1",
      "select the block that is in the shape of a pyramid and to the right of block 1",
      "pyramid block right of block 1",
      "pyramid right of block 1",
      "find me all pyramid blocks which is right of block 1"
    ]
  },
  "block that is right of block 1 and whose length is 3 inches": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is 3 inches long and has block 1 on its left",
      "find the 3inch long block which is located to the right of block 1",
      "block right of 3 inches long block 1",
      "what 3 inch brick is to the right of brick 1",
      "block that is right of block 1 and whose length is 3 inches",
      "find me all 3 inch long blocks right of block 1"
    ]
  },
  "block that is above the most number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block above most number of blocks",
      "find the block located on top of the highest number of other blocks",
      "what block has the most blocks below it"
    ]
  },
  "block that block that is special is below": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.33) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "block above special block",
      "what is the block above special block",
      "find me all special blocks that is below"
    ]
  },
  "block that is above block that is right of block 1": {
    "denotation": "(list (name en.block.43) (name en.block.50))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "block that is above block which is right of block 1",
      "find a block to the right and above block 1",
      "select the block that is above and right of block 1",
      "which brick is above the brick to the right of brick 1",
      "find the block up 1 and right 1 of block 1"
    ]
  },
  "block that block 1 is left of and that is special": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "select the block that is block 1 is left of and that is special",
      "find me all special blocks that block 1 is left of",
      "select the special block to the right of block 1"
    ]
  },
  "total height of block": {
    "denotation": "(list (number 27 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))",
    "paraphrases": [
      "what is the height of the block",
      "what is the blocks height",
      "find the total height of the blocks",
      "what is the total height of the blocks"
    ]
  },
  "block whose height is 3 inches and whose height is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find a block that is 3 inches tall",
      "find me all blocks with height and width equal to 3 inches",
      "select all 3 inch high blocks",
      "find me all blocks 3 inches tall"
    ]
  },
  "block that block 1 or block 2 is left of": {
    "denotation": "(list (name en.block.32) (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "block left of blocks 1 and 2",
      "right of block 1 and block 2",
      "blocks that have block 1 or block 2 at left",
      "find the block that is left of block 1 or block 2",
      "find me all blocks right of block 1 or 2"
    ]
  },
  "block whose height is length of block 1": {
    "denotation": "(list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))",
    "paraphrases": [
      "select all blocks with height equal to the length of block 1",
      "find me all the blocks as tall as block 1 is long",
      "block whose height is length of block 1",
      "find a block with height equal to block 1s length",
      "select all bricks with length of 1"
    ]
  },
  "block 1 or block 2": {
    "denotation": "(list (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))",
    "paraphrases": [
      "select block 1 or 2",
      "either block 1 or 2",
      "locate block one or block 2",
      "choose brick 1 or brick 2",
      "find me either block 1 or block 2"
    ]
  },
  "block that the least number of block is below": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.2) (name en.block.21) (name en.block.24) (name en.block.26) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find the block above the least blocks",
      "find a block with the least number of blocks below it",
      "select the block that is above the smallest group of blocks"
    ]
  },
  "block that at most two block is above": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "select the blocks that are under no more than 2 blocks",
      "find me all the blocks that is at most below 2 blocks",
      "find me a block that is below at most two blocks",
      "block above at most two block",
      "which brick has no more than two bricks above it"
    ]
  },
  "block that is left of block that is left of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.33))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "block left of a block that is left of block 1",
      "find me all the blocks two blocks left of block 1",
      "select the brick two bricks left of brick 1",
      "find the block that is on the other side of a block located to the left of block 1",
      "what block is two blocks to the left of block 1",
      "block that is left of block that is left of block 1"
    ]
  },
  "block that is below block whose width is 3 inches": {
    "denotation": "(list (name en.block.34) (name en.block.42) (name en.block.45) (name en.block.48))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find me all blocks below 3 inch wide blocks",
      "block that is below block whose width is 3 inches",
      "what block is below the 3 inch wide block",
      "locate the block beneath the block that has a width of 3 inches",
      "which brick is below a brick that is 3 inches wide",
      "choose a block that is below a 3 inch block"
    ]
  },
  "block whose length is 3 inches and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch block above block 1",
      "select the block with a length of 3 inches that is above block 1",
      "3 inch long block above block 1"
    ]
  },
  "block that is right of block whose height is 3 inches": {
    "denotation": "(list (name en.block.15) (name en.block.17) (name en.block.21) (name en.block.25) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.41) (name en.block.44) (name en.block.45) (name en.block.58) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block that is right of block whose height is 3 inches",
      "find the block to the right of the 3 inch tall block",
      "choose a block that is right of a 3 inch brick",
      "find me all blocks right of 3 inch high blocks",
      "which brick is to the right of the brick that is 3 inches high",
      "block to the right of the 3 inch high block"
    ]
  },
  "block that is special": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)))",
    "paraphrases": [
      "find me all the special blocks",
      "a special block",
      "locate the block that is special"
    ]
  },
  "block whose height is 3 inches and whose width is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is 3 inches wide by 3 inches tall",
      "which brick is 3 inches wide and 3 inches high",
      "the 3x3 inch block",
      "find me all 3 inch high and 3 inch wide blocks",
      "block whose height is 3 inches and whose width is 3 inches",
      "block with 3 inch height and 3 inch wide"
    ]
  },
  "block whose height is at most width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "find a block at most as tall as block 1s width",
      "locate the block that is no taller in inches than the width of block 1",
      "find me all blocks at most as tall as block 1",
      "which brick is no higher than brick 1 is wide",
      "block whose height is at most width of block 1",
      "block of height not more than width of block 1"
    ]
  },
  "block that block that is right of block 1 is above": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks above and right of block 1"
    ]
  },
  "block whose length is 3 inches and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "get a 3inch long block below block 1",
      "3 inches long block and that is above block 1",
      "find me all 3 inch long blocks that block 1 is above",
      "find a block with a length of 3 inches that block 1 is above"
    ]
  },
  "block that is left of block that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the left of the block that is to the right of block 1",
      "find me all blocks at block 1",
      "cannot paraphase",
      "2 blocks right of block 1"
    ]
  },
  "block that is right of block whose shape is a pyramid": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.21) (name en.block.22) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.42) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "select the blocks that are to the right of pyramid blocks",
      "which brick is to the right of the pyramidshaped brick",
      "what block is to the right of the pyramidshaped block",
      "block with pyramid shape at the right of block",
      "find me all the blocks right of the pyramid block"
    ]
  },
  "block that more than two block is left of": {
    "denotation": "(list (name en.block.18) (name en.block.29) (name en.block.37) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks with more than 2 blocks to the left of it",
      "choose a brick that has more than 2 blocks to its left",
      "is there a block to the right of more than two other blocks",
      "what block is to the right of more than two blocks",
      "block that more than two block is left of"
    ]
  },
  "block that is left of block that is special": {
    "denotation": "(list (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.49) (name en.block.50) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.59) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "select the block to the left of the special block",
      "find the block located on the left side of the special block",
      "choose a block to the left of the special brick",
      "which brick is to the left of the special brick",
      "find me all the blocks left of special blocks"
    ]
  },
  "block that more than two block is right of": {
    "denotation": "(list (name en.block.14) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.36) (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "is there a block to the left of more than two blocks",
      "block right of more than two blocks",
      "what brick has more than 2 bricks to its right",
      "what block is to left of more than two blocks",
      "block that more than two block is right of",
      "find me all blocks with at least 2 blocks to the right of it"
    ]
  },
  "block that block that is right of block 1 is left of": {
    "denotation": "(list (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks at block 1",
      "select the block that is right of the block that block 1 is to the left of",
      "which block is to the right of block 1",
      "select the block to the right of the block left of block 1"
    ]
  },
  "block that block 1 is right of and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks right and below block 1",
      "find me the block that is above and to the left of block 1",
      "block left and above block 1",
      "block aboe and left of block 1",
      "select the blocks left of and above block 1"
    ]
  },
  "block whose width is at most 3 inches or 6 inches": {
    "denotation": "(list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "find me all blocks at least 3 inch wide",
      "which brick is no wider than 3 or 6 inches",
      "is there a block with a width that equals 3 or 6 inches maximum",
      "find me a block at most 6 inches wide"
    ]
  },
  "shape of block 1": {
    "denotation": "(list (name en.shape.cube))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))",
    "paraphrases": [
      "what shape is brick 1",
      "find me all blocks with the shape of block 1",
      "what is the shape of block 1",
      "what shape is block 1",
      "describe the shape of block 1"
    ]
  },
  "block that block 1 is below and whose length is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch block above block 1",
      "find me all 3 inch long blocks that block 1 is below",
      "block below block 1 which is 3 inches long",
      "find me the block that block 1 is below and that has a length of 3 inches",
      "which 3 inches long block is above block 1"
    ]
  },
  "block that block whose height is 3 inches is right of": {
    "denotation": "(list (name en.block.18) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.43) (name en.block.47) (name en.block.50) (name en.block.55) (name en.block.58) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block left of 3 inch block",
      "left of 3 inch block",
      "find a block to the right of a block 3 in height",
      "find me all blocks right of 3 inch tall blocks"
    ]
  },
  "block whose height is 3 inches and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "get the block that is 3 inches tall found left of block 1",
      "find the blocks who have a height of 3 inches are are to the left of block 1",
      "find me all 3 inch tall blocks left of block 1",
      "3 inch tall block left of block 1",
      "what blocks are left of block 1 and 3 inches in height"
    ]
  },
  "block that block 1 is left of": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that is to the left of block 1",
      "find me all blocks that block 1 is left of",
      "name a block that has block 1 on its left"
    ]
  },
  "block that block 1 is below and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is below and above",
      "find me the block that block 1 is below and above"
    ]
  },
  "block that is right of the most number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block that is at the right of most number of blocks",
      "which block is furthest to the right",
      "locate a block that is located to the right of the maximum number of blocks",
      "select the brick that has the least blocks to the left of it",
      "find the block with the most blocks to the right of"
    ]
  },
  "block that is right of block 1 and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks right of block 1",
      "what block has block 1 at its left and right"
    ]
  },
  "total length of block": {
    "denotation": "(list (number 27 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))",
    "paraphrases": [
      "how long is the block",
      "what is the total length of the brick",
      "total length of block",
      "what is the length of the block",
      "what is the total length of the blocks"
    ]
  },
  "block that two block is left of": {
    "denotation": "(list (name en.block.17) (name en.block.27) (name en.block.3) (name en.block.32) (name en.block.4) (name en.block.41) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block to the left of block 2",
      "find a block located to the right of two other blocks",
      "find me all blocks with 2 blocks to the left",
      "what brick has two bricks to its left"
    ]
  },
  "block that is above block that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks 2 above block 1",
      "what block is above the block that is above block 1",
      "block a above block that is above block 1",
      "get the second block above block 1",
      "block two spaces above block 1"
    ]
  },
  "block that is right of less than two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which brick is to the right of less than two bricks",
      "is there a block that has only one block to the left of it",
      "block that is right of less than two block",
      "find me all blocks that has less than 2 blocks to the left",
      "what block has less than two blocks to the left of it",
      "block that is right of at most one block"
    ]
  },
  "block that block 1 is above": {
    "denotation": "(list (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "get the blocks below block 1",
      "select the block that block 1 is above"
    ]
  },
  "block whose length is 3 inches and whose width is 3 inches": {
    "denotation": "(list (name en.block.30))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what brick is 3 inches long and 3 inches wide",
      "block whose length is 3 inches and whose width is 3 inches",
      "is there a block whose diameter and length is an equal 3 inches in both those directions",
      "find a block with a length and width of 3 inches each side",
      "find me all the blocks that is 3 inches wide and long"
    ]
  },
  "block that block 1 is above and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch wide block below block 1",
      "select the block that block 1 is above with a width of 3 inches",
      "find me all 3 inch wide blocks that block 1 is above"
    ]
  },
  "block that is left of block 1 and that is special": {
    "denotation": "(list (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "choose the special block to the left of block 1",
      "block lft of special block 1",
      "find the special block to the left of block 1",
      "which special brick is to the left of brick 1"
    ]
  },
  "block that is right of block that is below block 1": {
    "denotation": "(list (name en.block.19) (name en.block.37) (name en.block.52) (name en.block.57) (name en.block.59) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "select a brick to the right of the brick directly below brick 1",
      "is there a block to the right of the block that is underneath block 1",
      "find me a block that is to the right of the block that is below block 1",
      "find a block below and to the right of block 1"
    ]
  },
  "block that is below block 1 and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks below that block 1 is above",
      "select the block that is below block 1",
      "block below block 1"
    ]
  },
  "block that is below block 1 and that is left of block 1": {
    "denotation": null,
    "formula": null,
    "paraphrases": []
  },
  "block that has two shape": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (number 2)))",
    "paraphrases": [
      "find me all blocks that have two shapes",
      "select the block that has two shapes",
      "two shape block",
      "find me all blocks with 2 shapes"
    ]
  },
  "block that is above at most two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block that is above at most two block",
      "find me a block with at most two blocks below it",
      "find me all blocks above at most 2 blocks",
      "choose a block that is no higher than 2 blocks",
      "find all blocks above 2 or fewer blocks"
    ]
  },
  "block that has at least two shape": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >=) (number 2)))",
    "paraphrases": [
      "name a block that has two or more shapes",
      "block with two or more shapes",
      "what block has two or more shapes"
    ]
  },
  "block that is special and that block 1 is below": {
    "denotation": "(list (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all special blocks that block 1 is under",
      "find me all special blocks that are below block 1",
      "select the special block above block 1",
      "find a special block above block 1 "
    ]
  },
  "block whose length is 3 inches and whose length is 3 inches": {
    "denotation": "(list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "select all blocks that are 3 inches long",
      "find me a 3 inch long block",
      "block whose length is 3 inches and whose length is 3 inches",
      "a block that is 3 inches long",
      "find me all the 3 inch long blocks"
    ]
  },
  "block that is below block that is left of block 1": {
    "denotation": "(list (name en.block.27))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block located beneath the second block that is located to the left of block 1",
      "find me all the blocks below and to the left of block 1",
      "select block below and to the left of block 1",
      "choose a block that is below and to the left of block 1",
      "block that is below block that is left of block 1"
    ]
  },
  "block whose width is smaller than height of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "which brick has a width smaller than the height of brick 1",
      "block whose width is smaller than height of block 1",
      "find a block with a width that is less than the height of block 1",
      "what block is skinnier than the height of block 1",
      "find me all blocks whose width is shorter than the height of block 1",
      "choose a block that is smaller than block 1"
    ]
  },
  "block that is special and whose width is 3 inches": {
    "denotation": "(list (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.49))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "which one is a 3 inch special block",
      "select the 3 inch wide special block",
      "find all special blocks that are 3 inches wide",
      "which special block is 3 inches wide"
    ]
  },
  "block that at most two block is below": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block that at most two block is below",
      "find the block above 2 blocks",
      "find a block above at most two blocks",
      "choose a block beneath block 2",
      "what block has two blocks or less below it",
      "find me all the bricks that have at most 2 blocks below it"
    ]
  },
  "block that is above block 1 and that is special": {
    "denotation": "(list (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "choose the block above the speciallooking block 1",
      "select all special blocks above block 1",
      "find me all the special blocks above block 1",
      "find the special block with block 1 below it"
    ]
  },
  "block that is above block 1 and whose length is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "select the block that is above block 1 with a length of 3 inches",
      "find me all 3 inch long blocks above block 1",
      "3 inch block above block 1",
      "what 3 inches long block is above block 1",
      "select the block that is 3 inches in length and is above block 1"
    ]
  },
  "block whose height is at least length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "find me all blocks taller than the length of block 1",
      "what block is at least as tall as block 1 is long",
      "locate the block with a height measurement that equals at minimum the length of block 1",
      "which brick is at least as high as brick 1 is long",
      "block whose height is at leas the length of block 1"
    ]
  },
  "block that block that is right of block 1 is right of": {
    "denotation": "(list (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "2nd block right of block 1",
      "block two right from block 1",
      "find me all blocks that is right of block 1"
    ]
  },
  "block whose width is 3 inches and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch wide block to the left of block 1",
      "select the block with a width of 3 inches",
      "what block has a width of 3 inches and block 1 is to the right of"
    ]
  },
  "block that block that is left of block 1 is below": {
    "denotation": "(list (name en.block.25) (name en.block.3))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "block left of block above block 1",
      "select the block above the block to the right block 1",
      "find me all blocks left of which block 1 is below",
      "block that is left of the block above block 1"
    ]
  },
  "block that block that block 1 is right of is below": {
    "denotation": "(list (name en.block.57))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the right of and below block 1",
      "what block is the block to the right and below block 1",
      "find me all blocks that block 1 is right and below"
    ]
  },
  "block that is left of block 1 and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find me the block that is to the left of block 1 with a height of 3 inches",
      "block left of block 1 thats 3 inches high"
    ]
  },
  "block that two block is below": {
    "denotation": "(list (name en.block.12) (name en.block.25) (name en.block.3) (name en.block.31) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block under block 2",
      "find me all blocks with 2 blocks below it",
      "which brick has two bricks below it",
      "find the block above two blocks",
      "find a block that is on top of two other blocks"
    ]
  },
  "block that block that is above block 1 is left of": {
    "denotation": null,
    "formula": null,
    "paraphrases": []
  },
  "3 inches or 6 inches": {
    "denotation": "(list (number 3 en.inch) (number 6 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))",
    "paraphrases": [
      "what brick is at least 3 or 6 inches",
      "choose a block between 3 or 6 inches",
      "is there a block with a measurement of 3 inches or 6 inches"
    ]
  },
  "block that is special and that block 1 is right of": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "special block left of block 1",
      "find me all special blocks that are to the right of block 1",
      "what block is special and has block 1 on its right",
      "find me all special blocks that block 1 is right of",
      "what is the special block in the left of block 1"
    ]
  },
  "block that block 1 is below and that is special": {
    "denotation": "(list (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "select the block that is special and below block 1",
      "find a special block above block 1",
      "find me all special blocks that block 1 is below"
    ]
  },
  "block that block 1 is right of and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "left of block 1",
      "find me all blocks that block 1 is right and left of",
      "find the blocks to the right and left of block 1 ",
      "block in block 1",
      "find me the block that is to the right of block 1"
    ]
  },
  "block whose height is height of block 1": {
    "denotation": "(list (name en.block.12) (name en.block.17) (name en.block.22) (name en.block.35) (name en.block.37) (name en.block.5) (name en.block.54) (name en.block.58) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))",
    "paraphrases": [
      "which block is the same height as block 1",
      "find a block with the same height as block 1",
      "find me all the blocks as tall as block 1",
      "find the block that is the same height as block 1",
      "block whose height is height of block 1"
    ]
  },
  "block that block 1 is above and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "select the block on the right",
      "find me the block that block 1 is to the right and above"
    ]
  },
  "block that block 1 is left of and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is left and above of",
      "find the block that block 1 is to the left of and above",
      "right and below block 1",
      "block which has block 1 at left and above",
      "select the left of block 1"
    ]
  },
  "block whose width is 3 inches and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch block above block 1",
      "select the block above block 1 that is 3 inches wide",
      "what block has a width of 3 inches and is above block 1"
    ]
  },
  "block whose height is 3 inches and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch block above block 1",
      "3 inch tall block  above block 1",
      "find me the block that has a height of 3 inches and is above block 1",
      "what block three inches in height is above block 1"
    ]
  },
  "block that is below block 1 and whose shape is a pyramid": {
    "denotation": "(list (name en.block.30) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find all pyramid blocks below block 1",
      "which pyramidshaped brick is below brick 1",
      "what pyramidshaped blocks are below block 1",
      "find the pyramidshaped block below block 1"
    ]
  },
  "block that is right of block 1 and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find the block that is right of block 1 and has a width of 3 inches",
      "find me all 3 inch wide blocks that is right of block 1",
      "which block of 3 width is to the right of block 1",
      "find me a 3inch wide block to the right of block 1"
    ]
  },
  "block whose height is at least height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "what brick is at least as high as brick 1",
      "locate the block with a height that is equal to or greater than the height of block 1",
      "find a block that is at least the same height as block 1",
      "block whose height is at least height of block 1",
      "find me all blocks at least the same height as block 1",
      "find me all the blocks at least as tall as block 1"
    ]
  },
  "block that has less than two shape": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <) (number 2)))",
    "paraphrases": [
      "block that has less than two shape",
      "block with one shape",
      "find me all blocks with less than 2 shapes",
      "find a block with less than two shapes",
      "which brick has less than two shapes",
      "block thats less than block 2"
    ]
  },
  "block whose width is smaller than width of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "choose a smallest block than block 1",
      "which brick has a width smaller than the width of brick 1",
      "find me all the bricks with a smaller width than block 1",
      "find me a block skinnier than block 1",
      "locate the block with a diameter less than that of block 1"
    ]
  },
  "block whose length is larger than width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.31) (name en.block.32) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "locate the block with a length that exceeds the width of block 1",
      "which block is longer than block 1 is wide",
      "block longer than width of block 1",
      "find me all the bricks  longer than the width of block 1",
      "block whose length is larger than width of block 1",
      "what block is longer than block 1 is wide"
    ]
  },
  "block that is left of block that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "which block is to the left of the block that block 1 is below",
      "find me all blocks left of that block 1 is below",
      "what block is to the left of the block that block 1 is below",
      "get me the blocks to the left of the block above block 1",
      "see block above block 1 and get block left of that one"
    ]
  },
  "block that is below block that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "block below and two left of block 1",
      "what block is below the block that block 1 is to the right of",
      "find me all blocks that is below which block 1 is right of",
      "which block is below a block that block 1 is to the right of"
    ]
  },
  "a pyramid or a cube": {
    "denotation": "(list (name en.shape.cube) (name en.shape.pyramid))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube))",
    "paraphrases": [
      "a pyramid or a cube",
      "is it a pyramid or a cube",
      "select a pyramid or cube shaped block",
      "find a block shaped like a pyramid or a cube",
      "choose a pyramid or a cube"
    ]
  },
  "block that has at most two color": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))",
    "paraphrases": [
      "which brick has no more than 2 colors",
      "find a block with a maximum of two colors on it",
      "find me all blocks with at most 2 colors",
      "find me a block with two or less colors",
      "block with maximum two colors"
    ]
  },
  "block that has the smallest width": {
    "denotation": "(list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))",
    "paraphrases": [
      "block with lowest width",
      "block that has the smallest width",
      "find me the block with the smallest width",
      "choose the brick with the smallest width",
      "find the skinniest block",
      "choose the brick that is the least thick"
    ]
  },
  "block that block 1 is above and that block 1 is above": {
    "denotation": "(list (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "what block is above block 1 ",
      "select the block that is above block 1"
    ]
  },
  "block whose length is height of block 1": {
    "denotation": "(list (name en.block.2) (name en.block.21) (name en.block.24) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.47) (name en.block.53) (name en.block.56) (name en.block.57))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))",
    "paraphrases": [
      "is there a block that is as long as block 1 is high",
      "find me all the blocks that is as long as block 1 is tall",
      "find me a block with length equal to block 1s height",
      "which brick is as long as brick 1 is tall",
      "block as long as the height of block 1"
    ]
  },
  "block that is below block that is below block 1": {
    "denotation": "(list (name en.block.15) (name en.block.39) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "choose block underneath block under block 1",
      "block that is below block that is below block 1",
      "find me all blocks 2 blocks below block 1",
      "which brick is below the brick below brick 1",
      "what block is 2 blocks below block 1",
      "block below block which is below block 1"
    ]
  },
  "block that is right of block whose length is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.18) (name en.block.19) (name en.block.23) (name en.block.24) (name en.block.3) (name en.block.31) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.43) (name en.block.52) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "what block is to the right of the 3 inch long block",
      "find me all the blocks right of 3 inch long blocks",
      "choose the brick to the right of the 3 inch block",
      "select the block that is to the right of a block with a length of 3 inches",
      "what brick is to the right of the 3 inch brick"
    ]
  },
  "block whose shape is a pyramid and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "select the pyramidshaped block below block 1",
      "pyramid block below block 1"
    ]
  },
  "block that is below block 1 and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "block below and to left of block 1",
      "find me all blocks below which block 1 is right of"
    ]
  },
  "block that is below block that block 1 is left of": {
    "denotation": "(list (name en.block.41) (name en.block.51))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "block below block right of block 1",
      "block below and to right of block 1",
      "what block is below the block that block 1 is to the left of"
    ]
  },
  "block that has the largest width": {
    "denotation": "(list (name en.block.10) (name en.block.2) (name en.block.32) (name en.block.35) (name en.block.40) (name en.block.48) (name en.block.55) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))",
    "paraphrases": [
      "which brick is the widest",
      "find the widest block",
      "select the block with the biggest width",
      "select the widest block"
    ]
  },
  "block whose height is smaller than length of block 1": {
    "denotation": "(list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "find a block whose height is smaller than the length of block 1",
      "what block is shorter then block 1 is long",
      "find me all the blocks shorter than block 1 is long",
      "block whose height is smaller than length of block 1"
    ]
  },
  "block whose height is at least width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "what block is at least as tall as block 1 is wide",
      "find me all the blocks as tall as the width of block 1",
      "find blocks that are at least as tall as block 1 is wide",
      "which block is at least as high as block 1 is wide",
      "block taller or same height as the width of block 1"
    ]
  },
  "block that block 1 is below and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is below block 1 and has a height of 3 inches",
      "which block that is 3 in height has block 1 below it",
      "select the 3 inch high block above block 1"
    ]
  },
  "block whose height is 3 inches and whose shape is a pyramid": {
    "denotation": "(list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find all 3 inch pyramid blocks",
      "find me all pyramid blocks with height equal to 3 inches",
      "find me all the 3 inch tall pyramid blocks",
      "block whose height is 3 inches and whose shape is a pyramid",
      "what block is 3 inches tall and pyramidshaped"
    ]
  },
  "block that is above block 1 and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks over and right of block 1",
      "block above and right from block 1"
    ]
  },
  "block whose width is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "which brick is 3 inches wide",
      "block whose width is 3 inches",
      "what block is 3 inches wide",
      "locate a 3inch lwide block"
    ]
  },
  "block that is below block 1 and whose height is 3 inches": {
    "denotation": "(list (name en.block.33))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "select the 3 inch tall block below block 1",
      "which 3 inch brick is below brick 1",
      "3 inch tall block under first block",
      "find the block below block 1 that is 3 inches high"
    ]
  },
  "block that is left of block 1 and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that is to the left of block 1",
      "select the block left of block 1",
      "left of block 1"
    ]
  },
  "block that block 1 is above and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that above and below block 1",
      "block above 1 block and below 1 block"
    ]
  },
  "block that block 1 is left of and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "what block is left and right of block 1",
      "block that has block 1 in the right and left",
      "find me the block that is to the left of the block that is to the right of block 1",
      "find me all blocks that block 1 is left and right of"
    ]
  },
  "block whose length is smaller than width of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "select all which is less than the width of block 1",
      "choose a block that is less thick than block 1",
      "which block has a length smaller than block 1s width",
      "what blocks length is smaller than block 1s width",
      "find me all blocks with a length shorter than the width of block 1"
    ]
  },
  "block that block that block 1 is below is right of": {
    "denotation": "(list (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "right of block above block 1",
      "below and right from block 1",
      "what block is block 1 below and to the right of"
    ]
  },
  "block that block whose length is 3 inches is left of": {
    "denotation": "(list (name en.block.14) (name en.block.2) (name en.block.29) (name en.block.33) (name en.block.37) (name en.block.4) (name en.block.41) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "what block is at right of 3 inches long block",
      "select the block that is on the left side of the block that is 3 inches in length"
    ]
  },
  "block whose length is at least 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "find me all the bricks at least 3 inches long",
      "gather all the blocks that are 3 inches or more",
      "find me a block at least 3 inches long",
      "find the block that is at least 3 inches long",
      "which brick is at least 3 inches long"
    ]
  },
  "block that is left of block that block 1 is left of": {
    "denotation": "(list (name en.block.41) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "block to the left of a block that block 1 is left of",
      "2nd left of block 1",
      "find me all blocks 2 left of block 1"
    ]
  },
  "block whose shape is a pyramid and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "what pyramid blocks are above block 1"
    ]
  },
  "block that has the least number of color": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string color)))",
    "paraphrases": [
      "select the least colorful brick",
      "what block has the least number of colors",
      "which is the least colorful block",
      "block that has the least number of color",
      "which brick has the least number of colors",
      "find me the block with the least colors"
    ]
  },
  "block whose length is at most 3 inches or 6 inches": {
    "denotation": "(list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "find the block with maximum length of 6 inches",
      "select all blocks whose length at a maximum of 6 inches",
      "block whose length is at most either 3 inches or 6 inches",
      "find a block 6 inches or less long",
      "which brick is at most 3 or 6 inches long"
    ]
  },
  "block whose width is at most height of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "find me all blocks at most as wide at block 1 is tall",
      "which brick is no wider than brick 1 is tall",
      "what blocks width is less than or equal to block 1s height",
      "locate a block that is no wider than the height of block 1"
    ]
  },
  "block that less than two block is above": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all the blocks with less than 2 blocks above it",
      "which brick has less than two bricks above it",
      "what block is below less than two blocks",
      "the block beneath the block which is less than two"
    ]
  },
  "block that is above block that block 1 is right of": {
    "denotation": "(list (name en.block.11) (name en.block.13))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is above the block that block 1 is to the right of",
      "find me all blocks above that block 1 is right of",
      "what blocks are above the block that is to the right of block 1"
    ]
  },
  "block whose width is at least width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.50) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "choose a block thats the same width as block 1",
      "block whose width is at least the width of block 1",
      "find me a block as wide as block 1 or wider",
      "which brick is at least as wide as brick 1"
    ]
  },
  "block that has the smallest length": {
    "denotation": "(list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))",
    "paraphrases": [
      "select the shortest block",
      "find the block that has the smallest length",
      "what block is not longer than any other",
      "which block has the shortest length"
    ]
  },
  "block that is above block 1 and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "name a block of 3inch width above block 1",
      "3 inch block above block 1",
      "find the block that has a width of 3 inches and is above block 1"
    ]
  },
  "block that is below block that is special": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.35) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.48) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.56) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "which brick is below the special brick",
      "block below a special block",
      "what block is below the special block",
      "find the block below the special block",
      "find me all blocks below the special blocks"
    ]
  },
  "block whose width is smaller than length of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "block whose width is smaller than length of block 1",
      "choose a block that is not as thick as block 1",
      "which brick has a width less than the length of brick 1",
      "find me all the blocks with a smaller width than the length of block 1",
      "what block is thinner then block 1 is long",
      "block less wider than the length of block 1"
    ]
  },
  "block that is left of block whose length is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.24) (name en.block.26) (name en.block.33) (name en.block.39) (name en.block.46) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find me all blocks left of 3 inch blocks",
      "what block is to the left of the 3 inch long block",
      "which brick is to the left of the 3 inch brick",
      "is there a block located to the left of another block that is 3 inches long",
      "block that is left of block whose length is 3 inches",
      "choose a block that is 3 inches tall"
    ]
  },
  "block that block 1 or block 2 is right of": {
    "denotation": "(list (name en.block.14) (name en.block.42))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "block that has block 1 or block 2 at right",
      "find me all blocks right of blocks 1 or 2",
      "left of block 3",
      "what block is block 1 or 2 to the right of",
      "get a block to the left of block 1 or block 2"
    ]
  },
  "block that is below more than two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me the block that is below two or more blocks",
      "find me all blocks underneath at least 2 blocks",
      "block below two or more blocks"
    ]
  },
  "block whose length is at least length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "block whose length is at least length of block 1",
      "what block is at least as long as block 1",
      "which brick is at least as long as brick 1",
      "find me all blocks as long as block 1",
      "choose a block that is the same length as block 1"
    ]
  },
  "block that block 1 is left of and whose length is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "are there any 3inch long blocks to the right of block 1",
      "find me all 3 inch long blocks  that block 1 is left of",
      "3 inch block right of block 1",
      "what block is to the right of block 1 and has a length of 3 inches",
      "3 inches long block which has block 1 at left"
    ]
  },
  "block that is left of block whose height is 3 inches": {
    "denotation": "(list (name en.block.11) (name en.block.19) (name en.block.2) (name en.block.25) (name en.block.28) (name en.block.31) (name en.block.43) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.58) (name en.block.8) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "which block is to the left of the 3inch high block",
      "which brick is to the left of the brick that is 3 inches tall",
      "choose a block that is left of a 3 inch brick",
      "find me all the blocks left of 3 inch tall blocks",
      "what block is to the left of the 3 inch tall block",
      "block that is left of block whose height is 3 inches"
    ]
  },
  "block that is below the most number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block has the most blocks above it",
      "which brick is closest to the top",
      "choose a block that is under the most populous amount of blocks",
      "block that is below the most number of block"
    ]
  },
  "block that block 1 is left of and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "block to the right of block 1 and above it",
      "find me all blocks that block 1 is left and under",
      "select the block that block 1 is to the left and below"
    ]
  },
  "block that is above block 1 and that block 1 is above": {
    "denotation": null,
    "formula": null,
    "paraphrases": []
  },
  "block whose length is 3 inches and that is right of block 1": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks 3 inch long right of block 1",
      "which brick is 3 inches wide and to the right of brick 1",
      "choose a 3 inch block to the right of block 1",
      "select the block that is 3 inches long and to the right of block 1",
      "select the 3 inch long block to the right of block 1"
    ]
  },
  "block that is below block whose shape is a pyramid": {
    "denotation": "(list (name en.block.11) (name en.block.12) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "find the block underneath the pyramidshaped block",
      "block below a pyramid shaped block",
      "find me all blocks below pyramid blocks",
      "which brick is below the brick shaped like a pyramid",
      "block that is below block whose shape is a pyramid",
      "find the block with the pyramidshaped block above it"
    ]
  },
  "block that is below block that is above block 1": {
    "denotation": "(list (name en.block.26) (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "block below block that is above block 1",
      "which brick is below the brick that is above brick 1",
      "find a block between block 1 and a block above block 1",
      "find me all blocks at the same level as block 1"
    ]
  },
  "block that is above block 1 and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks above block 1",
      "block above block 1"
    ]
  },
  "block that less than two block is below": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block less than two blocks below",
      "find me a block that has less than two blocks below it",
      "the blocks under block 2 are smaller",
      "find me all blocks with less than 2 blocks below it",
      "which brick has two blocks below it"
    ]
  },
  "block that is below block 1": {
    "denotation": "(list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "select the blocks below block 1",
      "find me a block with block 1 above it"
    ]
  },
  "block whose color is color of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.51) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))",
    "paraphrases": [
      "is there a block with the same color as block 1",
      "block with same color as of block 1",
      "which block is the same color as block 1",
      "find a block the same color as block 1",
      "find me all blocks with the same color as block 1"
    ]
  },
  "block that block 1 is left of and whose shape is a pyramid": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "right of block one with pyramid shape",
      "what block is to the right of block 1 and is in the shape of a pyramid",
      "what pyramid shaped block is at right of block 1"
    ]
  },
  "block whose height is larger than width of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.52) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "block whose height is larger than width of block 1",
      "locate the block with a height that equals more than the width of block 1",
      "which brick is taller than brick 1 is high",
      "block taller than the width of block 1",
      "find me all the bricks taller than the width of block 1",
      "find a block taller than block 1 is wide"
    ]
  },
  "block that is below less than two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block below block 2",
      "which brick is below less than two bricks",
      "find me all blocks below two block",
      "find a block with less that two blocks above it",
      "find me all the blocks below at most 1 blocks"
    ]
  },
  "block whose length is larger than height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "find me all blocks taller than block 1",
      "block whose length is larger than height of block 1",
      "locate a block that is longer tha block 1 is tall",
      "which brick is longer than brick 1 is tall",
      "find a block with a length greater than block 1 is tall"
    ]
  },
  "block that is above block 1 and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "find me the block that is to the left and above block 1",
      "find me all blocks above and to the right of block 1",
      "what block is above and to the left of block 1 "
    ]
  },
  "block that is right of block that is special": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.37) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "find me the block that is to the right of the special block",
      "find a block with a special block to the left of it",
      "block at the right of a special block",
      "which brick is to the right of the special brick",
      "block that is right of block that is special",
      "choose the block to the right of the unique block"
    ]
  },
  "block that is special and whose shape is a pyramid": {
    "denotation": "(list (name en.block.11) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.30) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find a special pyramidshaped block",
      "what block is unique and shaped like a pyramid",
      "which pyramidshaped block is special",
      "find me all special pyramid blocks",
      "a special block whose shape is pyramid",
      "block that is special and whose shape is a pyramid"
    ]
  },
  "block whose height is at most height of block 1": {
    "denotation": "(list (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "find me all the blocks at most as tall as block 1",
      "choose a block that is shorter than block 1",
      "find the block that has a height that does not surpass the height of block 1",
      "choose a brick that is no higher than brick 1",
      "what block is at least as tall as block 1"
    ]
  },
  "block that is special and that block 1 is left of": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "what block is special and is to the left of block 1",
      "look right of block 1 and get the special block",
      "what block is special and left of block 1",
      "special block to right of block 1"
    ]
  },
  "block that block 1 is right of and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "what block is to the right of block 1",
      "find the block that is to the right of block 1"
    ]
  },
  "block that at least two block is right of": {
    "denotation": "(list (name en.block.13) (name en.block.14) (name en.block.23) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.43) (name en.block.47) (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what brick has at least 2 bricks to its right",
      "find me all the blocks that has at least 2 blocks to the left",
      "find a block that is right of at least two blocks",
      "find me a block to the left of at least two blocks",
      "choose the block to the right of the other block"
    ]
  },
  "block whose width is larger than 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "find a block with a diameter that is wider than 3 inches total",
      "find me a block wider than 3 inches",
      "which brick is wider than 3 inches",
      "which blocks exceed 3inches wide"
    ]
  },
  "block whose length is at least height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "what block is at least as long as block 1s height",
      "find me all the blocks that is at least as long as block 1 is tall",
      "is there a block with a length whose measurement is equivalent to that of  block 1s height",
      "block whose length is minimum the height of block 1",
      "which brick is at least as long as brick 1 is tall"
    ]
  },
  "block that block that is above block 1 is right of": {
    "denotation": "(list (name en.block.35))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "which block is above and to the right of block 1",
      "find me all blocks that block 1 is above and right of",
      "select the block to the left of the block above block 1"
    ]
  },
  "block that block 1 is below and that block 1 is below": {
    "denotation": "(list (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is below",
      "find me the block that is below block 1"
    ]
  },
  "block that block 1 is left of and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is left and below",
      "block right and up from block 1",
      "which block is above and to left of block 1 "
    ]
  },
  "block that more than two block is below": {
    "denotation": "(list (name en.block.20) (name en.block.28) (name en.block.29) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what brick has more than 2 bricks below it",
      "is there a block that is on top of more than two other blocks",
      "choose the block beneath the 2 block",
      "what block is above more than two blocks",
      "find me all the blocks with more than 2 blocks below it"
    ]
  },
  "block that is above block whose length is 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.15) (name en.block.17) (name en.block.25) (name en.block.30) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.56) (name en.block.8) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find a block with a 3 inch long block below it",
      "block that is above block whose length is 3 inches",
      "what block is above the block that is 3 inches long",
      "find me all the blocks above 3 inch long blocks",
      "what is the block above that has its length as 3 inches",
      "locate the block that is on top of at least one other block and that has a length of 3 inches"
    ]
  },
  "block whose shape is a pyramid and whose width is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find a 3 inch wide pyramidshaped block",
      "block whose shape is a pyramid and whose width is 3 inches",
      "what 3inch wide brick is pyramidshaped",
      "pyramid block 3 inches wide",
      "a 3 inch brick that is shaped like a pyramid"
    ]
  },
  "block whose length is not 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))",
    "paraphrases": [
      "block whose length is not 3 inches",
      "find me all the blocks that is not 3 inches long",
      "find a block without a length of 3 inches",
      "find all the blocks that are shorter or longer than 3 inches",
      "choose a block that is not 3 inches",
      "which brick is not 3 inches long"
    ]
  },
  "block whose length is 3 inches and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "look right of block 1 and find 3 inch block",
      "select the block whose length is 3 inches and that is to the left of block 1",
      "what block is left of block 1 and 3 inches in length",
      "3 inch block to right of block 1"
    ]
  },
  "block that less than two block is left of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "is there a block to the right of just one block only",
      "block that less than two block is left of",
      "find me all blocks with less than 2 blocks to the left",
      "choose a block that has less than 2 blocks to its left",
      "choose a block that is to the left of block 2"
    ]
  },
  "block that block that is special is right of": {
    "denotation": "(list (name en.block.10) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.4) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.48) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.58) (name en.block.6) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "left of special block",
      "find me all special blocks right of something",
      "which is the block to the right of special block"
    ]
  },
  "block whose height is at most length of block 1": {
    "denotation": "(list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "select the blocks that have a height less than or equal to block 1s length",
      "which brick is no taller than brick 1 is long",
      "block whose height is not more than block 1",
      "find me all blocks as high as block 1 is long",
      "what block has height less than or equal to the length of block 1"
    ]
  },
  "number of block": {
    "denotation": "(list (number 60 count))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "number of block",
      "how many blocks are there",
      "what is the number of the block",
      "what is the number of bricks",
      "tell me the number of blocks",
      "what is the number of blocks"
    ]
  },
  "block whose width is 3 inches and whose shape is a pyramid": {
    "denotation": "(list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find me all 3 inch wide pyramid blocks",
      "select all which is 3 inches in width and pyramid in shape",
      "which pyramidshaped block is 3 inches wide",
      "choose a block that is 3 inches and shaped like a pyramid",
      "find me the 3 inch wide pyramidshaped block"
    ]
  },
  "block that block that block 1 is left of is above": {
    "denotation": "(list (name en.block.33))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is left of and above block 1",
      "select the block that block 1 is to the left and above",
      "block above and right from block 1",
      "find me all blocks that block 1 is left and above"
    ]
  },
  "block whose length is larger than length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "which brick is longer than brick 1",
      "find me all the blocks longer than block 1",
      "select a block with a length larger than the length of block 1",
      "what block is longer than block 1",
      "which block is bigger than block 1"
    ]
  },
  "block that is special and whose height is 3 inches": {
    "denotation": "(list (name en.block.21) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "block that is special and whose height is 3 inches",
      "find me all 3 inch high special blocks",
      "is  there a special block with a height that is only 3 inches",
      "find the 3 inch tall special block"
    ]
  },
  "block that is above block whose height is 3 inches": {
    "denotation": "(list (name en.block.16) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.48) (name en.block.59) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block that is above block whose height is 3 inches",
      "which block is above the brick that is 3 inches high",
      "choose a block above a 3 inch block",
      "find the block located on top of the block that is 3 inches high",
      "find me all the blocks above 3 inch tall blocks",
      "what block is above the 3 inch high block"
    ]
  },
  "block whose length is 3 inches and that block 1 is right of": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all 3 inch long blocks that block 1 is right of",
      "find the 3 inches in length block that is on the left side  of block 1",
      "select blocks that have a length of 3 icnhes and are to the right of block 1",
      "3 inch block left of block 1",
      "3 inches long block to the left of block 1"
    ]
  },
  "block that block 1 is right of and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find me the block that block 1 is to the right of",
      "find me all blocks that block 1 is right and below of",
      "what block has block 1 on the right"
    ]
  },
  "block that block whose length is 3 inches is above": {
    "denotation": "(list (name en.block.16) (name en.block.21) (name en.block.26) (name en.block.27) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.52) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "select the block that has a length of two inches above another block",
      "above block at least 3 inches long",
      "block above 3 inches long block"
    ]
  },
  "block that has at least two color": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >=) (number 2)))",
    "paraphrases": [
      "find me all blocks with at least 2 colors",
      "blocks of two or more colors",
      "what block has two or more colors"
    ]
  },
  "block that not is above block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))",
    "paraphrases": [
      "which blocks are not above block 1",
      "select the block that block 1 is not below it",
      "find a block that is not above block 1",
      "which brick is below brick 1",
      "find me all blocks not above block 1"
    ]
  },
  "block that at most two block is right of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which brick has no more than 2 bricks to its right",
      "find me all blocks with at most 2 blocks to the right of it",
      "find the block to the left of two blocks or one but no more",
      "block that at most two block is right of",
      "choose a block that is the right of block 2",
      "find a block with two or less blocks to the right of it"
    ]
  },
  "block whose height is 3 inches and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "find me all 3 inch tall blocks that block 1 is right of",
      "3 inch tall block at the left of block 1",
      "find the block that has a height of 3 inches and that block 1 is to the right of",
      "find the block whose height is 3 inches"
    ]
  },
  "block whose height is 3 inches and whose length is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "block 3 inches high and long",
      "find the block with a height and length of 3 inches"
    ]
  },
  "block whose height is not 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))",
    "paraphrases": [
      "what blocks height is not 3 inches",
      "gather all the blocks that are not 3 inches long",
      "find me all blocks not 3 inches high",
      "block whose height is not 3 inches",
      "what blocks have a height not equal to 3 inches"
    ]
  },
  "block that is left of at most two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me a block that is to the left of two or less blocks",
      "find a block that has at most two blocks to its left",
      "which block is to the left of no more than two blocks",
      "find me all the blocks that has at most 2 blocks to the right of it",
      "block that is left of at most two block"
    ]
  },
  "block whose width is 3 inches and whose length is 3 inches": {
    "denotation": "(list (name en.block.30))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "block whose width is 3 inches and whose length is 3 inches",
      "find me all 3 inch wide and long blocks",
      "find a block with equal height and width measurements specifically 3 inches"
    ]
  },
  "block whose width is at least 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "find blocks wider than 3 inches",
      "find me all blocks at least 3 inches wide",
      "select a brick that is at least 3 inches wide",
      "find me all blocks at least 3 inches in width",
      "what block is at least 3 inches wide"
    ]
  },
  "block whose shape is not a pyramid": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.33) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))",
    "paraphrases": [
      "which brick is not shaped like a pyramid",
      "find me all the blocks that is not a pyramid",
      "block whose shape is not a pyramid",
      "choose a block that is not pyramid shaped",
      "find me a block that is not a pyramid",
      "locate the block that has a shape other than that of a pyramid"
    ]
  },
  "block whose width is at least 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "find me all blocks as wider than 3 inches",
      "find blocks that are at least 3 inches wide or 6 inches wide",
      "find a block at least 3 inches wide",
      "choose a brick that is at least 3 inches wide"
    ]
  },
  "block whose height is width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.18) (name en.block.19) (name en.block.25) (name en.block.30) (name en.block.39) (name en.block.43) (name en.block.51) (name en.block.55) (name en.block.56) (name en.block.57))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))",
    "paraphrases": [
      "select a block with a height of 1 block width",
      "what block is as tall as block 1 is wide",
      "which blocks have a height equal to the width of block 1",
      "select a block that has the same width and height",
      "find me all blocks as tall as block 1 is wide"
    ]
  },
  "block that is above two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is above two other blocks",
      "find me all blocks above 2 blocks",
      "what block is above two blocks",
      "block above two others"
    ]
  },
  "block that block that block 1 is above is right of": {
    "denotation": "(list (name en.block.27))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "select the block above the right one",
      "what block is above and to the right of block 1 ",
      "find me all blocks that block 1 is right and above of"
    ]
  },
  "block that block whose length is 3 inches is below": {
    "denotation": "(list (name en.block.15) (name en.block.19) (name en.block.28) (name en.block.3) (name en.block.49) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "block block a 3 inch long block",
      "block above 3 inch block",
      "find me all 3 inch long blocks",
      "select the blocks that are 3 inches long",
      "find me the block that has a length of 3 inches"
    ]
  },
  "block that block 1 is above and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "select the block above the right",
      "block below and left from block 1",
      "find me all blocks above and to the left of block 1",
      "below and left of block 1",
      "what block is block one above and to the right of"
    ]
  },
  "block that block that is special is left of": {
    "denotation": "(list (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.41) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.51) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "find me all the blocks that are special",
      "find me a block that has a special block to its right",
      "find me all special blocks left of something",
      "right of special block",
      "find the block on the left side of the special block"
    ]
  },
  "block whose width is 3 inches and whose width is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find me all the 3 inch wide blocks",
      "find the block that is 3 inches wide",
      "identify a block with a width of 3 inches"
    ]
  },
  "block that is right of more than two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks that is right of more than 2 blocks",
      "select the block that is to the right of more than 2 blocks",
      "select the blocks to the right of greater that two blocks",
      "block to right of two or more blocks"
    ]
  },
  "block that block 1 is right of and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find me the block that is to the left and below block 1",
      "find me all blocks 1 is right and above",
      "select the block above block 1 and on the left side"
    ]
  },
  "block that has more than two color": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))",
    "paraphrases": [
      "select the block that has greater than two colors",
      "dual colored block",
      "multicolor block",
      "blocks of more than two colours",
      "find me all blocks with more than 2 colors"
    ]
  },
  "block whose length is at most width of block 1": {
    "denotation": "(list (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "select brick whose length is more than the width of block 1",
      "block whose length is at most width of block 1",
      "what block has less than or equal length then block 1 has width",
      "which brick is no longer than brick 1 is wide",
      "find me all the blocks at most as long as the width of block 1"
    ]
  },
  "block whose shape is a pyramid and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that is in the shape of a pyramid that block 1 is to the right of",
      "find me all pyramid blocks which block 1 is right of",
      "pyramid block to left of block 1",
      "look left for block 1 and get the pyramid block"
    ]
  },
  "block that has less than two color": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))",
    "paraphrases": [
      "which block is only a single color",
      "find the block with only one color",
      "select a block with less than two colors",
      "find me all blocks with less than 2 colors",
      "select a block that has less than two colors"
    ]
  },
  "block that block 1 is left of and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find a block that is to the left and below block 1",
      "block right and below block 1",
      "what block has block 1 above and left",
      "find me all blocks below and right of block 1"
    ]
  },
  "block that block that is below block 1 is above": {
    "denotation": "(list (name en.block.21) (name en.block.29) (name en.block.52) (name en.block.54))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is below the block that block 1 is above",
      "block below block one",
      "find me all blocks below which block 1 is above"
    ]
  },
  "block that block 1 is right of and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks above which block 1 is right of",
      "left and above block 1",
      "select the blocks to the left of and above block 1",
      "what block has block 1 below and left",
      "find me the block that is both above and to the right of block 1"
    ]
  },
  "block whose length is 3 inches and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find the blocks with length and height of 3 inches ",
      "find the block whose length and height is 3 inches"
    ]
  },
  "block that block that is below block 1 is below": {
    "denotation": "(list (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks 2 below block 1",
      "2 blocks below block 1",
      "what blocks are below block 1"
    ]
  },
  "block that is below block 1 and whose width is 3 inches": {
    "denotation": "(list (name en.block.30))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "locate the block beneath block 1 that also has a width of 3 inches",
      "block that is below block 1 and whose width is 3 inches",
      "which block is below block 1 that is at least 3 inches high",
      "choose a 3 inch block under block 1",
      "find the 3 inch wide block below block 1"
    ]
  },
  "block whose width is larger than length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "choose a block that is bigger than block 1",
      "block more wider than length of block 1",
      "find me all blocks as wide as block 1 is long",
      "find me a block thicker than the length of block 1",
      "which block is wider than block 1 is long"
    ]
  },
  "average width of block": {
    "denotation": "(list (number 4.500 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))",
    "paraphrases": [
      "what is the average width of the bricks",
      "what is the average width of the blocks",
      "what is the average block width",
      "what is the average width of a block"
    ]
  },
  "block that is left of block whose shape is a pyramid": {
    "denotation": "(list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "what block is to the left of the pyramidshaped block",
      "find the block to the left of the pyramidshaped block",
      "block at the left of pyramid shaped block",
      "find me all blocks left of pyramid blocks",
      "find all blocks that are to the left of a pyramid block"
    ]
  },
  "block whose width is 3 inches and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "select the block that has a width of 3 inches and is below block 1",
      "find me all 3 inch wide blocks that block 1 is below",
      "what block has a width of three inches and that block 1 is below",
      "3 inches wide block below block 1"
    ]
  },
  "block that is above block 1 and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "block above and left of block 1"
    ]
  },
  "block that is special and that is left of block 1": {
    "denotation": "(list (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "what special blocks are left of block 1",
      "which special block is to the left of brick 1",
      "find me a special block to the left of block 1",
      "block that is special and that is left of block 1",
      "find me the special block that is to the left of block 1"
    ]
  },
  "block that has the largest height": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.26) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.46) (name en.block.49) (name en.block.52))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))",
    "paraphrases": [
      "select the tallest block",
      "which block has the largest height",
      "what block has the greatest height",
      "find the tallest block",
      "block that has the largest height",
      "which block is the tallest"
    ]
  },
  "block that is right of block that is above block 1": {
    "denotation": "(list (name en.block.48))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))",
    "paraphrases": [
      "block that is right of block that is above block 1",
      "choose the brick to the right of the brick above brick 1",
      "block right of a block which is above block 1",
      "select the brick right and above block 1",
      "choose block at right of block over block 1"
    ]
  },
  "block that the least number of block is right of": {
    "denotation": "(list (name en.block.11) (name en.block.15) (name en.block.16) (name en.block.2) (name en.block.20) (name en.block.25) (name en.block.26) (name en.block.32) (name en.block.33) (name en.block.37) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.46) (name en.block.49) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block that the least number of block is right of",
      "which brick is farthest to the left",
      "what block is to the left of the least blocks",
      "select the block to the right of the least amount of blocks",
      "select the brick with the least number of blocks to the right"
    ]
  },
  "block that block 1 is left of and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is left and right of",
      "what block is to the right of block 1",
      "select the block that is on the right side of block 1"
    ]
  },
  "block that is left of block 1 and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "block surrounding block 1",
      "select the blocks on the right and left of block 1"
    ]
  },
  "block that is left of the least number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find a block with the least blocks to the left of",
      "select the brick that has the least blocks to the right of it",
      "which brick is furthest to the right",
      "block at the left of least number of blocks",
      "locate a block that is on the left side of the smallest number of blocks"
    ]
  },
  "block that block 1 is below and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch wide block above block 1",
      "block that has a width of 3 inches and is below block 1",
      "find me all 3 inch wide blocks above block 1",
      "find me a block with a width of three inches that block 1 is below"
    ]
  },
  "block that is below block 1 or block 2": {
    "denotation": "(list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "block below either block 1 or block 2",
      "find me all the bricks below block 1 or 2",
      "find a block that is beneath either block 1 or block 2",
      "block that is below block 1 or block 2",
      "which brick is below brick 1 or 2",
      "find a block below either block 1 or block 2"
    ]
  },
  "block that is above block 1": {
    "denotation": "(list (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "which brick is above brick 1",
      "find a block with block 1 below it",
      "block that is above block 1",
      "find me all blocks above block 1",
      "is there a block piled on top of block 1"
    ]
  },
  "block whose height is 3 inches and that is right of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "3 inches tall block at the right of block 1",
      "select blocks that have a height of 3 inches and are to the right of block 1",
      "find the block that is 3 inches in height and is on the right side of block 1"
    ]
  },
  "block whose width is width of block 1": {
    "denotation": "(list (name en.block.23) (name en.block.24) (name en.block.3) (name en.block.34) (name en.block.38) (name en.block.45) (name en.block.46) (name en.block.50) (name en.block.57) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))",
    "paraphrases": [
      "block with same width that of block 1",
      "select a block with equivalent width to block 1",
      "bricks that are the same size as brick 1",
      "select all blocks with the same width as block 1",
      "which brick is the same width as brick 1",
      "block whose width is width of block 1"
    ]
  },
  "block whose length is at least width of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "select a brick whose length is at least the width of block 1",
      "find me a block as long or longer then block 1 is wide",
      "find me all the blocks at least as long as block 1 is wide",
      "which brick is at least as long as brick 1 is wide",
      "block whose length is at least width of block 1"
    ]
  },
  "block that is above block 1 and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "left and above block 1",
      "find the blocks that are above and left to the block 1 ",
      "select the block on the left"
    ]
  },
  "block whose height is 3 inches and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch block above block 1",
      "which block of 3 inches height is above the block 1 ",
      "select the block that has a height of 3 inches and is above block 1"
    ]
  },
  "block that is right of block 1 and that is right of block 1": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find a block to the right of block 1",
      "is there a block on the right side of block 1",
      "block that is right of block 1 and that is right of block 1"
    ]
  },
  "block whose width is smaller than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "choose a block between 3 and 6 inches wide",
      "find me a block smaller than 6 inches",
      "is there a block no wider than 3 or 6 inches",
      "block whose width is smaller than 3 inches or 6 inches",
      "which block has a width of less than 3 inches",
      "find me all blocks whose width is smaller than 6 inches"
    ]
  },
  "block that at most two block is left of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block that is at most 2 block to the left",
      "find a block with two or less blocks to the left",
      "find me all blocks  with at most two blocks left of it",
      "block within 2 blocks to the left",
      "what brick has no more than two bricks to its left",
      "block that at most two block is left of"
    ]
  },
  "block that is special and that is above block 1": {
    "denotation": "(list (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "what special blocks are above block 1",
      "what special block is above block 1",
      "find me all special blocks above block 1",
      "which special brick is above brick 1"
    ]
  },
  "block whose length is 3 inches": {
    "denotation": "(list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find a block that is 3 inches long",
      "3 inches long block",
      "block whose length is 3 inches",
      "find the 3 inch long block"
    ]
  },
  "block that has the largest length": {
    "denotation": "(list (name en.block.10) (name en.block.16) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.32) (name en.block.46) (name en.block.6) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))",
    "paraphrases": [
      "which block has the largest length",
      "find the longest block",
      "what block is the longest",
      "select the longest brick",
      "select the longest block"
    ]
  },
  "block that is right of block 1 and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "select the blocks on the right of and below block 1",
      "find me all blocks right of block 1 that is above it",
      "what block is to the right and above block 1",
      "below and right of block 1",
      "block that has block 1 above and left"
    ]
  },
  "block that has the smallest height": {
    "denotation": "(list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))",
    "paraphrases": [
      "which block is the shortest",
      "find the shortest block",
      "block that has the smallest height",
      "which block is the smallest"
    ]
  },
  "block that is left of block 1 and that is left of block 1": {
    "denotation": "(list (name en.block.46) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "what blocks are left of block 1",
      "what block is to the left of block one",
      "find a block to the left of block 1"
    ]
  },
  "block that block 1 is right of and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "block left of block one",
      "find me all blocks that block 1 is right of and which is left of block 1"
    ]
  },
  "block whose length is 3 inches and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "3 inch block above block 1",
      "find me all 3 inch long blocks which block 1 is below",
      "block 3 inches long and below block one",
      "find the block that has a length of 3 inches and is below block 1"
    ]
  },
  "block that is above block 1 and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "find me the block in the shape of a pyramid above block 1",
      "find me the block that is above block 1 and is in the shape of a pyramid",
      "pyramid block above block 1",
      "what pyramidshaped block is above block 1"
    ]
  },
  "block that block whose height is 3 inches is above": {
    "denotation": "(list (name en.block.14) (name en.block.16) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.44) (name en.block.48) (name en.block.58) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "what block is above a block that is three inches in height",
      "3 inch block near top",
      "find me all 3 inch tall blocks",
      "block below three inch block",
      "find me the block that has a height of 3 inches"
    ]
  },
  "block that is right of block that is right of block 1": {
    "denotation": "(list (name en.block.13) (name en.block.24))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "the third block to the right",
      "bock right of block that is right of block 1",
      "which brick is 2 bricks to the right of brick 1",
      "find me all blocks 2 blocks to the right of block 1",
      "block that is right of block that is right of block 1"
    ]
  },
  "block that is special and that is right of block 1": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "find me all the special blocks right of block 1",
      "find me the special block to the right of block 1",
      "block that is special and that is right of block 1",
      "which special brick is to the right of brick 1",
      "find the special block to the right of block 1"
    ]
  },
  "block that at least two block is below": {
    "denotation": "(list (name en.block.12) (name en.block.20) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.6) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which block has at least two blocks below it",
      "block that at least two block is below",
      "find me a block above at least two blocks",
      "block that is below at least two blocksw",
      "find me all blocks with at least 2 blocks below",
      "find the block on top of at least two other blocks"
    ]
  },
  "block that not is right of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string !=) en.block.block1))",
    "paraphrases": [
      "what block is not to the right of block 1",
      "find the blocks that are not to the right of block 1",
      "which block is to the left of block 1",
      "block that is not right of block 1",
      "find me all blocks not right of block 1"
    ]
  },
  "block that is right of block 1 and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "which pyramid blocks are to the right of block 1",
      "pyramid block rght of block 1",
      "which pyramid shaped block is to the right of block 1",
      "find me all pyramid blocks right of block 1",
      "find the block that is to the right of block 1 whose shape is also a pyramid"
    ]
  },
  "block whose length is smaller than length of block 1": {
    "denotation": "(list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "find the block with a length shorter than that of block 1",
      "block that is shorter than block 1",
      "find a block that block 1 is longer than",
      "which brick has a length shorter than the length of brick 1"
    ]
  },
  "block that block 1 is above and whose length is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find me all 3 inch long blocks below block 1",
      "select a block above block one that is 3 inches long",
      "what block has a length of 3 inches and block 1 above it",
      "3 inch long block below block 1"
    ]
  },
  "block that is right of block 1 and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "block around block 1",
      "find me all blocks that is left and right of block 1"
    ]
  },
  "block that is above block 1 or block 2": {
    "denotation": "(list (name en.block.54) (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "choose a block that is above block 1 or 2",
      "find me all the blocks above block 1 or 2",
      "is there a block piled on top of either block 1 or block 2",
      "which brick is above brick 1 or 2"
    ]
  },
  "block that block that block 1 is right of is above": {
    "denotation": "(list (name en.block.16))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "block that has block 1 at right and below",
      "select the block that block 1 is to the right and above",
      "find a block below the block on the right of block 1",
      "find me all blocks that is above and right of block 1",
      "left and below of block 1"
    ]
  },
  "block that is right of block that block 1 is left of": {
    "denotation": "(list (name en.block.26))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me a block that block 1 is to the left of",
      "find the block to the right of the block that is to the left of block 1",
      "two blocks right of block 1",
      "2 blocks right of block 1",
      "find me all blocks right to whatever block 1 is left of"
    ]
  },
  "block that is left of two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "block left from two others",
      "find me all blocks left of 2 blocks",
      "find me the block that is left of two blocks",
      "select the block on the left corner"
    ]
  },
  "block that is special and that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find special blocks with block 1 above them",
      "what blocks are special and are below block 1",
      "find me all special blocks  below block 1",
      "find a special block below block 1"
    ]
  },
  "block whose height is larger than 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "block whose height is larger than 3 inches",
      "find the block taller than 3 inches",
      "choose a block that is taller than 3 inches",
      "which brick is higher than 3 inches",
      "block that is taller than three inches"
    ]
  },
  "block that block whose width is 3 inches is above": {
    "denotation": "(list (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.7) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find the block below the block that is 3 inches in width",
      "block below 3 inches wide block",
      "find me all blocks above 3 inch wide blocks"
    ]
  },
  "block whose length is 3 inches or 6 inches": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.22) (name en.block.23) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.44) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.52) (name en.block.54) (name en.block.59) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))",
    "paraphrases": [
      "find me all 3 or 6 inch long blocks",
      "block either 3 inches or 6 inches long",
      "choose every block measuring 3 or 6 inches",
      "select block of length 3 or 6 inches",
      "block whose length is 3 inches or 6 inches",
      "which brick is 3 or 6 inches long"
    ]
  },
  "block that is above block that is special": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.27) (name en.block.3) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.50) (name en.block.52) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))",
    "paraphrases": [
      "block that is above block that is special",
      "find me the special block on top of the block",
      "find me all the blocks above special blocks",
      "which block is above the special block",
      "find me the block above the special block"
    ]
  },
  "block that is above block 1 and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "what block is both above and below block one",
      "find blocks above block 1 and below block 1 ",
      "what blocks are both above and below block 1"
    ]
  },
  "block that is right of block 1": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1))",
    "paraphrases": [
      "select the block to the right of block 1",
      "find me all the blocks right of block 1",
      "choose a block that is right of block 1"
    ]
  },
  "block that less than two block is right of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks with less than 2 blocks to the right of it",
      "which block has less than two blocks to its right",
      "choose a block to the right of block 2"
    ]
  },
  "block whose length is larger than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "which brick is longer than 3 or 6 inches",
      "what blocks length is greater than 3 to 6 inches",
      "find those blocks with lengths that exceed either 3 or 6 inches",
      "select a block longer than 3 inches",
      "block whose length is larger than 3 inches or 6 inches",
      "find me all blocks with a length longer than 3 inches"
    ]
  },
  "block whose height is larger than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "find the block with a height that does not surpass either 3 or 6 inches",
      "find a block taller than 3 inches",
      "which brick is higher than 3 or 6 inches",
      "choose a block that is taller than 3 or 6 inches",
      "find me all the blocks taller than 3 inches"
    ]
  },
  "block that is above the least number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "select the brick that is above the least number of blocks",
      "is there a block that is on top of the fewest number of other blocks",
      "find me the block with the least blocks below it",
      "which brick is closest to the bottom",
      "choose a block above the least populated bricks"
    ]
  },
  "block that is above block that block 1 is left of": {
    "denotation": "(list (name en.block.45))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks over that block 1 is left of",
      "block up and left from block 1",
      "block above the block at right of block 1",
      "what block is above the block that is to the left of block 1",
      "above block to right of block 1"
    ]
  },
  "block that is right of at most two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all the blocks that has at most 2 blocks to the left",
      "which brick has no more than two blocks to its left",
      "block that is right of at most two block",
      "find me a block with at most two blocks to the left of it",
      "find a block that is to the right of two blocks"
    ]
  },
  "block that block that block 1 is left of is left of": {
    "denotation": "(list (name en.block.17))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block has block 1 left and right",
      "2nd block left of block 1",
      "select the block that is left of block 1"
    ]
  },
  "block that block whose width is 3 inches is left of": {
    "denotation": "(list (name en.block.18) (name en.block.23) (name en.block.29) (name en.block.3) (name en.block.36) (name en.block.45) (name en.block.52) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find the block that is left to the block of 3 inches ",
      "select the block whose width is 3 inches",
      "block right of 3 inch wide block",
      "find me all blocks left of 3 inch wide blocks"
    ]
  },
  "block whose width is at least length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "block whose width is at least the length of block 1",
      "select a block with width equal or greater than block 1 is long",
      "select a brick that is at least as wide as brick 1 is long",
      "find all blocks that are as long as or longer than block 1",
      "find me all blocks as wide or wider than block 1"
    ]
  },
  "block that is left of block 1 and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "block left of block one and shaped like a pyramid",
      "find the block that is to the left of block 1 whose shape is that of a pyramid",
      "find me the block that is to the left of block 1 whose shape is a pyramid",
      "pyramid to left of block 1",
      "pyramid shaped block that is to the left of block 1",
      "select the pyramidshaped block that is left of block 1",
      "find me all pyramid blocks left of block 1"
    ]
  },
  "block whose height is 3 inches or 6 inches": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.27) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.36) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.50) (name en.block.53) (name en.block.6) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))",
    "paraphrases": [
      "which brick is 3 or 6 inches high",
      "block whose height is 3 inches or 6 inches",
      "block with height of either 3 inches or 6 inches",
      "find me a block that is either 3 or 6 inches tall",
      "is there any block with a height of either 3 or 6 inches",
      "find me all 3 or 6 inch high blocks"
    ]
  },
  "block whose height is smaller than height of block 1": {
    "denotation": "(list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "find me all blocks shorter than block 1",
      "what block is shorter than block 1",
      "select a block with height less than block 1",
      "find a block with a height smaller than the height of block 1"
    ]
  },
  "block that is below block that block 1 is below": {
    "denotation": "(list (name en.block.16) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is below the block that block 1 is below",
      "find me all blocks that is 2 blocks below block 1",
      "find me the block that is below the block that is below block 1"
    ]
  },
  "block that is left of block whose width is 3 inches": {
    "denotation": "(list (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.28) (name en.block.32) (name en.block.36) (name en.block.4) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "find me a block that is to the left of the block with a width of 3 inches",
      "choose a brick that is to the left of a brick that is 3 inches wide",
      "find the block to the left of the block that is 3 inches in diameter",
      "what block is to the left of the 3 inch wide block",
      "find me all blocks left of 3 inch wide blocks"
    ]
  },
  "block that block 1 is above and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "which block is above block 1",
      "find the block that block 1 is above"
    ]
  },
  "block that has two color": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (number 2)))",
    "paraphrases": [
      "what block has two color",
      "find me all blocks with 2 colors",
      "select blocks that are two colors",
      "block with two colors"
    ]
  },
  "block whose width is at least height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "select a block who has width greater than or equal to block 1s height",
      "choose a block that is the same height as block 1",
      "which block is at least as wide as block 1 is tall",
      "block whose width is at least height of block 1",
      "select the block that is equal or bigger than block 1",
      "find me all the bricks at least as wide as block 1 is tall"
    ]
  },
  "block that block that is below block 1 is left of": {
    "denotation": "(list (name en.block.29) (name en.block.37) (name en.block.5) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "left of block below block 1",
      "select the brick that is below and to the left of block 1",
      "find me all blocks below that block 1 is left of"
    ]
  },
  "average length of block": {
    "denotation": "(list (number 4.500 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))",
    "paraphrases": [
      "average length of block",
      "what is the average length of the bricks",
      "find me a block with average length",
      "what is the average length of a block"
    ]
  },
  "block that is right of block whose width is 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.17) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.47) (name en.block.50) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "locate the block to the right side of a block measuring 3 inches in width",
      "select the block to the right of the block that is 3 inches long",
      "block at the right of 3 inches wide block",
      "what block is to the right of the 3 inch wide block"
    ]
  },
  "block that two block is right of": {
    "denotation": "(list (name en.block.13) (name en.block.23) (name en.block.24) (name en.block.31) (name en.block.35) (name en.block.38) (name en.block.43) (name en.block.47))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which brick has two bricks to its right",
      "choose the block to the right of block 2",
      "select block to the left of two blocks",
      "find me all blocks with 2 blocks left of it",
      "find a block that is on the left side of two other blocks",
      "block that two block is right of"
    ]
  },
  "block that block 1 is right of": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "left of block 1",
      "what block is block 1 to the right of",
      "block left of block 1"
    ]
  },
  "block that block whose shape is a pyramid is right of": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.35) (name en.block.38) (name en.block.42) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "what block is to the right of a pyramidshaped block",
      "find me all blocks right of pyramid blocks",
      "block left of pyramid"
    ]
  },
  "block that is left of block 1 and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "select the block that is to the left and above block 1",
      "select the block above on the left"
    ]
  },
  "height of block 1": {
    "denotation": "(list (number 4 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))",
    "paraphrases": [
      "what is the height of brick 1",
      "how tall is block 1",
      "height of block 1",
      "what is the height of block 1"
    ]
  },
  "block that is left of block 1": {
    "denotation": "(list (name en.block.46) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "select the blocks to the left of block 1",
      "which brick is to the left of brick 1",
      "choose a block that is left of block 1",
      "find a block that has block 1 to its right"
    ]
  },
  "block that is left of block 1 and whose length is 3 inches": {
    "denotation": "(list (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what 3 inch brick is to the left of brick 1",
      "choose a 3 inch block that is left of block 1",
      "find me all 3 inch blocks left of block 1",
      "find a 3inch long block located to the left of block 1",
      "find the 3 inch long block to the left of block 1"
    ]
  },
  "block that block 1 is right of and whose shape is a pyramid": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "what block has block 1 on its right and is pyramidshaped",
      "find me the pyramid block that is to the right of block 1",
      "find me the block that block 1 is to ther right of and that has a shape of a pyramid",
      "find me all pyramid blocks that is left or right of block 1",
      "pyramid block left of block 1"
    ]
  },
  "block that is special and that is below block 1": {
    "denotation": "(list (name en.block.30) (name en.block.38) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find all special blocks below block 1",
      "choose a special block that is below block 1",
      "find me all special blocks below block 1"
    ]
  },
  "block that block whose shape is a pyramid is below": {
    "denotation": "(list (name en.block.12) (name en.block.15) (name en.block.18) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.33) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.52) (name en.block.53) (name en.block.56) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "get a block above any pyramid block",
      "what block has below it a block in the shape of a pyramid",
      "block above pyramid block",
      "block below block with pyramid shape",
      "find me all blocks above pyramid blocks"
    ]
  },
  "block that is left of the most number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "select the block that to the left of the most blocks",
      "which brick is furthest to the left",
      "find the block to the left of the largest number of blocks",
      "select the brick at the very left",
      "what block has the most blocks to the right of it"
    ]
  },
  "block that is left of block 1 or block 2": {
    "denotation": "(list (name en.block.46) (name en.block.5) (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "which brick is left of brick 1 or 2",
      "third block to the left",
      "choose a block that is to the left of block 1 and 2",
      "what block is to the left of either block 1 or block 2",
      "find me all blocks left of block 1 or 2",
      "block that is left of block 1 or block 2"
    ]
  },
  "block that is right of block that block 1 is right of": {
    "denotation": "(list (name en.block.3) (name en.block.31) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the right of the block that block 1 is to the right of",
      "find me all blocks that is right of the block which block 1 is right of"
    ]
  },
  "block that is left of block 1 and that block 1 is above": {
    "denotation": "(list (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))",
    "paraphrases": [
      "find a block left of and below block 1",
      "select the block that is to the left of the block that block 1 is above",
      "find me all blocks above that is left of block 1"
    ]
  },
  "block whose length is 3 inches and that is special": {
    "denotation": "(list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))",
    "paraphrases": [
      "what brick is both unique and 3 inches",
      "find me all the 3 inch long special blocks",
      "find me a special 3 inch long block",
      "what special blocks have a length of 3 inches",
      "block whose length is 3 inches and that is special"
    ]
  },
  "block whose height is at most 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "a brick between 3 and 6 inches",
      "are there any blocks whose height is that of either 3 inches or 6 inches at most",
      "block whose height is at most 3 inches or 6 inches",
      "find a block 6 inches or shorter",
      "which brick is no higher than 3 or 6 inches",
      "find me all blocks at most 6 inches high"
    ]
  },
  "block that has the most number of shape": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))",
    "paraphrases": [
      "which brick has the most shapes",
      "which type of block has the most shapes",
      "select the block with the most shapes",
      "find the block with the most shapes",
      "block that has the most number of shape"
    ]
  },
  "block whose height is smaller than 3 inches": {
    "denotation": "(list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "find me all the blocks shorter than 3 inches",
      "find a block shorter than 3 inches",
      "which brick is shorter than 3 inches",
      "find the block with a height less than 3 inches",
      "block whose height is smaller than 3 inches",
      "what block is shorter than 3 inches"
    ]
  },
  "block that is right of at least two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks with more than 2 blocks to its left",
      "block to the right of at least 2 blocks",
      "find me the block that is to the right of two or more blocks",
      "block right of at least two block"
    ]
  },
  "block that block that block 1 is left of is right of": {
    "denotation": "(list (name en.block.52))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the right of block 1 ",
      "find me all blocks that is left or right of block 1"
    ]
  },
  "block that is left of block 1 and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "what block is left and below block 1",
      "below and left of block 1",
      "select the blocks that are left of and below block 1",
      "find me all blocks left and below block 1"
    ]
  },
  "block whose shape is a pyramid and whose length is 3 inches": {
    "denotation": "(list (name en.block.30) (name en.block.34) (name en.block.52))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "find the 3 inch long pyramidshaped block",
      "choose a brick 3 inches long that is shaped like a pyramid",
      "find me a block with a pyramid shape and has a length of 3 inches"
    ]
  },
  "block that block 1 is below and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "what block has block 1 below and to the left",
      "select the blocks below and to the left of block 1",
      "right of and above block 1",
      "what block is block 1 below and to the left of"
    ]
  },
  "block that is above more than two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what blocks are above more than two blocks",
      "block above two or more blocks",
      "block above more than 2 blocks"
    ]
  },
  "block that block 1 is below and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "select blocks that are below and to the left of block 1",
      "block which has block 1s below and right",
      "above and left of block 1"
    ]
  },
  "block whose shape is a pyramid and that is special": {
    "denotation": "(list (name en.block.11) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.30) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))",
    "paraphrases": [
      "select a special pyramid block",
      "which special brick is pyramidshaped",
      "find me a special pyramidshaped block",
      "block whose shape is a pyramid and that is special",
      "find me all the special pyramid blocks",
      "choose a block that is special and shaped like a pyramid"
    ]
  },
  "block that is above block 1 and whose height is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "get a 3inch block above block 1",
      "select me the block that is above block 1 and has a height of 3 inches",
      "find a block of 3 height above block 1"
    ]
  },
  "block that is below at most two block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "which brick is below no more than two bricks",
      "is there a block under one or two blocks at most",
      "what block has at most two blocks above it",
      "find me all the bricks below at most 2 blocks",
      "find a block that is below no more than two blocks"
    ]
  },
  "block whose height is 3 inches and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "what block is 3 tall and has block 1 on its left",
      "find me all 3 inch tall blocks which block 1 is left of",
      "3 inch tall block right from block 1",
      "look right of block 1 and get the 3 inch tall block",
      "find me a block with a height of 3 inches that block 1 is to the left of"
    ]
  },
  "block that more than two block is above": {
    "denotation": "(list (name en.block.16) (name en.block.29) (name en.block.45) (name en.block.48) (name en.block.5))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find the block with more than two blocks above it",
      "find me all the blocks with more than 2 blocks above it",
      "block that is above more than two blocks",
      "which brick has more than two bricks above it",
      "block that more than two block is above",
      "choose a block that is above block 2"
    ]
  },
  "block that is right of block that is left of block 1": {
    "denotation": "(list (name en.block.23))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is between block 1 and a block to the left of block 1",
      "block right of block which is left of block 1",
      "which brick is to the right of the brick to the left of brick 1",
      "choose a block that is the right of the furthest block to the left"
    ]
  },
  "block whose height is 3 inches and that is below block 1": {
    "denotation": "(list (name en.block.33))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "beneath block 1 is a block with a height of 3 inches find it",
      "find the 3 inch tall block below block 1",
      "3 inches high block below block 1",
      "choose the brick that is 3 inches high below brick 1",
      "block whose height is 3 inches and that is below block 1"
    ]
  },
  "block that is below block 1 and whose length is 3 inches": {
    "denotation": "(list (name en.block.30) (name en.block.38))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is below block 1 and 3 inches long",
      "find the block underneath block 1 that is also 3 inches long",
      "choose the block below block 1 that is 3 inches long",
      "block that is below block 1 and whose length is 3 inches"
    ]
  },
  "block that is below block that is right of block 1": {
    "denotation": "(list (name en.block.49))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "which brick is below the brick to the right of brick 1",
      "select the block that is below the block to the right of block 1",
      "select the brick below and to the right of block 1",
      "which block is below block that is at the right of block 1"
    ]
  },
  "block that is left of block 1 and whose width is 3 inches": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is on the left of block 1 and is 3 inches in width",
      "what block is to the left of block 1 and has a width of 3 inches",
      "what block three inches in width is left of block 1",
      "find me all 3 inch wide blocks left of block 1"
    ]
  },
  "block whose shape is a pyramid and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "pyramid block above block 1",
      "select the pyramidshape blocks above block 1",
      "find me all pyramid blocks above block 1",
      "what block is in the shape of a pyramid and is above block 1",
      "pyramid above block 1"
    ]
  },
  "block that block 1 is below and that block 1 is right of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "block above and left from block 1",
      "select the block below the one on the right",
      "find blocks to the left and above block 1",
      "find me all blocks that block 1 is below and right of",
      "above and left of block 1"
    ]
  },
  "block whose shape is a pyramid and that block 1 is left of": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "find the block that has a shape of a pyramid and is to the right of block 1",
      "pyramid shaped block left of block 1"
    ]
  },
  "block that is right of the least number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks that is to the right of the least number of blocks",
      "block that is right of the least number of block",
      "choose a block to the right of the most blocks",
      "what block has the least blocks to the left of it",
      "find the block with the fewest blocks to the left of it",
      "which block is farthest to the left"
    ]
  },
  "block that the least number of block is left of": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.19) (name en.block.22) (name en.block.24) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is to the right of the least blocks",
      "select the brick with the least number of blocks to the left of it",
      "block that the least number of block is left of",
      "locate the block with the least amount of blocks beside it on the left",
      "what block is left of the least number of blocks"
    ]
  },
  "block whose length is length of block 1": {
    "denotation": "(list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))",
    "paraphrases": [
      "which block is the same length as block 1",
      "find blocks with the length of block 1",
      "find a block with the same length as block 1",
      "find me all the blocks as long as block 1",
      "find the block with the same length as block 1",
      "block whose length is length of block 1"
    ]
  },
  "block that block that is below block 1 is right of": {
    "denotation": "(list (name en.block.23) (name en.block.53) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks below that block 1 is right of",
      "left of and below block 1",
      "find me the block that is below and to the right of block 1"
    ]
  },
  "block whose height is larger than length of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "bloch longer than the length of block 1",
      "find a block taller than block 1 is long",
      "which brick is higher than brick 1 is long",
      "find me all the blocks taller than the length of block 1",
      "find blocks that are taller than block 1 is long"
    ]
  },
  "block that block whose shape is a pyramid is above": {
    "denotation": "(list (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.2) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.33) (name en.block.36) (name en.block.4) (name en.block.44) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "block above pyramid",
      "find me the block whose shape is a pyramid",
      "find me all blocks above a pyramid block"
    ]
  },
  "block that block 1 is above and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "find a block under and to the right of block 1",
      "find a block that block 1 is above and to the left of",
      "right and below block 1",
      "block above 1 block and left of 1 block"
    ]
  },
  "block that block whose width is 3 inches is right of": {
    "denotation": "(list (name en.block.13) (name en.block.22) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.43) (name en.block.50) (name en.block.53) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "what block is to the right of the block that is three inches wide",
      "block left from 3 inch block",
      "block left of 3 inch block"
    ]
  },
  "block that block 1 is above and that is left of block 1": {
    "denotation": "(list (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "select the block above the left one",
      "what blocks are to the left and below block 1"
    ]
  },
  "block whose shape is a pyramid and that is below block 1": {
    "denotation": "(list (name en.block.30) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "block whose shape is a pyramid and that is below block 1",
      "choose block with pyramid shape under block 1",
      "select the pyramidshaped brick below brick 1",
      "find pyramid shaped block below block 1"
    ]
  },
  "block that block that block 1 is above is left of": {
    "denotation": "(list (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "what is the block below and left of block 1",
      "find me all blocks that is above and right of block 1",
      "select the block that block 1 is above and to the left of"
    ]
  },
  "block whose height is larger than height of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))",
    "paraphrases": [
      "which brick is taller than brick 1",
      "what block is taller than block 1",
      "is there a block that is taller than block 1",
      "find me all the blocks taller than block 1"
    ]
  },
  "length of block 1": {
    "denotation": "(list (number 3 en.inch))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))",
    "paraphrases": [
      "select all blocks of length 1",
      "what is the length of block 1",
      "what is the length of brick 1"
    ]
  },
  "block that block whose shape is a pyramid is left of": {
    "denotation": "(list (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))",
    "paraphrases": [
      "block to the left of pyramid block",
      "find me all pyramid blocks",
      "select all blocks that are in the shape of a pyramid",
      "block right of pyramid block",
      "select the pyramidshaped blocks"
    ]
  },
  "block that is left of block that block 1 is right of": {
    "denotation": "(list (name en.block.39))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me the block that is left of the block that block 1 is right of",
      "find me all blocks left of what block 1 is right of",
      "block is at the second left of block 1",
      "second left of block 1"
    ]
  },
  "block whose length is at most 3 inches": {
    "denotation": "(list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "select the blocks less than 3 inches",
      "find me all blocks at most 3 inches long",
      "select a brick that is no bigger than 3 inches long",
      "find me all blocks no bigger than 3 inches",
      "what block is 3 inches or less long"
    ]
  },
  "block that has at most two shape": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))",
    "paraphrases": [
      "which brick has at most two shapes",
      "what block has two or less shapes",
      "find me all the blocks with at most 2 shapes",
      "find the blocks that have two shapes or less",
      "block that has at most two shape",
      "choose a block that is not more than 2 shapes"
    ]
  },
  "block whose length is width of block 1": {
    "denotation": "(list (name en.block.12) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.3) (name en.block.41) (name en.block.42) (name en.block.51) (name en.block.8) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))",
    "paraphrases": [
      "block as long as block 1 is wide",
      "what brick is as long as brick 1 is wide",
      "choose a block which is as long as block 1 is wide",
      "what block is as long as block 1 is wide",
      "block whose length is width of block 1",
      "find me all blocks with the same width as block 1"
    ]
  },
  "block that block 1 is below and that is above block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "block above and below block 1",
      "block above block one"
    ]
  },
  "block that block that is right of block 1 is below": {
    "denotation": "(list (name en.block.28))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block that is below to the right of block 1 ",
      "what block is to the right and below block 1",
      "find me all blocks right and below block 1",
      "block to the right and below block 1"
    ]
  },
  "block that is below the least number of block": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks below the smallest numbers of blocks",
      "block that is below the least number of block",
      "which brick is at the very top",
      "choose a block that is under the least number of bricks",
      "find me the block with the least number of blocks below it",
      "find the block that is beneath the smallest number of other blocks"
    ]
  },
  "block that is left of block that block 1 is above": {
    "denotation": "(list (name en.block.10))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "block left and below block 1",
      "block which is at the left of the block below block 1",
      "find me all blocks which is left and above block 1",
      "see block below block 1 and choose the one left of it",
      "find me the block that is to the left of the block that block 1 is above"
    ]
  },
  "block that block 1 is right of and whose length is 3 inches": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "3 inch block left of block 1",
      "3 inches long block at the left of block 1",
      "select the block that is to the left of block 1 and that has a length of 3 inches",
      "select the 3 inch long block that is left of block 1"
    ]
  },
  "block that block whose length is 3 inches is right of": {
    "denotation": "(list (name en.block.14) (name en.block.21) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.53) (name en.block.56) (name en.block.6) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))",
    "paraphrases": [
      "get me a block to the right of a 3inch block",
      "find the block with 3 inches in length"
    ]
  },
  "block that is below at least two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is below two or more blocks",
      "block below two other blocks",
      "select the blocks below block 2",
      "block on bottom",
      "find me all blocks at least 2 blocks below"
    ]
  },
  "block that is left of more than two block": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "find me all blocks left of more than 2 blocks",
      "block left of more than 2 blocks",
      "what block is to the left of more than two blocks"
    ]
  },
  "block that the most number of block is left of": {
    "denotation": "(list (name en.block.18) (name en.block.29) (name en.block.37) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is to the right of the most blocks",
      "what is the left most block",
      "select the brick at the very right",
      "which block has the largest number of blocks to its left",
      "find the single block that is located to the right of the largest number of blocks",
      "block that the most number of block is left of"
    ]
  },
  "block whose shape is shape of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.33) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))",
    "paraphrases": [
      "find me all blocks with the same shape as block 1",
      "which brick is the same shape as brick 1",
      "find a block the same shape as block 1",
      "find the block with the same shape as block 1",
      "choose a block that looks just like block 1",
      "block whose shape is shape of block 1"
    ]
  },
  "block that the most number of block is below": {
    "denotation": "(list (name en.block.29))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "choose a block that is below the most populated bricks",
      "find me a block that is above the most blocks",
      "which block has the highest number of blocks below it",
      "block that the most number of block is below"
    ]
  },
  "block that is right of block 1 and that block 1 is below": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))",
    "paraphrases": [
      "block above block one and to the right",
      "block above and rigth from block 1",
      "what block is to the right and above block 1",
      "block left and above block 1",
      "find me all blocks to the right and above block 1"
    ]
  },
  "block that block that is left of block 1 is above": {
    "denotation": "(list (name en.block.38) (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks left and above block 1",
      "block above and right from block 1"
    ]
  },
  "block that block 1 is right of and that is special": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "special block left of block 1",
      "find me the block that is to the left of block 1 and special",
      "find me all special blocks left of block 1",
      "block that left of block one and special"
    ]
  },
  "block whose shape is a pyramid and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "pyramid left of block 1",
      "pyramid block rght of block 1",
      "what block has the shape of a pyramid and is to the left of block 1",
      "find me all pyramid blocks that is left of block 1",
      "what pyramidshaped block is left of block 1"
    ]
  },
  "block that is right of block 1 or block 2": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "which blocks are right of blocks 1 or 2",
      "is there a block to the right of either block 1 or block 2",
      "find me a block to the right of either block 1 or block 2",
      "select all bricks right of block 1 or 2",
      "which brick is to the right of brick 1 or 2"
    ]
  },
  "block that has the least number of shape": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))",
    "paraphrases": [
      "select the brick with the least number of shapes",
      "choose the most shapeless block",
      "which brick has the least number of shapes",
      "select all blocks which has least number of shape",
      "what block has the fewest shapes"
    ]
  },
  "block whose width is 3 inches and that block 1 is left of": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "3 inches wide block at the right of block 1",
      "find the block whose width is 3 inches and is on the right side of block 1",
      "find the blocks that have a width of 3 inches and are to the left of block 1"
    ]
  },
  "block that is above block 1 and that is above block 1": {
    "denotation": "(list (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))",
    "paraphrases": [
      "choose the block above block 1",
      "what brick is above brick 1",
      "find me all the blocks above block 1",
      "find the block that is on top of block 1"
    ]
  },
  "block that block that block 1 is left of is below": {
    "denotation": "(list (name en.block.56))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is to the left of and below block 1",
      "what block is to the left and below block 1",
      "block below and right of block 1"
    ]
  },
  "block whose width is 3 inches and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "what block has a width of 3 inches and is to the left of block 1",
      "select the 3 inch wide block left of block 1"
    ]
  },
  "block that block 1 is above and that is below block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "select block 1 and all of the blocks below it",
      "block that has block 1 above and below"
    ]
  },
  "block whose height is 3 inches and that is special": {
    "denotation": "(list (name en.block.21) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.6))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))",
    "paraphrases": [
      "a special 3 inch high block",
      "which special block is 3 inches high",
      "find me all 3 inch tall special blocks",
      "select the special 3 inch tall block"
    ]
  },
  "block that block that is left of block 1 is right of": {
    "denotation": "(list (name en.block.27) (name en.block.31))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))",
    "paraphrases": [
      "what block is left of the block that block 1 is to the right of",
      "find me all blocks left of block 1",
      "select the block that is on the right side of the block on the left side of block 1"
    ]
  },
  "block that block 1 is left of and that block 1 is left of": {
    "denotation": "(list (name en.block.4))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))",
    "paraphrases": [
      "select the block that is one to the left of another block",
      "right of block 1",
      "select the block at the right of block 1"
    ]
  },
  "block that block 1 is left of and that is left of block 1": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))",
    "paraphrases": [
      "what block has block 1 at right and left",
      "find me all blocks that is left of block 1",
      "find me the block that is to the left of block 1",
      "is there a block to the right of block 1 and to the left of block 1"
    ]
  },
  "block that is right of block 1 and that is special": {
    "denotation": "(list (name en.block.43))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "find all special blocks to the right of block 1 ",
      "select the special block right to block 1",
      "find the block that is special and to the right of block 1",
      "select the special block that is to the right of block 1",
      "special block to right of block 1",
      "special block right of block 1",
      "find me all special blocks right of block 1",
      "find me all special blocks that is right of block 1",
      "get the special block from right of block 1",
      "what special block is at the right of block 1"
    ]
  },
  "block that block 1 or block 2 is above": {
    "denotation": "(list (name en.block.36) (name en.block.46))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))",
    "paraphrases": [
      "find me all blocks below blocks 1 or 2",
      "what block is above block 2 or block 1",
      "block below block 1 and block 2",
      "block below blocks 1 and 2",
      "select the block below block 1 and block 2"
    ]
  },
  "block whose width is at most length of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))",
    "paraphrases": [
      "which brick is no wider than brick 1 is long",
      "choose a block that is as thick as block 1 is long",
      "find me all blocks at most as wide as block 1",
      "what block has width less than or equal to block 1s length"
    ]
  },
  "block that block that block 1 is below is above": {
    "denotation": "(list (name en.block.29))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))",
    "paraphrases": [
      "find the block that block 1 is below",
      "block two above block 1"
    ]
  },
  "block whose width is not 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))",
    "paraphrases": [
      "find me all blocks not 3 inches wide",
      "find a block that is not 3 inches wide",
      "select all bricks that are not 3 inches wide",
      "which brick is not 3 inches wide",
      "select all blocks that dont have a width of 3 inches"
    ]
  },
  "block that not is left of block 1": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string !=) en.block.block1))",
    "paraphrases": [
      "what block is not to the left of block 1",
      "block that is not left of block 1",
      "find me all blocks not left of block 1",
      "block that not is left of block 1",
      "is there a block located to the left of block 1",
      "which brick is not to the left of brick 1"
    ]
  },
  "block whose width is 3 inches and whose height is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.53))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "what block is 3 inches wide and 3 inches tall",
      "select a block that has width and height of 3 inches each",
      "find me all the 3 inch wide and tall blocks",
      "what brick is 3 inches wide and 3 inches high"
    ]
  },
  "block whose length is at least 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "block whose length is at least 3 inches or 6 inches",
      "which block is at least 3 or 6 inches long",
      "find a block at least 3 inches long",
      "find me all the blocks at least 3 inches long",
      "find a block that is at least 3 to 6 inches"
    ]
  },
  "block that is above block that block 1 is above": {
    "denotation": "(list (name en.block.5) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me the block that is above the block that is below block 1",
      "block two up from block 1",
      "find me all blocks over that block 1 is above"
    ]
  },
  "block that block 1 not is below": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string !=) en.block.block1))",
    "paraphrases": [
      "find me all blocks that block 1 is not under",
      "select a block that is not below block 1",
      "select the block that block 1 is not below",
      "what block that is not block 1 is below"
    ]
  },
  "block whose length is smaller than 3 inches": {
    "denotation": "(list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "what block is less than 3 inches long",
      "which brick has a length shorter than 3 inches",
      "block whose length is smaller than 3 inches",
      "find a block that has a length of less than 3 inches",
      "find me all blocks with length less than 3 inches",
      "find me all blocks shorter than 3 inches"
    ]
  },
  "block that has more than two shape": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >) (number 2)))",
    "paraphrases": [
      "find me all blocks with at least 2 shapes",
      "find me the blocks that are more than two shapes",
      "block with more than 2 shapes",
      "block with more than two shapes"
    ]
  },
  "block whose width is 3 inches or 6 inches": {
    "denotation": "(list (name en.block.12) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.21) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.36) (name en.block.37) (name en.block.42) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54) (name en.block.59))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))",
    "paraphrases": [
      "any block with width of either 3 inches or 6 inches",
      "select the 3 or 6 inch wide block",
      "is there a block with a width equal to either 3 or 6 inches",
      "find me all 3 or 6 inch wide blocks",
      "which block has a width of either 3 or 6 inches"
    ]
  },
  "block whose height is 3 inches": {
    "denotation": "(list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))",
    "paraphrases": [
      "block whose height is 3 inches",
      "select the 3 inch tall block",
      "find the block with 3 inches of height",
      "find me all 3 inch high blocks",
      "3 inches high block"
    ]
  },
  "block whose length is larger than 3 inches": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))",
    "paraphrases": [
      "select all blocks with length greater than 3",
      "block whose length is larger than 3 inches",
      "which brick is longer than 3 inches",
      "find me all blocks longer than 3 inches",
      "select a block that has a length of more than 3 inches",
      "what block is longer than 3 inches"
    ]
  },
  "block whose width is 3 inches and that is below block 1": {
    "denotation": "(list (name en.block.30))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))",
    "paraphrases": [
      "find me all the 3 inch wide blocks below block 1",
      "what block below block 1 is 3 inches wide",
      "block whose width is 3 inches and that is below block 1",
      "find the block located beneath block 1 that has a 3 inch diameter",
      "which brick is 3 inches wide and below brick 1"
    ]
  },
  "block that is below block that block 1 is above": {
    "denotation": "(list)",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me all blocks 2 below block 1",
      "2 blocks below block 1",
      "find me the block that is below the block which block 1 is above",
      "find the block below the block under block 1",
      "find a block that is below block 1"
    ]
  },
  "block whose width is larger than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "locate a block with a width that is more than either 3 or 6 inches",
      "which block is wider than 3 or 6 inches",
      "find me a block at least 3 inches wide"
    ]
  },
  "block whose width is at most width of block 1": {
    "denotation": "(list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "find me a block with equal or less width than block 1",
      "which brick is no wider than brick 1",
      "select a block that has a width that is the same width of block 1",
      "find a block with width less than or equal to block 1"
    ]
  },
  "block that block 1 is right of and that block 1 is right of": {
    "denotation": "(list (name en.block.14))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))",
    "paraphrases": [
      "select the block on the left side of block 1",
      "left of block 1"
    ]
  },
  "block whose height is smaller than 3 inches or 6 inches": {
    "denotation": "(list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))",
    "paraphrases": [
      "select the bricks that are less than 6 inches tall then select the bricks that are less than 3 inches tall",
      "find a block shorter than 6 inches",
      "find all blocks with height less than 6 inches"
    ]
  },
  "block that the least number of block is above": {
    "denotation": "(list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.35) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.56) (name en.block.57))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what block is below the fewest blocks",
      "block that the least number of block is above",
      "find the block buried under the smallest number of other blocks",
      "which block is at the very bottom",
      "block above least number of blocks",
      "select the brick with the least blocks above it"
    ]
  },
  "block that at least two block is left of": {
    "denotation": "(list (name en.block.17) (name en.block.18) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.37) (name en.block.4) (name en.block.41) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))",
    "paraphrases": [
      "what brick has at least two bricks to its left",
      "find me all the blocks that have 2 blocks to the right of it",
      "find me a block with two blocks to the left of it",
      "block that at least two block is left of",
      "find a block that is is left of block two",
      "find the block located to the right of at least two other blocks"
    ]
  },
  "block whose height is smaller than width of block 1": {
    "denotation": "(list (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))",
    "paraphrases": [
      "find a block shorter than the width of block 1",
      "which brick is shorter than brick 1 is high",
      "is there a block shorter in height than block 1 is wide",
      "find me all blocks shorter than the width of block 1",
      "block whose height is less than width of block 1"
    ]
  },
  "block whose length is 3 inches and whose shape is a pyramid": {
    "denotation": "(list (name en.block.30) (name en.block.34) (name en.block.52))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))",
    "paraphrases": [
      "3 inches long pyramid shaped block",
      "find me a pyramidshaped block 3 inches long",
      "what pyramidshaped brick is 3 inches long",
      "block whose length is 3 inches and whose shape is a pyramid"
    ]
  },
  "block that is below block 1 and that is special": {
    "denotation": "(list (name en.block.30) (name en.block.38) (name en.block.55))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))",
    "paraphrases": [
      "find me the special blocks below block 1",
      "choose the block below the special looking block 1",
      "block that is below block 1 and that is special",
      "a special block below block 1"
    ]
  },
  "block that block that block 1 is above is above": {
    "denotation": "(list (name en.block.38))",
    "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))",
    "paraphrases": [
      "find me the block that is above the block that is above block 1"
    ]
  }
}