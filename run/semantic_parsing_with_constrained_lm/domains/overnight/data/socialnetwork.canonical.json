{"person whose birthdate is birthdate of alice": {"denotation": "(list (name en.person.21) (name en.person.24) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.45) (name en.person.48) (name en.person.54) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))", "paraphrases": ["people born on the same day as alice", "person with the same birthday as alice", "who is born on same date that of alice", "people who have the same birthday as alice", "what person has the same birthdate as alice"]}, "gender that is gender of student whose university is not brown university": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["whats the gender of the student that did not attend brown university", "what is the gender of students not attending brown university", "genders of students not at brown", "find me the gender of students who did not attend brown university", "gender of student whose university of not brown university", "what is the gender of people attending any university but brown", "what are genders of students not attending brown university", "gender of a student not attending brown university", "what is the gender of students who do not go to brown university"]}, "person whose height is 180 cm and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["people who ate 180 cm tall", "people whose height is 180 cm", "which people are 180 cm tall", "find people 180 cm tall"]}, "person that student whose end date is not 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.35) (name en.person.51) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find friends of students with end dates other than 2004", "person who is friends with student that did not graduate in 2004", "who is friends with the person who didnt graduate in 2004", "who are the friends of students with an end date that is not 2004", "name a friend of a student who did not graduate in 2004", "which people are friends with students who didnt graduate in 2004", "find friends of people who graduated school but not in 2004", "find the friends of students that did not graduate in 2004", "who is not friends with a student whos end date is not 2004", "friends of people who completed their studies in an year other than 2004"]}, "person whose height is smaller than 180 cm": {"denotation": "(list (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.24) (name en.person.26) (name en.person.27) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.41) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "paraphrases": ["people shorter than 180 cm", "who is shorter than 180cm", "persons whose height is 180 cm or more", "what person is shorter than 180 cm"]}, "city that is birthplace of person that is logged in": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "paraphrases": ["what are the birthplaces of people logged in", "where were the people online born", "what is the birthplace of people currently online", "what cities were people that are currently online born in"]}, "person that has at most two birthplace": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "paraphrases": ["find someone with two or less birthplaces", "people that have two or less birthplaces", "find people with one or two birthplaces", "people that have two or fewer birthplaces listed"]}, "person that student whose end date is larger than 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.35) (name en.person.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is friends with someone who graduated after 2004", "find the friends of students whose end date is later than 2004", "find friends of students graduating after 2004", "whos end date is after 2004", "person who is friends with someone whose end date is after 2004", "find friends connections who graduated after 2004", "people with friends who graduated school after 2004", "people who are friends with the people who quit after 2004", "name a friend of the student who graduated after 2004"]}, "employee whose end date is smaller than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employees have an end date that is before student alices start date", "find employee whose last day at work is before alices start date", "which employees last day was before the day alice started school", "find the people who quit their job before alice joined her study", "which employee ended earlier than alices start date", "which employee quit school before alice started", "employee whose end date is before start date of student alice", "people that stopped working before alice started school", "an employee that ends before alice starts"]}, "city that is birthplace of person whose relationship status is single": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "paraphrases": ["what city was the single person born in", "what cities were the single people born in", "what city were people who are single born in", "city that a single person was born in", "city where person whose relationship status is single born"]}, "person that is friends with employee whose end date is at least 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.35) (name en.person.39) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who is the friend of the employee who employment end date is at least 2004", "friend of student whose end date is not before 2004", "people that are friends with someone that stopped working in or after 2004", "which people are friends with employees whose last day was no sooner than 2004", "people who are friends with employees who quit their job in or after 2004", "people who are friends with an employee that started no later than 2004", "friends of employees finishing in or after 2004", "who is friends with an employee from at least 2004", "people who have friends who left their jobs in or after 2004", "people who are friends with the employee that will be leaving by 2004"]}, "city that is birthplace of person that alice is friends with": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "paraphrases": ["what are the birthplaces of alices friends", "birthplaces of alices friends", "birth city of alices friend", "where was alices friend born", "which city were alices friends born in", "who are alices friends from her hometown", "what is the birth city of people who are friends with alice", "in what city was alices friend born", "what is the birthplace of those who are friends with alice"]}, "person that is friends with employee whose start date is smaller than 2004": {"denotation": "(list (name en.person.3) (name en.person.4) (name en.person.41) (name en.person.58) (name en.person.6) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["friends of employees who started before 2004", "friend of employee whose start date is before 2004", "people that are friends with someone that started working before 2004", "name of employees friends who started before 2004", "people who are friends with an employee that started before 2004", "which persons are friends with employees that started before 2004", "which people are friends with employees who strated before 2004", "find me the friends of the employee who started before 2004", "what people are friends of employees that have a start date before 2004"]}, "person whose height is 180 cm and whose start date is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["find people with a height of 180 cm and a state date of 2004", "who joined on in 2004 and is 180 cm tall", "name a person who is 180 cm who started working in 2004", "all 180 cm tall people who joined in 2004", "which people are 180 cm tall and started school in 2004", "people who started in 2004 and are 180 cm tall", "what person who started in 2004 is 180 cm tall", "find me all people whose height is 180 cm and born in 2004", "find people who are 180 cm tall with 2004 start date", "who is 180 cm tall and has a start date in 2004", "find people who are 180 cm tall with 2004 start dates", "180 cm tall people joined in 2004", "who started in 2004 and is 180 cm tall", "name a person 180 cm tall who started working in 2004", "which 180 cm tall people have a start date of 2004", "someone 180 cm tall who started in 2004", "which 180 cm tall people started in 2004", "find people with a start date of 2004 and height of 180 cm"]}, "person that is friends with alice and whose gender is male": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "paraphrases": ["who are all of alices guy friends", "male friend of alice", "men that are friends with alice", "what male is friends with alice", "people who male and friends with alice"]}, "employee that has the least number of employer": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees with the fewest employers", "what employees have the least amount of employers", "which employee has the fewest jobs", "which employer has the least number of employees", "an employer with the least employees", "what employer has the least amount of employees", "which employee has worked for the fewest employers", "employee with smallest job history", "person that has the smallest number of employees"]}, "person that has two gender": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "paraphrases": ["what people have two genders", "find everybody who has two genders", "what is a person who has two genders called", "who has two genders", "find all people that have two genders"]}, "person whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["people who were born in 2004", "find all people born in 2004", "people born in 2004", "find me people born in 2004"]}, "person that person that is friends with alice is friends with": {"denotation": "(list (name en.person.31) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "paraphrases": ["name a friend of alice", "a friend of alice friend", "find friends that are friends with alice", "find mutual friends of alice"]}, "employee whose start date is at most end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who joined before alice quit the job", "people that started working when alice stopped school or before", "which employees started no later than alices graduation day", "what employee started no greater than alices end date", "find me an employee whose start date is before or equal to the end date of student alice", "employee whose start date is not after end date of student alice", "name an employee who started before alice quit", "employees who started before alice quit school", "employee starting before or when alice ends", "what employees have a start date no later than that of student alice"]}, "person whose birthplace is person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["what is the birthplace of a person whose height is 180 cm", "find the birthplace of people who are 6 feet tall", "person whose birthplace is same as person 180 cm tall", "find people who have a birthplace the same as those with a height of 180 cm", "who was born in the same place as the 180 cm tall person", "where are people born who are 180 cm in height", "in what city was the 180cm tall person born", "find the birthplace of people who are 180 cm tall"]}, "person whose birthdate is 2004 or 2010": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "paraphrases": ["people born in 2004 or 2010", "persons born in 2004 or 2010", "person who was born in 2004 or 2010", "find me a person born in either 2004 or 2010"]}, "employee whose start date is at least end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employees started at the same time as alice", "what employee has a start date that is no earlier than the end date of alice", "people that started working when alice stopped school or after", "employees starting contemporaneous to or after alice finishes", "what employees have a start date that is the same as student alice or greater", "employee whose start date is not before end date of student alice", "find me all employees that will start at the company before alice leaves", "employees who started working on or after the day alice ended school"]}, "city that is birthplace of the most number of person": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["which city are most people born in", "city that most number of persons born", "what city were the most people born in", "what city were most people born", "most popular birthplace"]}, "person whose birthdate is at most birthdate of alice": {"denotation": "(list (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "paraphrases": ["people born on or before alices birthday", "find people born after alice", "what person is younger than alice", "which person has the birthdate of alice"]}, "relationship status that is relationship status of person that alice is friends with": {"denotation": "(list (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "paraphrases": ["what is the relationship status of friend of alice", "find the relationship statuses of people whom alice is friends with", "relationship status of people that are friends with alice", "relationship status of alices friends", "find people who have the same relationship status of someone alice is friends with", "friends of alice in similar relationships"]}, "gender that is not gender of alice": {"denotation": "(list (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string !=) en.person.alice))", "paraphrases": ["what is not alices gender", "what gender is alice not", "what gender is not claimed by alice", "people who are not the same gender as alice"]}, "person whose gender is male and that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["find people with a gender of male whom alice is friends with", "who is male and is friends with alice", "people who are friends with alice and male", "name a man who is friends with alice", "who are alices male friends"]}, "end date of student alice whose end date is 2004": {"denotation": "(list (date 2004 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "paraphrases": ["what is the alices 2004 end date", "find me all people named alice who quit during 2004", "what was the graduation date of alice in 2004", "what day did alice stop school in 2004"]}, "person that is friends with more than two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["people who have more than two friends", "people with three or more friends", "who is friends with over two people", "someone with over two friends", "find people who are friends with no more than two people", "name a person who is friends with more than two other people"]}, "employee whose start date is smaller than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who started before end date of student alice", "find employees with a start date earlier than the end date of student alice", "employees who started before alice stopped being a student", "who was hired after alice quit", "employees who began working before alice finished school", "employees who started on alices last day", "which employee started no earlier than alices end date", "people that started working before alice stopped school", "find employees starting before alices last day"]}, "student whose start date is 2004 or 2010": {"denotation": "(list (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student started in 2004 or 2010", "find me students whose start date is either 2004 or 2010", "students starting in 2004 or 2010", "find me a list of students whose start date was in 2004 or 2010", "students who began school in 2004 or 2010", "find students who started in 2004 or in 2010", "name a student who started in 2004 or 2010", "people that started school in 2004 or 2010"]}, "person that has two relationship status": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "paraphrases": ["find all the people with two relationship statuses", "find people with two relationship statuses", "someone with two relationship status", "find people that have two relationship statuses", "who has two relationship status", "find me 2 people in a relationship", "who has two different relationship statuses", "what people have two relationship statuses"]}, "student whose university is university of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students go to the same university as student alice", "a student that attends the same university as alice", "people that go to or went to the same university as alice", "in which university does alice study", "which students go to the same university as alice", "which student goes to the same university as student alice", "students who go to the same university as alice", "student whose university of is same as that of student alice", "which is the university alice studied", "find students who attend alices university"]}, "person that is friends with person whose relationship status is single": {"denotation": null, "formula": null, "paraphrases": ["people who have single friends", "who has a single friend", "find the friends of all people who list their relationship status as single", "people that are friends with someone that is single"]}, "person that alice is friends with and whose relationship status is single": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["find alices friends who are single", "who is a person whose friends with alice that is single", "alices friends who are singles", "which of alices friends are single", "find people who are friends with alice and are single", "who is alice friends with that also have relationship statuses of single", "who is alices single friend"]}, "student whose start date is at least start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students started after or at the same time as alice", "what student had a start date no earlier than alice", "which students started no earlier than the day alice started school", "find students with a start date that is greater than or equal to student alice", "people who joined their study with or after alice", "people that started school when alice did or after", "student whose start date is not before start date of student alice", "what student has a start date close to the start date of alice"]}, "person whose birthdate is 2004 and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["who was born in 2004 and is 180 cm tall", "find people born in 2004 who are 180 cm tall", "which people are 180 cm tall and have a birthdate of 2004", "what people have a birthdate that is 2004 and whose height is 180 cm", "name a person born in 2004 who is 180 cm tall", "people who were born in 2004 and are 180 cm tall", "find people  born in 2004 whose height is 180 cm", "which people born in 2004 are 180 cm tall"]}, "person whose height is 180 cm and whose gender is male": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "paraphrases": ["name a male who is 180 cm tall", "find males who are 180 cm tall", "find all males who are 180 cm tall", "what person is a 180 cm tall male", "which men are 180 cm tall", "male 180 cm tall"]}, "person that has at least two birthplace": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "paraphrases": ["who was born in two or more places", "find someone who lists 2 birthplaces", "find people that have at least two birthplaces", "find all the people with at least two birthdays", "which people have at least two birthplaces", "people with two or more birthplaces"]}, "person that at least two person is friends with": {"denotation": "(list (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.31) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["find people with at least two friends", "who has at least two friends", "what person has at least two friends", "people that have at least two friends"]}, "employee whose end date is larger than birthdate of alice": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee ended later than alices birthdate", "employee whose end date is after alices birth date", "people that stopped working after alice was born", "which employee quit after alices birthday", "employees who finish after alices birthday", "what employee has the same or bigger end date of employee alice", "an employee who left after alice was born", "an employee starting after alice was born", "people who quit after alices birthday", "people who quit their jobs after alice born"]}, "person that is friends with employee whose start date is not 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people who are friends with the employee that does not start in 2004", "which people are friends with employees who did not start in 2004", "people who have friends who did not begin working in 2004", "people who are friends with employees who started working before or after 2004", "people who are friends with somebody who did not start in 2004", "friends of employees who didnt start in 2004", "who is the friend of the employee whose start date is at least 2005", "who is friends with an employee who started in a year other than 2004", "people that have employed friends that did not start working in 2004", "friend of employee whose start date is not 2004"]}, "person that is logged in and whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["what person was born in 2004 and is logged in", "online people who were born in 2004"]}, "person that alice is friends with and that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["find all people who are mutual friends with alice", "find people who are friends with alice", "people that are friends of alice", "friends of alice", "who is friends with alice"]}, "person that student whose end date is at most 2004 is friends with": {"denotation": "(list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who has friends that are students and whos end date is 2004", "connection to someone who will have graduated before 2004", "who are people who are students with an end date no greater than 2004 friends with", "find people with friends that finished school in 2004 at the latest", "2004 graduates friends", "friends of people who completed their studies before 2005", "who is friends with the person who graduated during or before 2004", "friend of student whose end date is at most 2004", "who is friends with the person is quit no later than 2004"]}, "relationship status that is relationship status of the most number of person": {"denotation": "(list (name en.relationship_status.married))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["relationship status as most of the persons", "what person has the same relationship status as that of the majority", "what is the most common relationship status", "who is in the most relationships"]}, "student that has at most two field of study": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students who have no more than two fields of study", "find students with one or two fields of study", "students who have no more than two fields of study", "name all students with two or fewer fields of study", "people who studied in two or less fields", "student who has not more than two fields of study", "which students have no more than two majors", "a student with two or fewer majors", "what student no more than two fields of study", "who is studying two things or less"]}, "person whose birthdate is end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "paraphrases": ["find people born after alices last day of work", "find people with birth date same as employment end date of alice", "what person was born on the last day of alices employment", "find people whose birthday is the same as alices end date", "who was born on the day alice left"]}, "city that is birthplace of student whose university is not brown university": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["birthplace of a student not attending brown university", "where is the birthplace of the student not going to brown  university", "what is the birthplace of students that dont go to brown", "where were the people that go to a university other than brown born", "what cities are the birthplace of students who dont  are not from brown university", "birthplace of students not at brown", "what is the birthplace of students who are not brown university students", "birth city of student whose university is not brown university", "find birthplaces of students not attending brown university", "birthplace of students who are not studying at brown university"]}, "job title of employee alice whose end date is 2004": {"denotation": "(list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "paraphrases": ["what is alices job title from company she left in 2004", "what is job title of employee alice whose end date is 2004", "what was alices job title from 2004", "what job did alice leave in 2004", "what is job title of alice whose employment end date is in 2004"]}, "employee whose end date is end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees whose end date is the same as that of student alice", "which employees last day was the same day as alices graduation day", "employees whose end date is the same as alices", "what employee has the same end date as alice", "employee whose end date is same as that of student alice", "find employees with the same last day as student alice", "people that stopped working when alice stopped school", "find me all employees that have the same end date as alice", "employees who finish with alice"]}, "person that student whose start date is larger than 2004 is friends with": {"denotation": "(list (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.51) (name en.person.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is friends with the student who began school later than 2004", "a friend of a student starting after 2004", "find friends of student who started later than 2004", "what student has a start date after 2004", "find friends of people who started school after 2004", "friends of people who completed their studies after 2004", "find people who are students with a start date later than 2004 and their friends", "who is friends with the person who started going to school after 2004", "who is a person whose start date was after 2004 friends with"]}, "person that is friends with student whose end date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["people who have student friends who did not graduate in 2004", "people who are friends with student that didnt end in 2004", "people that are friends with someone that finished school in any year but 2004", "people who are friends with students who do not graudate in 2004", "find students friends with last days other than 2004", "what person is friends with a student whose end date is not 2004", "friend of student whose end date is not 2004", "find people who are friend with students that have an end date not of 2004", "find all  friends with student with end date other than 2004", "find me people that are friends with students leaving before and after 2004"]}, "field of study of student alice": {"denotation": "(list (name en.field.computer_science) (name en.field.economics) (name en.field.history))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "paraphrases": ["which is the field of study of alice", "what is alices field of study", "what did alice study", "what was alices field of study as a student", "what was alices field of study"]}, "student whose start date is smaller than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that started school before alice stopped working", "what student started the job before alice quit", "student who started after alice", "students who started before alice quit her job", "students that are starting before alices last day", "students who have a start date smaller than that of the end date for employee alice", "which students who strated before alice", "find students starting before alices last day at work", "student whose start date is before end date of employee alice", "students starting before alice finishes"]}, "person whose height is height of alice": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height))))", "paraphrases": ["what person has the same height as alice", "people that are the same height as alice", "who has same height as alice"]}, "person whose birthdate is at most start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "paraphrases": ["people born on or before the day alice started her job", "what persons birthdate is at most the same as alices start date", "what person has a birthdate sooner than alice"]}, "relationship status of alice": {"denotation": null, "formula": null, "paraphrases": ["what is the status of alices relationship"]}, "student whose start date is at most start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is not after start date of student alice", "people that started school when alice did or before", "find the people who joined study before alice", "find students with a start date that is no greater than student alices start date", "students whose start date is no later than alices", "find me all students that will start at the same time or after alice starts", "which students started no later than alice did"]}, "employee whose end date is end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who shares end date with employee alice", "employees who quit the same day as alice", "employee whose last day was also alices last day", "find employees with the same last day as alice", "employees who stopped working at the same time as alice", "find employees who have an end date the same as alice", "what employee has an end date that is the same as that of alice", "what employee started on the same day alice quit her job", "people that stopped working the same day as alice", "what employee has end date equal to employee alice"]}, "person that person whose birthdate is 2004 is friends with": {"denotation": "(list (name en.person.16) (name en.person.19) (name en.person.24) (name en.person.36) (name en.person.49))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "paraphrases": ["friends of all the people born in 2004", "who is friends with someone born in 2004", "find friends of people born is 2004", "find friends of person born in 2004", "who has friends born in 2004", "find friends of people who were born in 2004", "who are people with a birthdate of 2004 friends with", "name a persons friend who was born in 2004", "friends of people born in 2004", "a friend of someone born in 2004"]}, "person that has at least two gender": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "paraphrases": ["who has two or more genders", "transgendered people", "find people who have at least two genders", "what people have two or more genders", "two or more gendered people", "people that have at least 2 genders"]}, "gender that is gender of person that is friends with alice": {"denotation": "(list (name en.gender.female))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "paraphrases": ["gender of alices friend", "find people who are the same gender as alices friends", "what genders are alices friends", "what is the gender of alices friends"]}, "person that is friends with at most two person": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["who has maximum two friends", "find people who do not have more than two friends", "people with two or less friends", "find someone who has at most two friends"]}, "person whose height is 180 cm and whose birthdate is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["180 cm tall person with birthdate in 2004", "all 180 cm tall people born in 2004", "who is 180 cm tall and born in 2004", "name a person 180 cm tall who was born in 2004", "people born in 2004 who are 180 cm", "what is the birthdate of the person with a height of 180 cm", "find people 180 cm tall born in 2004", "find people with a height of 180 cm who also have a birthdate of 2004", "people born in 2004 and who are 180 cm tall", "what person born in 2004 is 180 cm tall"]}, "university of student alice whose field of study is computer science": {"denotation": "(list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "paraphrases": ["person named alice who studies computer science at a university", "what university did alice study computer science at", "alice who is a student of computer science is a student of which university", "which university did alice study computer science at", "what university does alice study computer science at"]}, "start date of student alice whose university is brown university": {"denotation": "(list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "paraphrases": ["find when students named alice started attending brown university", "when did alice start attending brown university", "what is alices start date at brown university", "when did alice join at brown university"]}, "employee whose start date is larger than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee started after the student named alice", "which employee started after alice started", "a worker who started after student alice", "employee whose start date is after start date of student alice", "people that started working after alice started school", "find employes whom have a start day that is later than the start date of student alice", "employees who start after alice", "people who joined their job after alice joined her study", "which employee started after alice"]}, "person that is friends with employee whose end date is smaller than 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.4) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what people are friends with employees who have an end date before 2004", "friend of employee whose end date is before 2004", "find employees friends with last date of work before 2004", "what person is friends with employee who ended earlier than 2004", "which people are friends with employees whose last day was before 2004", "people who are friends with the employee thats leaving before 2004", "people that are friends with someone that stopped working before 2004", "which person is friends with an employee who was here in 2004", "what person is friends with the employee that quit before 2004", "people that are friends with people that quit their jobs before 2004"]}, "student whose end date is start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose end date is same as start date of employee alice", "students who ended school the day alice started working", "which student ended on alices start date", "what students graduate when alice was hired", "a student ending before alice starts", "students finishing on alices starting day", "people that stopped school when alice started working", "find students with an end date the same as employee alices start date", "students that graduate on the same day alice starts her new job"]}, "height of alice": {"denotation": "(list (number 157 en.cm))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))", "paraphrases": ["what is alices height", "how tall is alice", "what is height of alice"]}, "gender that is gender of employee whose end date is at least 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the gender of people that stopped working in or after 2004", "gender of employees who finish after or in 2004", "what is the gender of employees terminated on or after 2004", "what is the gender of employees who quit on or after 2004", "find the gender of employees who have an end date that is 2004 or later", "what gender is the employee who started in 2004", "what is the gender of an employee with an end date no earlier than 2004", "what is the gender of employees whose last day was no earlier than 2004"]}, "employee whose end date is birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.23) (name en.person.28) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find me employees whose end date is the same as alices bithdate", "what employee was terminated when alice was born", "who stopped working the day alice was born", "find employees whom have the same end date as alices birthday", "which employees last day is the same as alices birth date", "employee who quit on alices birthdate", "which employee ended their job on the same day as alices brithday", "find the employee whose last day was on alices birthdate", "employees who finish on alices birthday"]}, "start date of employee alice whose job title is software engineer": {"denotation": "(list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "paraphrases": ["find the date that alice started her software engineer job", "what is alices start date as software engineer", "when did alice start working as a software engineer", "which date alice the software engineer started", "what is alices first day as a software engineer"]}, "student whose start date is larger than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student started after alice stopped going to school", "people that started school after alice stopped school", "which student started after alice quit her job", "students who began school after alice graduated", "student whose start date is after end date of student alice", "find students starting after alices last day", "a student starting after alice ends", "what students have start dates greater than those of the end date of student alice", "what student started after alices end date", "students who started after alices end date"]}, "person that has the least number of gender": {"denotation": null, "formula": null, "paraphrases": ["find the people with the only one gender"]}, "relationship status that is relationship status of employee whose start date is at most 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["relationship statuses of employees who started working in or before 2004", "what is the employees relationship status who started no later than 2004", "name the relationships status of an employee who started no later than 2004", "find relationship status of employees starting in 2004 or earlier", "what is the relationship status of employees who start date was 2004 or before", "relationship status of employee whose start date is not after 2004", "relationship status of employee starting before 2004", "what is the relationship status of people that started work in or before 2004", "find me all relationship statuses for employees whose start date is no later than 2004", "what is the relationship status of employees who began working by 2004"]}, "gender that is gender of student whose end date is at least 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["gender of student whose end date is at least 2004", "what gender is the student whose end date is 2004 or later", "what is the students gender who ended at least in 2004", "locate the gender of students who have an end date of 2004 or later", "gender of students whos end date is 2004 or more", "what sex are the students who ended from 2004 on", "what is gender of students with last day in 2004 or later", "what is the gender of students who did not graduate before 2004", "gender of students finishing on or after 2004", "what is the gender of people that stopped school in or after 2004"]}, "start date of employee alice": {"denotation": "(list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))", "paraphrases": ["when did employee alice started", "when did alice start her job", "when did alice begin as an employee", "what was alices first day of work"]}, "person that student whose end date is smaller than 2004 is friends with": {"denotation": "(list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is the student whose end date was at least 2004 friends with", "find me friends of students graduating before 2004", "find all people with friends who finished school before 2004", "what students have an end date before 2004 and who are their friends", "who has friends whos end date is before 2004", "find friends of students whose last day is before 2004", "who is friends with the person graduating in 2004 or earlier", "who is friends with a person who graduated before 2004", "friends of people who completed their studies before 2004"]}, "relationship status that is relationship status of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["relationship status of people whose height is 180cm", "relationship status of 180 cm tall person", "find the relation status of people who are 180 cm tall", "what is the relationship status of the person that is 180 cm tall", "what is the status of the 180 cm tall persons relationship", "what is the relationship status of the person who is 180 cm tall", "what is the relationship status of a person whose height is 180 cm", "find the relationship status for people with a height of 180 cm", "what is the relationship status of people who are 180 cm tall"]}, "city that is birthplace of person that is friends with alice": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "paraphrases": ["what city was alices friend born in", "which cities were alices friends born in", "cities where alices friends were born", "where was alices friend born in", "where were alices friends born"]}, "employee whose end date is larger than 2004": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee ended after 2004", "find employees who quit the job after 2004 ", "find employees with an end date after 2004", "which employee quit their job after 2004", "people who quit their job after 2004", "people that stopped working after 2004", "employees who quit after 2004", "which employees last day was after 2004"]}, "employee that has the most number of employer": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee has the most previous employers", "who do the most people work for", "find me the employee who has had the most previous jobs", "find employees working for the most employers", "find employees that have the greatest amount of employers", "which employee has been employed by the most employers", "what employee has the greatest number of employers", "person who worked with highest number of employees", "employee with the largest number of employers"]}, "person that the least number of person is friends with": {"denotation": "(list (name en.person.11) (name en.person.17) (name en.person.21) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.32) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.53) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["person who has the least friends", "who has the fewest friends", "who has least number of friends", "find me the person with the least friends"]}, "person whose birthdate is at least start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "paraphrases": ["people born the same day as or after alice started school", "find all people who were born before alice started", "whose birthdate is on or after alices start date", "people who were born on or after alices first day of school", "persons who were born on or after start date of alices study"]}, "employee whose end date is larger than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employees last day was more recent than alices graduation day", "employee whose end date after end date of student alice", "find me an employee whose end date is later than the end date of student alice", "what employees have an end date that is later than that of student alice", "employee who quit after student alice quit her job", "employee ending after alice ends", "employees who quit after alice quit school", "people that stopped working after alice stopped school", "name an employee who quit after alice", "which employee ended no greater than alices"]}, "student whose end date is end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student quit at the same time the employee alice did", "which students graduate the day of alices last day at work", "student whose end date is same as that of employee alice", "which students last day was the same as alices", "which student stopped at the same time employee alice did", "students finishing with alice", "name the student who the quit the job with alice", "people that stopped school when alice stopped working", "find students who have an end date the same as employee alice"]}, "employee that has the largest start date": {"denotation": "(list (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["person that started working most recently", "an employee with the longest start date", "employees with the latest start date", "which employee was most recently hired", "what employee has the latest start date", "who is the newest employee", "what employee has the longest employment", "employee with largest start date", "employees starting the latest"]}, "person whose gender is male and whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["any male who is single", "what male has a relationship status of single", "find males that are single", "find all male singles"]}, "job title that is job title of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["job titles of people that are 180 cm tall", "what is the job title of the person that is 180 cm", "the job title of a 180 cm tall person", "what is the 180 cm tall persons job title", "job titles of all people who are 180 cm tall", "what is the job title of those who are 180 cm tall", "job titles of people who are 180 cm tall", "what is the job title of people who are 180 cm tall", "what is the job title of people who have a height of 180 cm", "what is the job title of the person who is 180 cm tall"]}, "gender that is gender of person whose relationship status is single": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "paraphrases": ["what is the gender of a person who is single", "what is the gender of the single people", "genders of people whom are single", "find the gender of people who are single", "gender of someone who is single"]}, "job title of employee alice whose job title is software engineer": {"denotation": "(list (name en.job_title.software_engineer))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "paraphrases": ["is alices job title software engineer"]}, "employee whose start date is 2004 or 2010": {"denotation": "(list (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.31) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find me all employees who started in 2004 or 2010", "employees who started in 2004 or 2010", "a worker who began in 2004 or 2010", "what employees have a start date of either 2004 or 2010", "what employees had start dates on 2004 or 2010", "employees who were hired either in 2004 or 2010", "what employees have a start date that is either 2004 or 2010", "who started working in 2004 or 2010", "employee who started working on 2004 or 2010"]}, "employee whose start date is end date of student alice": {"denotation": "(list (name en.person.12) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employees have a start date the same as alices end date", "what employee has a start date that is the same as the end date of alice", "employees who started on the day that alice graduated", "employee who started on the end date of alice", "employees starting when alice finishes", "employee who started in alices end date", "people that started working when alice stopped school", "find employees who started on student alices last day"]}, "person that is friends with person whose gender is male": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.2) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.54) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "paraphrases": ["anyone friend of a male", "people with male friends", "people who are friends with males", "person who has male friends", "what person is friends with males"]}, "student that has the least number of field of study": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["who is studying the most things", "what student has the fewest majors", "students with the fewest fields of study", "studens with the fewest fields of study", "which students have the fewest majors", "what students have the fewest fields of study", "which student has the fewest fields of study", "student whose fields of study are smallest", "student that has no less than one field of study", "find students with fewest fields of study"]}, "city that is birthplace of at most two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what are the birthplaces of two persons or less", "what city is the birthplace of at most two people", "birth city of no more than two people", "which city is the birthplace of two or less people", "what city is the birthplace of no more than two people", "in which city were not more than two people born", "what city were two or fewer people born in", "what is the birth city of no more than two people", "birthplace of two or less persons"]}, "person that is logged in and whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.23) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["find all people that are single and currently online", "anyone single who is logged in", "what online person is single", "single people that are currently online", "presently logged in persons whose relationship status is single"]}, "employer of employee alice": {"denotation": null, "formula": null, "paraphrases": ["who is employer of alice", "who is alices employer"]}, "relationship status that is relationship status of student whose start date is not 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the relationship status for students with a start date not equal to 2004", "the relationship status of a student not starting in 2004", "what is the relationship status of current or former students excluding those that started in 2004", "what is the relationship status of student whose start date is not 2004", "what is the students relationship status who didnt start in 2004", "what is the relationship status of a student whose start date is not in 2004", "relationship status of students not starting in 2004", "relationship status of students whose start date is not 2004", "what is the relationship status of students who did not start in 2004", "what is relationship status of students who did not start in 2004"]}, "student whose start date is birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.33) (name en.person.38) (name en.person.59) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["person who joined study on the day alice was born", "student who started the same day as alices birthday", "which students started on alices birthdate", "what student has a start date the same time as the birthdate of alice", "which student started on alices birthday", "students who start on alices birthday", "students who started on alices birthday", "people that started school when alice was born", "student who started on birthdate of alice"]}, "person that is friends with alice and that alice is friends with": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["which people that alice is friends with are friends with alice", "find all people who have alices as a mutual friend", "which people are mutual friends of alice", "find alices friends", "name a person that alice is friends with"]}, "person whose height is at least 180 cm or 200 cm": {"denotation": null, "formula": null, "paraphrases": ["persons whose height is 180 cm or higher", "whose hight is at least 180cm"]}, "employee whose end date is at most 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who left before 2004 or in 2010", "which employee ended between 2004 and 2010", "what employees have an end date no later than 2004 or 2010", "people that stopped working in or before 2004 or in or before 2010", "employee whos last day was between 2004 and 2010", "what is the most end date of student 2004 or 2010", "an employee ending in 2004 or 2010", "find me the employee who quit between 2004 and 2010"]}, "student whose end date is at least 2004 or 2010": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what student has an end date that is at least either 2004 or 2010", "what students have end date names that are either 2004 or 2010", "what students graduated in 2004 or 2010", "which students ended school in 2004 and 2010", "students whose graduation year is at least 2004 or 2010", "find students whose last day was 2004 or later"]}, "person that is friends with employee whose end date is not 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who are the friends of employees who did not quit in 2004", "which person is friends with the employee whos end date isnt 2004", "friends of employees who dont finish in 2004", "find people who are friends with empoyees whose last day was not in 2004", "people that are friends with someone that did not stop working in 2004", "friend of employee whose end date is not 2004", "find employees friends with last day other than 2004", "find people whom are friends with employees who have an end date that is not 2004", "a person whose employee friend didnt leave in 2004", "people who are friends who employees who didnt quit in 2004"]}, "number of person": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what is number of a person", "what is the persons number", "how many people are there"]}, "field of study of student alice whose university is brown university": {"denotation": "(list (name en.field.computer_science) (name en.field.economics) (name en.field.history))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "paraphrases": ["what field is alice studying in brown university", "what is alice studying at brown university", "what is the field of study of student alice whose university is brown university", "what did alice study at brown university", "what does alice study at brown university"]}, "person whose relationship status is not single": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.3) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.43) (name en.person.48) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "paraphrases": ["people who are in a relationship", "what person has a relationship status of not single", "people who are currently in a relationship", "who is not single", "people that are not single"]}, "student whose start date is at least end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that started school on or after the day alice stopped working", "find students starting on or after employee alices first day", "what students have a start date that is the same as employee alices end date or later", "which student started the day alice left her job", "student whose start date is after end date of employee alice", "which student had started working after alice quitted", "which students started no earlier than alices last day of work", "students who started at or after the end date of alice", "what student has a start date that is no less than alice"]}, "person whose relationship status is single and whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["find all single people born in 2004", "people who are single and born in 2004", "who is single and born in 2004", "people who are single and were born in 2004", "single people born in 2004"]}, "student whose end date is larger than birthdate of alice": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student has an end date after alices birthdate", "which students graduate after alices birthdate", "students who died before alice was born", "people that stopped school after alice was born", "find students who have an end date that is greater than alices birthday", "students who leave after alices birthday", "find student whose last day is after alices birthday"]}, "person whose birthdate is at least 2004 or 2010": {"denotation": null, "formula": null, "paraphrases": ["people born between 2004 and 2010", "people who were born after 2010", "find someone born during or after 2004"]}, "employee whose start date is larger than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find an employee whom has a start date later than the end date of student alice", "which employee started after alice left", "employees who started after alice graduated", "find employees starting after student alices last day", "people that started work after alice stopped school", "employee whose start date is after end date of student alice", "what employee has a start date later than the end date of alice", "employees who start after alice leaves", "what employee started after student alice left", "an employee starting after alice ends"]}, "city that is birthplace of student whose start date is at most 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the birthplace city of a student who started during or before 2004", "what is the birthplace of student who joined before 2004", "what is the students birthplace city who started at the most in 2004", "in what cities were students who started before or in 2004 born", "what is the birthplace of students who strated no later than 2004", "birthplace cities of students who started before 2004", "find birth cities for students who have a start date no later than 2004", "birth city of student whose start date is not after 2004", "where were the people that started school in or before 2004 born", "the birthplace of a student starting before or during 2004"]}, "relationship status that is relationship status of student whose start date is smaller than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the relationship status of people that started school before 2004", "whats the relationship status of the new student starting before 2004", "relationship status of student whose start date is before 2004", "what is relationship status of students starting in 2003 or before", "name the relationship of thie student who started before 2004", "what are the relationships statuses of students who started school before 2004", "what is the relationship status of students with a start date less than 2004"]}, "person whose birthdate is end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.53) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))", "paraphrases": ["what person was born on alices graduation date", "who was born on the day alice finished school", "find people born the same day alice ended school", "who was born on the date alice left"]}, "employee whose start date is smaller than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people who started working before alice quit her job", "employee whose start date is before the end date of employee alice", "employees starting before alice finishes", "find employee starting earlier than alices last day", "which employee started earlier than alices end date", "find the employees that were hired before alice quit her job", "a worker who started before alice left", "find employees who have a start date earlier than the end date of the employee alice", "people that started working before alice stopped working", "which employees started before alices last day"]}, "person whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["which person has a relationship status of single"]}, "student whose start date is larger than 2004": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students who started later than 2004", "which student started after 2004", "student whose start date is after 2004", "what students have start dates later than 2004", "which students started after 2004", "students who began school after 2004", "people that started school after 2004", "who is a student that started after 2004", "find students who joined after 2004"]}, "city that is birthplace of student whose end date is at least 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find a list of cities that students whose end date is at least 2004 were born in", "what city is the birthplace of a student who graduated 2004 or after", "birthplace of students finishing in or after 2004", "birthplaces of students who ended school in or after 2004", "find birthplaces of students whose last day was in 2004 or later", "birth city of student whose end date is at least 2004", "what city is the students birthplace who ended at least in 2004", "find me the birth city of all students whoes end date is 2004 or later", "where were the people that stopped school in or after 2004 born"]}, "student whose field of study is field of study of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have a field of study that is the same as alice", "students with the same field of study as alice", "students who are studying the same field as alice", "people who studied the same field as alice", "find students sharing alices field of study", "students who share alices field of study", "people studying the same thing as alice", "which students have the same major as alice", "student with same field of study as that of student alice", "which student is in the same field of study as alice"]}, "person whose birthdate is at least start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "paraphrases": ["who is born on or after start date of employee alice", "people born on or after the date alice started working", "people who were born on or after alices first day of work", "find people born after the employment of alice", "find someone born on or after alices first day of employment"]}, "employee that has at most two job title": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employee has no more than two job titles", "which employees have no more than 2 job titles", "find employees with one or two job titles", "employee with at most two jobs", "employee who has maximum 2 job titles", "find employees who have the greatest amount of job titles", "what employees have two or fewer job titles", "employees with two job titles at most", "employee with not more than two job titles", "working people with two or less job titles"]}, "student whose end date is smaller than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have an end date that is lower than the start date of alice", "student who finishes earlier than alice enrollment", "which student stopped before student alice started", "student whose end date is before start date of alice", "students who left before alice started", "which student has an end date smaller than the start date of alice", "who stopped school before alice started", "student who quit before alice was hired", "what students have an end date that is earlier than the start date of alice"]}, "city that is birthplace of employee whose end date is at least 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["birthplace of employees finishing in or after 2004", "what is birthplace of employee with last day in 2004 or later", "find the city of birth for all employees that quit in 2004", "find the birth city of employees who have an end date of 2004 or later", "find me the birthplace of employees who quit since 2004", "what city is the birthplace of an employee who quit after 2004", "what is the birthplace of an employee who left in 2004 or later", "where were people that stopped working in or after 2004 born", "places of birth of employees who quit their job in 2004 or later"]}, "student whose end date is at most 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find student with last day on 2004 or earlier", "what students have an end date that is no later than 2004", "find me students whose  end date is no later than 2004", "student whose end date is not after 2004", "which students left by the end of 2004", "a student ending before or during 2004", "people that finished school in or before 2004", "students who finished school by 2004", "which students graduate no later than 2004", "students finishing before or in 2004"]}, "gender that is gender of person whose birthplace is new york": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "paraphrases": ["what is the gender of the person born in new york", "find gender of persons born in new york", "what are the genders of people born in new york", "find the gender of people born in new york"]}, "person that two person is friends with": {"denotation": "(list (name en.person.2) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.31) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["people with only two friends", "what person has two friends", "what person has only two friends"]}, "employee whose start date is at least birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employees have a start date that is alices birthday or later", "an employee starting before or when alice was born", "find employees starting on or after alices birthdate", "employee whose start date is not after birth date of alice", "people that started working on or after alice was born", "employees who started on or after alices birthdate", "what employee has a start date that is no earlier than the birthdate of alice", "which employee started their job on alices birthday", "employees who started on or after alices birthday", "an employee who started on or after alices birthday"]}, "gender that is gender of student whose start date is at least 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the students of the same gender who were born in at least 2004 ", "whats the gender of students who started school after 2004", "what gender are people that started school in or after 2004", "what is gender of students who started in 2004 and later", "sex of people who began school in 2004 or later", "what is the gender of students with a start date 2004 or later", "what gender is the student who started in 2004", "what is the gender of the student who started in 2004", "gender of students who started in or after 2004", "what is the gender of students who strated no earlier than 2004"]}, "student whose end date is 2004 or 2010": {"denotation": "(list (name en.person.26) (name en.person.38) (name en.person.55) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school in 2004 or 2010", "find students with last day in 2004 or 2010", "which students graduated in 2004 or 2010", "which students graduate in 2004 or 2010", "find the students whose end date is either 2004 or 2010", "students who finish in 2004 or 2010", "student who does not graduate by 2004 or 2010", "find the names of all students who graduated between 2004 and 2010"]}, "relationship status that is relationship status of person whose birthplace is new york": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "paraphrases": ["what is the relationship status of people born in new york", "what is the person born in new yorks relationship status", "what are the relationship statuses of people born in new york", "what is the relationship status of people with the birth place as newyork"]}, "2004 or 2010": {"denotation": null, "formula": null, "paraphrases": ["either 2004 or 2010"]}, "person whose relationship status is person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["find all people with relationship status that is the same as the person that is 180 cm tall", "who has the same relationship status as the 180 cm tall person", "find me people who have the same relationship status of people who are 180 cm tall", "what is the relationship status of the person who is 180 cm tall", "find people having a relationship with people who are 180 cm tall", "find people with a height of 180 cm and their relationship status"]}, "gender that is gender of student whose start date is at most 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["sex of students that started school in 2004 or earlier", "gender of students starting contemporaneous to or before 2004", "what is the gender of the student who started in 2004 or earlier", "gender of student whose start date is not after 2004", "what is the gender of a person who started before 2004", "what genders are the people that started school in or before 2004", "whats the gender of students who started school before 2004", "what is the gender of students with a start date no later than 2004", "gender of people who started their study before 2005", "what is the gender of students who started no later than 2004"]}, "number of job title": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type))))", "paraphrases": ["number of jobs held", "how many job titles are there"]}, "person that is logged in and that is logged in": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.6) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "paraphrases": ["what person is online", "find all people that are currently online"]}, "employer of employee alice whose start date is 2004": {"denotation": "(list (name en.company.google) (name en.company.mckinsey))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "paraphrases": ["who did alice start working for in 2004", "who did alice start to work for in 2004", "who is alices employer since 2004"]}, "student that has the largest start date": {"denotation": "(list (name en.person.22) (name en.person.37) (name en.person.43) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find student with the latest starting date", "who started school most recently", "what student started last", "student whose start date is largest", "find students that have the latest start date", "student whose start date is the largest", "which students started school latest", "what student has the latest start date", "what student started earliest", "person who last joined the study"]}, "student whose start date is smaller than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students starting before 2010", "which students starte before 2004 or 2010", "students whose start date is smaller than 2004 and 2010", "what student started school before 2004 or 2010", "which student started earlier than 2004", "people that started school before 2004 or before 2010", "find students who have a start date before either 2004 or 2010"]}, "company that is employer of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["what is the employer of a person that is 180 cm tall", "who is the employer of the person who is 180 cm tall", "employers of all people who are 180 cm tall", "which company employees the person who is 180 cm tall", "which company employs people who 180 cm tall", "what company emplys a 180 cm tall person", "find company employing those who are 180 cm tall", "what companies employ people with a height of 180 cm", "who is the employer of the person whose height is 180 cm", "what company employs an 180 cm tall person"]}, "employee whose start date is at least 2004": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose start date is minimum 2004", "name an employee who began in 2004 or later", "which employee started in 2004", "people who stated working in 2004 or after", "find employees whose start date is 2004 or later", "employees joining before 2004", "find employees starting in 2004 and later", "employees starting in or after 2004", "fine me all employees who start by 2004", "people that started working in or after 2004"]}, "gender that is gender of student whose end date is smaller than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the gender of students with an end date ealier than 2004", "what is the gender of people that finished school before 2004", "whats the gender of the student that leaves before 2004", "gender of student who was a smaller date then 2004", "gender of students whose end date is before 2004", "what is gender of the student whose end date is before 2004", "find students of same gender who quit the job before 2004 ", "the gender of a student ending before 2004", "what are genders of students whose last day is before 2004"]}, "person whose height is 180 cm and that is height of alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "paraphrases": ["find friends who are 180 cm tall like alice", "name a person who is 180 cm tall the same height as alice", "which people are 180 cm tall and the same height as alice", "what people have a height of 180 cm and the height of alice", "who is the same height as alice at 180 cm", "find the people who are 180 cm tall", "find people with the same height as alice or 180 cm", "who is the same height as alice"]}, "person whose birthdate is start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))", "paraphrases": ["people born on the day alice started school", "people who were born the same day alice started school", "who was born on alices first day of school"]}, "employee whose job title is software engineer or program manager": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who works as a software engineer or manager", "find employees who have a job title that is neither software engineer or program manager", "employees who are software engineers or program managers", "which students are software engineers or program managers", "one worker who is a software engineer or program manager", "what employees are either software engineers or program managers", "who is software engineer or program manager", "employee who is a software engineer or program manager"]}, "student whose start date is start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students who began school at the same time as alice", "students who started on the same date as alice", "students starting at the same time as alice", "which students started the same day alice did", "people that started school when alice did", "what student started on the same day as alice", "student who shares start date with student alice", "people who joined the institution with alice", "what students have a start date that is the same as student alice", "which student began on the same day as student alice"]}, "person whose birthdate is 2004 and that alice is friends with": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["who is friends with alice and was born on 2004", "alices friends who were born in 2004", "what people are friends with alice and have a birthdate of 2004", "who was born after 2004 that is friends with alice", "which people have a birthdate of 2004 and are friends with alice", "find alices friends that were born in 2004"]}, "person whose height is at least 180 cm": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "paraphrases": ["what person has a height of at least 180 cm", "find a person who is 180 cm or taller", "people who are 180 cm or taller", "people who are at least 180 cm tall", "who is 180cm or higher"]}, "employee that has less than two job title": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which working people have less than two job titles", "which employee has less than two job titles", "what employee has fewer than two job titles", "what employee has less than two previous job titles", "find employees with fewer than two job titles", "employee with one job title", "find the employee that has less than two job titles", "which employees have fewer than 2 job titles", "find me employees with less than two job titles", "employees with less than two job titles"]}, "person that employee whose end date is smaller than 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.33) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who has friends with an end date that is before 2004", "find friends of employees whose last day is before 2004", "friends of people who quit their jobs before 2004", "who is friends with the person who quit before 2004", "find friends of people who quit their job before 2004", "find the friends of employees with an end date no later than 2004", "friend of someone who quit before 2004", "whos friends with someone who left a company or retired before 2004", "who is friends with the person who stopped working before 2004"]}, "end date of employee alice whose start date is 2004": {"denotation": "(list (date 2004 -1 -1) (date 2008 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "paraphrases": ["what was alices last day of her job from 2004", "alice started her job in 2004 when did she leave it", "what is the last date of employee alice who started in 2004", "when did alice who started working in 2004 finish working", "when did alice leave the job she started in 2004"]}, "relationship status that is relationship status of person whose gender is male": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "paraphrases": ["what is the relationship status of a male", "what is the relationship status of a friend of male", "whats the relationship status of people who are male", "which relationship statuses are claimed by the males in my network", "what is the males relationship status"]}, "student whose end date is larger than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students graduate after alice starts her new job", "people that stopped school after alice started working", "students who ended school after alice started working", "which students end date is greater than alices start date", "people who completed study before alice joined the job", "students who graduated after alices first work day", "find students who have an end date greater than the start date of employee alice", "find student with end date after alices start date", "a student who left before alice started"]}, "employee whose end date is smaller than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people that stopped working before alice started working", "employees who quit their job before alice started working", "which employees end date is earlier than alices start date", "find employee with last day before alices start date", "people who joined work after alice", "employee whose last date was before the day alice started", "show me all employees that leave the company before alice starts", "employee whose end date is before start ate of employee alice", "an employee who left the company before alice began with it", "find employees who have an end date earlier than employee alices start date"]}, "employee whose start date is larger than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employee who starts after alices last day", "people that started working after alice stopped working", "employees who joined after alice", "employees who started working after alice quit her job", "employee who has been here longer than alice", "find employees who have a start date later than that of the end date of employee alice", "which employees started after alices last day of work", "which employee started after alice quit", "which employee started after alice was hired", "employee whose start date is after the end date of employee alice"]}, "person that is friends with employee whose job title is not software engineer": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.41) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people who have friends who are not software engineers", "which people are friends with employess whose job title isnt softare engineer", "a friend of an employee that isnt a software engineer", "find employees friend with title other than software engineer", "friends of employees who are not software engineers", "friend of employee whose job title is not software engineer", "people who are friends with an employee who does not have the job title of software engineer", "people that are friends with employees other than software engineers", "people that are friends with a working person that isnt a software engineer", "people with friends who are not software engineers"]}, "employee whose start date is at least end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people that started working when alice stopped working or after", "what employee is starting by the time alice leaves the company", "find employees who have a start date that is at least the same as employee alices end date", "find employees starting on or after alices last day", "employee whose start date is minimum the end date of employee alice", "people who have joined before alice quits her job", "people who started after alice quit her job", "employees who started on or after alices last day", "employees starting on or after alice finishes", "which employee start after alice leaves"]}, "relationship status that is relationship status of person whose relationship status is single": {"denotation": "(list (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "paraphrases": ["whose relationship status is single", "is the person single", "find people who are single", "find all single people"]}, "start date of student alice whose end date is 2004": {"denotation": "(list (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "paraphrases": ["start date of alices study which ended in 2004", "who started school when alice graduated in 2004", "when did alice start going to the school that she graduated in 2004", "what date did alice quit studying in 2004", "which date did alice start who finished in 2004"]}, "employee whose employer is mckinsey or google": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.55) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people working with mckinsey or google", "which employees work for mckinsey or google", "what employees have mickinsey as their employer", "find me a list of employees who are employed by mckinsey or google", "people that work for mckinsey or google", "employee whose employer is either mckinsey or google", "what employee has an employer that is either mckinsey or google", "employee who works for mckinsey or google", "who works for mckinsey or google", "person who works at mckinsey or google"]}, "gender that is gender of student whose field of study is not computer science": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["gender of student whose field of study is not computer science", "whats the gender of the students who are not studying computer science", "gender of students who are not studying computer science", "find the gender of students who have a field of study in something other than computer science", "what is the gender of people studying something other than computer science", "what are genders of students not studying computer science field", "gender of people studied in fields other than computer science", "the gender of a student that isnt in computer science", "gender of a student who does not study computer science", "find the gender of students whose field of study is not computer science "]}, "person that is friends with alice and that is logged in": {"denotation": "(list (name en.person.3) (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "paraphrases": ["alices online friends", "what person that is online is friends with alice", "any friend of alice that is logged in", "friends of alice that are currently online"]}, "single or married": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married))", "paraphrases": ["is this person single or married", "is the person single or married", "either single or married"]}, "brown university or ucla": {"denotation": "(list (name en.university.brown) (name en.university.ucla))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))", "paraphrases": ["people that studied at brown university or ucla", "find people who went to brown university or ucla", "either brown university or ucla", "ulca or brown univercity"]}, "person whose relationship status is single and that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "paraphrases": ["who is single and is friends with alice", "find alices singlestatus friends", "alices friends who are single", "people who are single and friends with alice", "find single people who are friends with alice", "name a single person who is friends with alice", "what people have a relationship status of single whom are also friends with alice"]}, "person that student whose start date is at least 2004 is friends with": {"denotation": "(list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.51) (name en.person.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the friends of people who joined their studies after 2004", "who is friends with the person who started school during or after 2004", "who is friends with the student who began school no later than 2004", "what students have a start date that is 2004 or later and who are their friends", "who is friends with students who start date is 2004", "find friends of students who started in 2004 and after", "people with friends who started university in 2004 or later", "who is the student whose start date is at least 2004 friends with", "a friend of a student who started at least 2004"]}, "student whose university is not brown university": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student is not from brown university", "people that study or studied anywhere but brown university", "find students who are not part of brown university", "a student that doesnt attend brown university", "which student goes to another university besides brown", "which students do not attend brown university", "which student does not attend brown university", "people who studied in universities other than brown university", "student not studying at brown", "find student not attending brown university"]}, "person that has the most number of relationship status": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string relationship_status)))", "paraphrases": ["what person hast the most number of relationship statuses", "who has had the most different relationship statuses", "who has the most relationship statuses"]}, "number of field": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))", "paraphrases": ["what is the number of the field", "how many students in this field", "how many fields are there", "either number of field"]}, "person whose height is 180 cm and whose field of study is computer science": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "paraphrases": ["person whos 6 feet tall and studies computer science", "people who are 180 cm tall and study computer science", "what people have a height of 180 cm and field of study that is computer science", "who is 180 cm and is in the field of computer science", "person who is 180 cm tall with computer science as field of study", "who is a person whose field of study is computer science and whose height is 180 cm", "who studying computer science is 180 cm tall", "who is 180 cm tall and is studying computer science", "which computer science students are 180 cm tall", "all 180 cm tall people who studied computer science"]}, "person that is friends with person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["a friend of someone 180 cm tall", "find friends of people who are 180 cm tall", "find friends that have friends that are 180 cm tall", "who are the friends of person who is 180 cm tall", "name a person friends with a person that is 180 cm tall", "what people are friends with a person whose height is 180 cm", "who is friends with a person whose height is 180 cm", "who is friends with the person who is 180 cm tall"]}, "person that student whose start date is at most 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.51) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find students with a start date no later than 2004 and their friends", "who has friends with students that have a start date of 2004", "friends of people who became students in 2004 or earlier", "who is friends with someone who enrolled in school during or before 2004", "find friends of people who started school in 2004 at the latest", "who is the student whose start date was at least 2004 friends with", "name a friend of the student who started no later than 2004", "connections of friends who started dating before 2004", "friends of people who joined their studies before 2005"]}, "end date of student alice whose field of study is computer science": {"denotation": "(list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "paraphrases": ["alices graduation date in computer science", "when did alice graduate after studying computer science", "when did alice finish studying computer science", "alice whose field of study is computer science ended on what date", "when did student of computer science alice finish"]}, "person that is friends with the most number of person": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["who has most friends", "people with the most friends", "person with the most friends"]}, "city that is birthplace of employee whose start date is larger than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["where were the people that started working after 2004 born", "what city was the employee that started after 2004 born in", "birth city of employee whose start date is after 2004", "birthplaces of employees who started after 2004", "in which cities were employees who started working after 2004 born", "what are the birthplaces of employees starting after 2004", "cities of employees who were hired after 2004", "what city is the birthplace of an employee who has a start date later than 2004", "find the birth city of employees with a start date later than 2004", "find birthplaces of employees who started after 2004"]}, "person whose gender is male or female": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))", "paraphrases": ["find someone of any gender", "is the person male or female", "people that are male or female", "people who are male or female"]}, "gender that is gender of person that is logged in": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "paraphrases": ["genders of people that are currently online", "what is the gender of the person who is logged in", "what gender is the online person", "find the gender of everyone currently online", "find people of the same gender as the person logged in"]}, "number of university": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))", "paraphrases": ["what is total number of univeristies", "find phone number of university", "what is the universitys number", "university number"]}, "employee whose end date is larger than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees whose end date is after alices end date", "employee whose end date is before after end date of employee alice", "find employees with last day after alices", "what employee has an end date no later than the end date of alice", "who is the employee leaving the company after alice leaves", "which employees last day was after alices last day", "people that stopped working after alice did", "what employees have an end date that is later than that of employee alice"]}, "employee whose start date is at most 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who started before 2010", "which employee started no later than 2004 or 2010", "employees who started working in or before 2010", "people that started work in or before 2004 or in or before 2010", "find me all employees whore start date is either 2004 or 2010", "name an employee who started in 2004 but before 2011", "employees who began working either by 2004 or 2010", "find employees starting in 2010 or earlier", "find me a list of employees whose start date was in 2004 or 2010"]}, "student whose start date is end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students with a start date the same as employee alices end date", "students who began school the same day alice quit her job", "students that will begin to work on the same day alices leaves her job", "students who started after alice quit her job", "people that started school when alice stopped working", "which student started school on the last day alice worked", "what students have a start date that is the same as the end date of alice", "students who started school when alice quit her job", "student whose start date is end date of employee alice", "what student started the day alice quit"]}, "employer of employee alice whose employer is mckinsey": {"denotation": "(list (name en.company.mckinsey))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "paraphrases": ["is alice employed by mckinsey", "does alice work at mckinsey", "who is alices employer"]}, "student whose end date is at least end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students graduate no sooner than alices first day of work", "student whose end date is not before end date of employee alice", "what students have an end date that is equal to or greater than the end date of employee alice", "student who left with or after alice", "a student who left at the same time as alice or before", "people that stopped school when alice stopped working or after", "which students last day was the around the same day as alices last day", "who quit at the same time or after alice did", "students whose quit date of job is same as employee alices ", "students finishing contemporaneous to or after alice"]}, "employer of employee alice whose end date is 2004": {"denotation": "(list (name en.company.google) (name en.company.mckinsey) (name en.company.toyota))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "paraphrases": ["find who alice worked for in 2004", "who was employer of alice who finished in 2004", "who did alice work for when she quit her job in 2004", "who did alice quit working for in 2004", "which employer of alices ended in 2004"]}, "person whose height is 180 cm and that is logged in": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "paraphrases": ["people who is taller then 180 cm logged in", "who is online that is 180 cm tall", "who is online and is 180 cm tall", "find people who are 180 cm tall and logged in", "who has a height of 180 and is logged in", "what person is 180 cm tall and is currently online", "find me all people who are 180 cm tall and currently online", "what people are logged in with a height of 180 cm", "what online person is 180 cm tall"]}, "city that is birthplace of student whose end date is larger than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the birth city of students with an end date later than 2004", "what cities were students born in who started after 2004", "birth place of people who completed education after 2004", "what cities are the birthplace of students later than 2004", "where were the people that finished school after 2004 born", "birthplace of students whose end date is after 2004", "what city was the student born in that has 2004 as end date"]}, "person whose birthdate is 2004 and whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["person born in new york in 2004", "people who were born in 2004 and born in new york", "find me a person born in 2004 in new york", "who is born in 2004 at new york"]}, "person that has less than two relationship status": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "paraphrases": ["relationship history of a person", "who has less than two relationship status", "person who hasnt been in 3 relationships", "which people have less than two relationship statuses", "people with only one relationship status"]}, "relationship status that is relationship status of employee whose job title is not software engineer": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of working people that are not software engineers", "what is the relationship status of everyone who is not a software engineer", "what is the relationship status of employees whose job title is not software engineer", "relationships statuses of employees who dont work as software engineers", "relationship status of employee whose job title is not software engineer", "relationship status of nonsoftware engineers", "what is the relationship status of an employee who is not a software engineer", "find the relationship statuses of employees who do not have the job title of software engineer", "what is the relationship status of one employee whos not a software engineer", "whats the relationship status of employees who are not software engineers"]}, "person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["people 180 cm tall", "name someone who is 180 cm tall", "a 180 cm tall person", "people who are 180 cm tall", "who is 180 cm tall", "what person is 180 cm tall", "find people with a height of 180 cm"]}, "person whose birthdate is at least birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "paraphrases": ["who is younger than or same as alic", "find people with same birth date as alice or later", "find people born the same day or later than alice", "find me a person with the same or later birthday as alice", "people who were born the same day as or after alice"]}, "relationship status that is relationship status of employee whose end date is smaller than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is thre relationships status of employees whose last day was before 2004", "which employee has the same relationship status as the employee who started earlier than 2004", "relationship status of employee whose end date is before 2004", "relationship status of employees who finish before 2004", "what is the relationship status of employees who quit before 2004", "what is the relationship status of people that stopped working before 2004", "find the relationship status of employees with an end date earlier than 2004", "what is the relationship status of a worker who left before 2004", "relationship statuses of employees who quit their job before 2004", "what is the relationship status of employees who left before 2004"]}, "employee whose start date is smaller than 2004": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["an employee starting before 2004", "employee whose start date is before 2004", "employees who started before 2004", "which employee started earlier than 2004", "people that started working before 2004", "which employees strated before 2004", "employee who joined before 2004", "employees who joined before 2004", "find employees who have a start date earlier than 2004", "find employees starting before 2004"]}, "city that is birthplace of student whose start date is at least 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the birthplace of the student who started in 2004", "what is the birthplace of students who started no earlier than 2004", "where were the people that started school in or after 2004 born", "find the birth cities of students who have a start date in 2004 or greater", "birth place  of students whose start date is smaller than 2004 and 2010", "what is the birthplace city of student that was enrolled by 2004", "students birthplace who started on or after 2004", "where is the birthplace of the student who started before 2004", "find birthplaces of students starting in 2004 and later"]}, "alice or bob": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob))", "paraphrases": ["find alice or bob", "person whose name is alive or bob", "either alice or bob"]}, "job title of employee alice whose employer is mckinsey": {"denotation": "(list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "paraphrases": ["what was alices job title while working for mckinsey", "what is the job title of alice who works for mckinsey", "what is the job title of alice whose employer is mckinsey", "what is alices job title while working for mckinsey", "what is alices job title at mckinsey"]}, "relationship status that is relationship status of student whose end date is smaller than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["relationship status of students finishing before 2004", "what is the relationship status of students who graduated before 2003", "relationship status of student whose end date is before 2004", "what is the relationship status of people that finished school before 2004", "what is the relationship status of students with an end date earlier than 2004", "what is the relationship status of a student whose end date is earlier than 2004", "what is relationship status of student with last day before 2004", "what is the students relationship status who ended earlier than 2004", "whats the relationship status of the student leaving prior to 2004", "relationship status of students whose end date is before 2004"]}, "employee whose start date is smaller than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employe that has a smaller start date than alice", "employee whose start date is before the start date of employee alice", "which employees started employment before alice", "which employee started before alice", "find employees who have a start date earlier than that of employee alice", "people who joined work before alice", "people that started working before alice did", "what employees before working before alice", "employees who started their job before alice"]}, "student whose start date is end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is end date of student alice", "students who started on alices end date", "a student starting when alice ends", "people that started school when alice stopped", "find students who have a start date equal to student alices end date", "find students starting on alices last day", "people who joined study on the day alice completed", "which students starte school the same day alice graduated"]}, "gender that is gender of alice or bob": {"denotation": "(list (name en.gender.female))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["find people with the same gender as alice or bob", "what is alice and bobs gender", "find me all people with the same gender as alice or bob", "which genders are alice and bob", "what is the gender of alice or bob"]}, "city that is birthplace of person whose gender is male": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "paraphrases": ["find the birthplaces of people who are male", "what city was the male born", "what cities were the males in my social network born in", "find birthplace of males"]}, "person that is friends with employee whose end date is larger than 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.35) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find friends of employees who quit the job after 2004 ", "people that are friends with someone that stopped working after 2004", "what people are friends with employees who have an end date later than 2004", "a friend of an employee that ends after 2004", "find the friends of people who quit their job after 2004", "friend of emmployee whose end date is after 2004", "people who are friends with an employee that started later than 2004", "find employees friends with last day after 2004", "people who are friends with the employees leaving the company after 2004", "person who is a friend of an employee that has worked since 2004"]}, "student whose end date is smaller than birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.22) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school before alices birthdate", "students whose end date is before the birthdate of alice", "people who completed their study before alice was born", "what student stopped before alice was born", "which students graduated before alices birthdate", "student whose end date is before birth date of alice", "students who graduated before alice was born", "what students have an end date that is before the birthday of alice", "students who finish before alices birthday"]}, "person whose birthplace is new york and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["what people have a birthplace of new york and a height of 180 cm", "find everyone born in new york who is 180 cm", "find people who were born in new york who are 180 cm tall", "person born in new york and who is 180 cm tall", "people who are born in new york and are 180cm tall", "all 180 cm tall people who were born in new york", "who was born in new york and is 180 cm tall", "people who are born in new york and are 180 cm tall"]}, "employee whose job title is job title of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose job title is same job title as of employee alice", "find employee with same job title as alices", "what employees have the same job title as alice", "employees who share the same job titles as alice", "employees with the same job title as alice", "who has the same job as alice", "employees who have the same job title as alice", "how many employees share alices job title", "what employees have jobs whose title is the same as employee alice"]}, "gender that is gender of more than two person": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["find the gender that more than two people share", "what gender is more than two people", "what gender is claimed by more than two people", "what gender has more than two people"]}, "employee whose start date is at most 2004": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["one worker who began in 2004 or before", "people that started working in or before 2004", "find the people who joined their work before 2005", "what employees have a start date no later than 2004", "which employees started no later than 2004", "an employee that starts during or before 2004", "employees who began working by 2004", "find employees who started in 2004 or before", "employee who joined before 2005", "employee whose start date is not after 2004"]}, "person that alice is friends with and that is logged in": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "paraphrases": ["find people who are logged in who are also friends with alice", "which friend of alice is online", "find alices friend who is logged in", "who is alice friends with that is logged in", "who is online and friends with alice", "what online person is alice friends with", "find all of alices friends that are currently online", "a friend of alice that is logged in"]}, "relationship status that is relationship status of student whose start date is at most 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["relationship status of students who joined before 2005", "what is the relationship status of a student who began at 2004 or before", "what is the relationship status of students who stated before 2004", "whats the relationship status of student who was born in at most 2004 ", "find relationship statuses of students who have a start date no later than 2004", "what is the relationship status of people that started school in or before 2004", "what is thre relationship status of students who started no later than 2004"]}, "person whose height is smaller than 180 cm or 200 cm": {"denotation": "(list (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "paraphrases": ["person who is shorter than 180 cm or 200 cm", "what persons height is shorter than 180 to 200 cm", "people that are shorter than 180 cm", "find someone shorter than 200 cm"]}, "city that is birthplace of employee whose job title is not software engineer": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["birth city of employee whose job title is not software engineer", "what is the birthplace of employees whose job title isnt software engineer", "birth places of employees other than software engineers", "city of birth for all non software engineers", "where were the working people that are not software engineers born", "where were employees who are not software engineers born", "find me an employees city of birth excluding any software engineers", "find birth cities of employees who have a job title that is not software engineer", "in what city was the employee who is not a software engineer born", "what city is the birthplace of an employee that is not a software engineer"]}, "person that has at least two relationship status": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "paraphrases": ["people that have two or more relationship stutuses", "who has at least two relationship status", "who has two or more relationship status", "who has two or more relationship statuses at once", "find people with at least two relationship statuses", "what people have at least two relationship statuses", "name a person in at least two relationships", "person with minimum two relationship statuses", "find people with two or more relationship statuses"]}, "relationship status that is relationship status of student whose end date is at most 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["relationship statuses of students who ended school in or before 2004", "what is the relationship status of people that stopped school in or before 2004", "whats the relationship status of the student leaving his job by 2004", "whats the relationship status of students who graduated before 2004", "what is the relationship status of the student who finished before 2004", "find relationship statuses for students with an end date that is no later than 2004", "relationship status of student that left school before or on 2004", "what is the relationship status of a student whose end date is no later than 2004"]}, "person whose height is not 180 cm": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "paraphrases": ["what person doesnt have the height of 180 cm", "who is not 180cm tall", "find me a person who is not 180cm tall", "people that are not 180 cm tall", "people who are shorter than 180 cm"]}, "employee whose end date is larger than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees whose last day was after alice started school", "what employees have an end date that is later than the start date of student alice", "employees whose end date is later than alices start date", "which employee ended no greater than alices start date", "an employee ending before alice starts", "employee whose end date is after student alices start date", "find employees whose last day is after student alices first day", "people that stopped working after alice started school", "what employee has an end date later than the start date of alice"]}, "employee whose end date is at most start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees with last day on or before alices first day", "people who finished working when alice started or before", "employees who quit before alice joined", "employees who finished before alice started", "find employees whom have a end date that is no later than the start date of employee alice", "which employees last day is no later than alices first day", "employees who finish when or before alice starts"]}, "person that is friends with employee whose start date is at most 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.25) (name en.person.3) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people who are friends with employees who started before 2004", "find people who are friends with employees who have a start date of no later than 2004", "what person is friends with an employee who has a start date no later than 2004", "friends of employees who start before or in 2004", "friend of employee whose start date is at most 2004", "name a person that is friends with an employee who started no later than 2004", "people that are friends with someone that started working in or before 2004", "person that has an employee friend who starts to work by 2004", "find employees friends who started in 2004 or before"]}, "field of study of student alice whose end date is 2004": {"denotation": "(list (name en.field.computer_science) (name en.field.economics) (name en.field.history))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "paraphrases": ["what is the field of study of alice who finished in 2004", "field of study of alice ended in 2004", "what did alice stop studying in 2004", "what did alice study in 2004", "what did alice study when she graduated in 2004"]}, "relationship status that is relationship status of student whose university is not brown university": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the relationship status of students whose university is not that of brown", "relationship statuses of students that dont go to brown university", "what is the relationship status of did not attend brown university", "relationship status of student who is not student of brown university", "relationship status of students who are not studying at brown university", "what is the relationship status of people going to any university but brown", "whats the relationship status of all students except those from brown university", "what is the relationship status of students who are not at brown", "what is the relationship status of students who are not brown university students", "what is the relationship of the student who did not attend brown university"]}, "person whose gender is male and that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "paraphrases": ["find the male friends of alice", "name a male who is friends with alice", "alices male friends", "find me all of alices guy friends", "find all male friends of alice", "which men is alice friends with", "find me one of alices male friends", "who is male and friends with alice"]}, "student whose end date is larger than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school after alice started school", "find students whose last day is after alices first day", "which student left after student alice started", "students who finish after alice starts", "student whose end date is after start date of student alice", "find me the student who left school before alice started", "a student ending after alice starts", "what students have a end date that is after the start date of student alice", "which students graduate after alice started school", "what student has an end date that is later than the start date of alice"]}, "person that less than two person is friends with": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what person has less than two friends", "find a person with less than two friends", "which people have less than two friends", "people who have less than two friends"]}, "student that has the least number of university": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find student who attended the fewest universities", "which students attended the fewest universities", "a student who has studied at the fewest universities", "which students went to the smallest amount of universities", "student who has minimum number of universities", "which student has attended the fewest universities", "who studied at the least number of universities", "find students that have the fewest universities", "what students have been at college for the least amount of time"]}, "gender that is gender of at most two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["which gender do no more than 2 people identify as", "what is the gender of one or two individuals", "what is the gender that is the gender of at most two people", "gender which is gender of less than three persons", "find the gender of no more than two people", "what is the gender of max two people", "what gender has two or fewer people", "what is the gender of no more than two people"]}, "person whose height is 180 cm and that is birthdate of alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "paraphrases": ["what people share the birthdate of alice and have a height of 180 cm", "a person 180 cm tall and has same birthdate as alice", "who is 180 cm tall and has the same birth date as alice", "who shares a birthday with alice and is 180 cm tall", "find people with alices birthday who are 180 cm tall", "find people who share the same birthday as alice and are 180 cm tall", "who is 180 cm tall and has the same birthdate as alice", "180 cm tall persons who share birthdate with alice"]}, "employee whose start date is larger than 2004": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who started after 2004", "people that started working after 2004", "find employees starting after 2004", "find employees with a start date that is later than 2004", "which employee started after 2004", "what employees started after 2004", "an employee that started before 2004", "what employees started work after 2004", "people who joined their job after 2004", "employee whose start date is after 2004"]}, "person that has the smallest birthdate": {"denotation": "(list (name en.person.38) (name en.person.41) (name en.person.46) (name en.person.53) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "paraphrases": ["find the youngest person", "find me the oldest person", "who is the oldest person in my network", "who is youngest"]}, "birthdate of alice": {"denotation": "(list (date 2003 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))", "paraphrases": ["what is alices date of birth", "what is the birth date of alice", "when was alice born", "what is alices birthdate"]}, "gender that is gender of student whose end date is not 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the gender of a student whom has the end date not equal to 2004", "what genders are the people that stopped school in any year but 2004", "genders of students not finishing in 2004", "what is the gender of students who did not graduate in 2004", "was the student who graduated before 2004 a male or a female", "what is students gender with last day other than 2004", "gender of student whose end date is not 2004", "gender of student who does not finish by 2004", "what is the gender of a student whose end date is not 2004", "what is the gender of the students who dont graduate in 2004"]}, "start date of employee alice whose start date is 2004": {"denotation": "(list (date 2004 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "paraphrases": ["what day did alice start her job in 2004", "alices 2004 employment start date", "what is alices exact start date in 2004", "when did alice start being an employee", "what day in 2004 did alice start working"]}, "person that is friends with student whose start date is larger than 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what people are friend with students who have a start date later than 2004", "who is friends with a student who started", "find persons who are friends with students who started after 2004", "find students friend who started after 2004", "what person is a friend of a student that started after 2004", "friend of student whose start date is after 2004", "people that are friends with someone that started school after 2004", "people who are friends with students who started school in 2005 or later", "who is friends with the student that started after 2004", "which people are friends with students who started after 2004"]}, "person whose birthdate is at least end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "paraphrases": ["person born on or after end of alices employment", "people who were born on or after the day alice quit her job", "who was born on or after alices last day of employment", "people born on or after the day alice quit working"]}, "person that employee whose end date is at most 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.33) (name en.person.4) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["friends of people who quit their jobs before 2005", "friend of employee whose end date is at most 2004", "which friends stopped working in 2004", "who is friends with employees that have an end date of 2004", "find friends of employees with end date in 2004 or earlier", "find people who are employees with an end date no later than 2004 and their friends", "find friends of people who quit work in 2004 at the latest", "name a person who quit no later than 2004", "who is friends with the person who stopped working in 2004"]}, "employee whose end date is at least start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees finishing when or after alice starts", "find employees whose end date is the start date of student alice or later", "employees leaving the company no earlier than alices start date", "which employee finished the same time alice started", "employee who left on or after alice joinde", "people that stopped working when alice started school or after", "employees who quit their job the same day or after alice started school", "name an employee who left after alice started"]}, "relationship status that is relationship status of at least two person": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["relationship status of at least two people", "people with relationship status of at least two people", "whose relationship status is not a unique", "which relationship status is claimed by at least two people"]}, "employee whose employer is not mckinsey": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.42) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose employer is not mckinsey", "find employees not with mckinsey", "employees not working for mckinsey", "employee who is not employed by mckinsey", "a worker whose company isnt mckinsey", "what employees are not employed by mickinsey", "which employees are not employed by mckinsey", "who works for someone other than mckinsey", "who doesnt work for mckinsey", "employees that are not employed by mckinsey"]}, "student that has at most two university": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that studied at at most two universities", "which student has at least 2 university to go to", "what students are part of two universities", "student with not more than two universities", "find students who attended one or two universites", "student that has studied at no more than 2 universities", "which students went to no more two universities", "a student with two or less universities"]}, "student whose start date is larger than 2004 or 2010": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["a student who started before 2004 or 2010", "what students began school either after 2004 or 2010", "students who started after 2004 or 2010", "which students started after 2004 or 2010", "people that started school after 2004 or after 2010", "people who joined the institution after 2004", "find students with a start date after either 2004 or 2010", "students starting after 2004"]}, "person that is friends with student whose start date is at most 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is friends with students whos start date is at most 2004", "who is friends with a student who started before 2004", "a person whose friend started on or before 2004", "what people are friends of students who have a start date no earlier than 2004", "who is friends with students starting before on in 2004", "person who is friend of a student who starts at most by 2004", "people that are friends with someone that started school in or before 2004", "what people are friends with students who have a start date no later than 2004", "who is friends with students who started before 2004"]}, "relationship status that is relationship status of employee whose end date is at most 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["list the relationship status of people who quit their jobs before 2005", "whats the relationship status of employees who started work before 2004", "find relationship status of employee with last day in 2004 or before", "relationship status of employee whose end date is not after 2004", "relationship status of employees whose end date is no earlier than 2004", "whats the relationship status of the employee with an end date no later than 2004", "find the relationship statuses of employees who have an end date that is no more that 2004", "what is the relationship status of an employee that stopped working on or before 2004", "what is the relationship status of people that stopped working in or before 2004"]}, "person that person whose gender is male is friends with": {"denotation": "(list (name en.person.10) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "paraphrases": ["friends of male people", "who is friends with a person who gender is male", "who are men friends with", "find the people who are friends with males", "who is friends with the male", "find people with a gender of male and their friends", "find all males who have friends", "friends of males", "find friends of males"]}, "relationship status that is relationship status of more than two person": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what relationship status is claimed by more than two people", "find me at least two person with the same relationship status", "find people with a relationship status that more than two people have", "find me all people with relationship status of two people", "what is the relationship status of the majority of people"]}, "employee whose start date is at least 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who started in either 2004 or 2010", "employees who started working in or after 2004", "which employee has a start date of at least 2004", "people that started working in or after 2004 or in or after 2010", "which employees have a start date between 2004 and 2010", "employees who began working in or after 2004 or 2010", "which employees started no sooner than 2004 or 2010", "employees starting after 2004"]}, "student whose field of study is computer science or history": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students whose fields are computer science or history", "who are the students studying computer science or history", "which student studied computer science or history", "which students field of study is computer science of history", "who is studying computer science or history", "student whose field of study is either computer science or history", "which students major in computer science or history", "what students have their field of study in computer science of history", "find the students that studied either computer science or history", "students studying either computer science or history"]}, "person whose birthdate is start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))", "paraphrases": ["people who have a birthday on the same day alice started her job", "people that were born on the day alice started work", "people who are born the same day alice started her job", "who was born on alices start date", "who was born on start date of alice"]}, "employee whose end date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who dont finish in 2004", "people that did not stop working in 2004", "which employees had a quit date that was not in 2004", "employee whose end date is not 2004", "people whose end date is not in 2004", "find employees with last day not in 2004", "what employee has an end date that is not in 2004", "which employees last day was not n 2004", "which employee worked before 2004", "find employees with an end date that is not 2004"]}, "city that is birthplace of employee whose end date is not 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["birth city of employees whose end date is not 2004", "what is the birthplace of employees whose last day was not in 2004", "what is the birth city of employees with an end date that is not 2004", "where were working people that did not stop in 2004 born", "the birthplace of an employee not ending in 2004", "what is the birthplace of the employee who didnt start in 2004", "find the birthplace of employees whose last day is not in 2004", "birthplaces of employees not finishing in 2004", "what city is the birthplace of an employee whose end date is not in 2004", "birth city of employee whose end date is not 2004"]}, "person that is friends with at least two person": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["who has minimum two friends", "person who has two or more friends", "person with more then two people"]}, "student whose end date is at most end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students who have an end date that is no greater than student alice", "people who completed studies with or before alice", "students who finish before alice", "name a student who will graduate no later than alice", "what student has an end date no later than the end date of alice", "student whose end date is not after end date of student alice", "students who graduated no later than the day alice did", "this student who finishes school at al most the same time as alice", "find students with last day before or same as alices", "people that stopped school at the same time or before alice did"]}, "person whose height is smaller than height of alice": {"denotation": "(list (name en.person.18) (name en.person.35) (name en.person.4) (name en.person.5) (name en.person.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "paraphrases": ["find people shorter than alice", "people shorter than alice", "people who are shorter than alice", "find someone shorter than alice", "who is shorter than alice"]}, "student whose start date is at least start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that started school when alice started work or after", "students whose start date is no earlier than alices", "find students with a start date of employee alice or greater", "which students started no later than the day alice started work", "who are the students starting at the same time or before alice starts", "ppeople who joined studies after alice joined the job", "student whose start date is not before start date of employee alice"]}, "person whose birthplace is new york and that is friends with alice": {"denotation": "(list (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "paraphrases": ["find people born in new york that are friends with alice", "what person was born in new york and is friends with alice", "people who are friends with alice and born in new york", "which one of alices friends was born in new york"]}, "city that is birthplace of student whose start date is smaller than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["where were people that started school before 2004 born", "birthplaces of people joined studies before 2004", "what city were students born in that started before 2004", "birthplace of students who start before 2004", "what are the students birthplaces who started before 2004", "birthplace of students born before 2004", "birth city of all students who started earlier than 2004", "what are the birth cities of students with a start date before 2004"]}, "employee whose end date is at least 2004 or 2010": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people that stopped working in or after 2004 or in or after 2010", "employees who quit their job in or after 2004", "what employees left their jobs either in or after 2004 or 2010", "employed until 2004 or 2010", "which employee has an end date of at least 2004", "which emloyees had their last no earlier than 2004 or 2010"]}, "student whose start date is start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["one student who started on the same day as employee alice", "which students started at the same time the employee alice did", "students who start with alice", "students who began school on the same day alice started working", "student whose start date is start date of employee alice", "who started school when alice started working", "find students starting the same day as alice", "which students start school the same day alice starts work", "find students who have a start date the same as employee alice"]}, "student whose end date is larger than 2004 or 2010": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.56) (name en.person.59) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school after 2004 or after 2010", "students who finish after 2004", "show me all students that will leave in 2004 or oe 2010", "student who joined after 2004", "students whose end date is larger than 2004 and 2010", "which students ending date is greater than 2010", "which students graduated after 2004 or 2010", "find students whose end date is either greater than 2004 or 2010", "find students finishing after 2004"]}, "university of student alice whose university is brown university": {"denotation": "(list (name en.university.brown))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "paraphrases": ["find out if alice attended brown university", "find students from brown university", "is alice going to brown university"]}, "person whose birthdate is 2004 and that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "paraphrases": ["find all people born in 2004 that are friends with alice", "find people born in 2004 who are friends with alice", "people who are friends with alice and born in 2004", "whose birthdate is 2004 that is friends with alice", "who was born in 2004 and is friends with alice", "what people with a birthdate of 2004 are also friends with alice"]}, "person whose height is larger than 180 cm or 200 cm": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "paraphrases": ["find me all people are are taller than 180 cm", "find a person who is taller than 180 cm", "people that are taller than 200 cm", "people who are taller than 180 cm or 200 cm"]}, "gender that is gender of student whose end date is at most 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["gender of student whose end date is not after 2004", "what gender is the student that graduated by 2004", "genders of students finishing before 2004", "what is the gender of the student that graduated before 2004", "find the gender of students whose end date is no later than 2004", "what gender are the people that finished school in or before 2004", "give me the genders of the students who graduate in 2004 or sooner", "what is the gender of students with last day in 2004 or before", "what is the gender of the student who left by 2004"]}, "relationship status that is relationship status of employee whose start date is not 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of an employee who didnt start in 2004", "relationship status of employees who didnt start in 2004", "what are the current relationship statuses of employees who have a start date that is anything but 2004", "what is the relationship status of the employee that did not start in 2004", "what is the relationship status of working people that did not start in 2004", "what is the relationship status of employee whose start date is not 2004", "what is the relationship status of employees who did not start in 2004", "what is relationship status of employees with start dates other than 2004", "relationship status of employees who did not start in 2004"]}, "student that has the smallest start date": {"denotation": "(list (name en.person.11) (name en.person.16) (name en.person.4) (name en.person.45) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["who started school the earliest", "person who first joined his study", "who started first", "find student who started first", "which students have the earliest start date", "which student started earliest", "student whose start date is the smallest", "what student hast the earliest start date", "what students have the earliest start date"]}, "gender that is gender of person that alice is friends with": {"denotation": "(list (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "paraphrases": ["find people of the same gender as alices friends", "find the gender of alices friends", "what is the gender of alices friend", "what genders are the people whom alice is friends with", "what is the gender of the person alice is friends with", "people who are th gender of alices friends", "gender of alices friends"]}, "person whose birthdate is smaller than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "paraphrases": ["people that were born before alice started school", "person who was born before alice start date", "people who were born before alice started school", "persons born before start date of alice", "who was born on a date before alices start date"]}, "person that is logged in and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["find people who are logged in with a height of 180 cm", "180 cm tall person who is logged in", "people who are 180 cm tall and are currently online", "name the person with a height of 180 cm who is logged in", "current users who are 180 cm tall", "find people logged in who are 180 cm tall", "name a person who is online who is 180 cm tall"]}, "student whose start date is at most 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that started school in or before 2004 or in or before 2010", "find students starting 2010 or before", "people who joined their studies before 2011", "find students who have a start date that is either 2004 or 2010", "find students who started no later than 2004 or 2010", "what students had a start date of 2004 or 2010", "students who started in or before 2004 or 2010", "a student that started between 2001 and 2010", "which students attended between 2004 and 2010"]}, "person whose height is 180 cm and whose end date is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["find people 180 cm tall with 2004 end dates", "someone 180 cm tall who stopped in 2004", "find people with a height of 180 and an end date of 2004", "what people have an end date of 2004 and height of 180 cm", "find people who are 180 cm tall with last day in 2004", "find people who are 180 cm tall and quit in 2004", "which people with an end date of 2004 are 180 cm tall", "who stopped working in 2004 and is 180 cm tall", "people who are 180 cm tall and left their job in 2004", "all 180 cm tall people who quit in 2004", "who is 180 cm tall and has an end date of 2004", "whos end date is 2004 and is 180 cm tall", "people who are 180 cm tall before 2004", "people who are 180 cm tall and quit in 2004", "name a person who is 180 cm tall and who quit in 2004", "180 cm tall persons who quit in 2004", "what person who ended in 2004 is 180 cm tall", "name a person 180 cm tall who quit in 2004", "who measures 180 cm and quit in 2004"]}, "person that is friends with student whose start date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what people are friens with students that have a start date not equal to 2004", "friends of students who joined in years except 2004", "people who are friends with the new employee that will be starting before before or after 2004", "which people are friends with students who did not start in 2004", "a friend of a student not starting in 2004", "people that have a friend that started school in a year other than 2004", "find students friends who started in a year other than 2004", "people who are friends with a student who did not start in 2004", "friends of students not starting in 2004"]}, "person whose height is 180 cm and whose relationship status is single": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["people who are 180 cm tall and are single", "find people who are 180 cm tall and single", "single people who are 180 cm tall", "singles who are 180 cm tall", "who is 180 cm tall and single", "find people with a relationship status of single and a total height of 180 cm", "which singles are 180 cm tall"]}, "person that is friends with two person": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["which person has two friends", "what person has more than two friends", "find people that have two friends", "who has two friends"]}, "student whose start date is smaller than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students started before alice", "people that started school before alice started working", "what students have a start date earlier than that of employee alice", "what students began school before alice began working", "find the people who joined studies before alice joined work", "students who started school before alice started her job", "student who was a smaller start date than alice", "students who started before alices start date", "which student started before alice"]}, "employee whose start date is at most start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees who have a start date that is no greater than that of employee alice", "employee who started before start date of employee alice", "people that started work when alice did or before", "who started working up until alice started working", "employees who started before alice", "employees who began working by the time alice started working", "find employees starting before or on same day as alice", "employees starting before or contemporaneous to alice", "what employees started on or before alices start date", "which employee started no greater than alices"]}, "employee whose end date is at most end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees with end dates that are no greater than employee alice", "people that stopped working when alice did or before", "employees whose last day was before or on alices last day", "employees whose start date is before or on alices end date", "who is one worker who left on or before the day employee alice left", "employees finishing contemporaneous to or before alice", "employees who quit before alice quit her job", "find employees with last day before or on alices last day"]}, "person that person whose relationship status is single is friends with": {"denotation": "(list (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.34) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.57) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "paraphrases": ["a friend of a single person", "name the single persons friends", "whom are people with a relationship status of single friends with", "which of my friends have a single status", "friends of friends of all singles", "who has friends who are single", "people with friends who are single", "find the friends of singlestatus people", "find me friends of single people", "who is friends with the single person"]}, "employee whose end date is larger than 2004 or 2010": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find an employee who left after 2010", "which employees quit after 2004 or after 2010", "employees who quit their job in 2005 or later", "people that stopped work after 2004 or after 2010", "what employees have an end date that is later than either 2004 or 2010", "find me the employees who quit between 2004 and 2010", "employees finishing after 2004"]}, "start date of student alice whose field of study is computer science": {"denotation": "(list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "paraphrases": ["when did alice start studying computer science", "when did alice start her study in the field of computer science", "which date did computer science student alice start", "what is alices first date of studying computer science in school", "find the date that alice started studying computer science"]}, "city that is birthplace of student whose end date is at most 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["birth city of student whose end date is not after 2004", "where were the graduates of 2004 born", "what city is the birthplace of students with an end date no later than 2004", "where were the people that finished school in or before 2004 born", "where is the birthplace of the student who left school before 2004", "what is the birthplace of students who graduated no later than 2004", "birthplace of students who finish contemporaneous to or before 2004", "birthplace of a student ending before or in 2004", "birthplace of students whose end date is no greater than 2004", "find birthplaces of students whose last day was 2004 or before"]}, "gender that is gender of employee whose job title is not software engineer": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what gender are the working people that are not software engineers", "gender of employees other than software engineers", "gender of employees that do not work as software engineers", "what gender is the employee who is not a software engineer", "what is the gender of employee with title other than software engineer", "find the gender of employees with the job title that is not software engineer", "what gender are employees whose job title isnt software engineer", "genders of employees who arent software engineers", "gender of employee whose job title is not software engineer", "the gender of an employee whos not a software engineer"]}, "person that alice not is friends with": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "paraphrases": ["name a person with whom alice is not friends", "people who arent alices friend", "find me all people who are not friends with alice", "someone not friends with alice", "who is not friends with alice", "find me all people who are not alices friends", "find people who are not alices friends", "what people is alice not friends with", "which people are alice not friends with"]}, "gender that is gender of two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what gender is the gender of two people", "gender that is shared by two persons", "can not parapharase", "what gender are those two people", "what is the identifying gender of the transgendered person", "what gender are the two people"]}, "student whose end date is end date of student alice": {"denotation": "(list (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students who ended school the same day that alice ended school", "people that stopped school the same day as alice", "a student ending at the same time as alice", "which student has same end date as that of alice", "what student graduated the same day as alice", "find me students end date equal to student alice", "what students have an end date that is the same as student alice", "students finishing contemporaneous to alice", "when is the end date of alice"]}, "employee whose end date is at least end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees whose end date is no earlier than alices end date", "people who quit job with and after alice", "people that stopped working when alice stopped school or after", "which employee ended on the same date as alice", "who started working the same day alice left", "find employees with last day same or later than alices", "which employees last day was no sooner than alices graduation day", "name an employee whose end date is similar to that of alice", "find employees with an end date that is the same or later than student alice"]}, "person that alice or bob is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["people who are friends of bob or alice", "who is friends with either alice or bob", "a friend of alice or bob", "which people share a friend with bob or alice", "find friends of alice or bob", "friends of alice or bob", "who is friends with bob or alice", "find people who are friends with alice or bob", "find people who are friends with either alice or bob"]}, "person whose birthdate is larger than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["what people have birthdates between 2004 and 2010", "people who were born between 2004 and 2010", "people born after 2004"]}, "male or female": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female))", "paraphrases": ["what is the gender", "is this person male or female"]}, "university that is university of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["what university do those that are 180 cm tall go to", "the university of someone 180 cm tall", "what is the university of a person whose height is 180 cm", "what university does the 180 cm tall person go to", "which university does the person who is 180 cm attend", "where do my friends who are 180 cm stud for university", "find university of people who are 180cm tall", "which university did people who are 180 cm tall attend", "universities where all 180 cm tall people studied", "find the universities of people with a height of 180 cm"]}, "student whose start date is at least 2004": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is not before 2004", "find students whom have a start date of 2004 or later", "people who joined study after 2003", "students who started in 2004 or later", "find all the students that started in 2004 and after", "which students started no earlier than 2004", "people that started school in or after 2004", "students who did not begin school before 2004", "one student who started in or after 2004", "students starting on or after 2004"]}, "person that has the largest height": {"denotation": "(list (name en.person.14) (name en.person.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "paraphrases": ["what person is the tallest", "who is the tallest person", "find the tallest person"]}, "person that has the most number of gender": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string gender)))", "paraphrases": ["the person who has the most genders", "which person claims the most genders"]}, "person that has less than two gender": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "paraphrases": ["single gendered people", "find people with less than two genders", "people that have less than two genders listed", "find me all people who belong to one gender"]}, "employee whose start date is larger than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people that started work after 2004 or after 2010", "employees who start after 2004", "find me all employees that started working after 2004 or 2010", "which employee started after 2004 or 2010", "which employees strated after 2004 or 2010", "what employees have a start date that is bigger than 2004 or 2010", "find employees with start dates after 2004"]}, "student whose start date is larger than birthdate of alice": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have a start date later than the birthdate of alice", "which student started school after alice was born", "which student started after alice was born", "people that started school after alice was born", "students who started after alice", "what student started after alices birthdate", "students who began school after alice was born", "find students whose first day is after alices birthday", "a student starting after alice was born"]}, "student that has less than two university": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["a student with less than two universities", "student with less than two universities", "someone who has studied at less than two universities", "who studied at only one university", "which student has attended less than two universitys", "student of only one university", "which students went to fewer than two universities"]}, "person whose birthdate is larger than 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["which people were born after 2004", "people who were born after 2004", "who was born after 2004", "people who birthdates are after 2004"]}, "person that alice is friends with and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["friends of alice who are 180 cm tall", "find alices friends who are 180 cm tall", "a friend of alice who is 180 cm tall", "who is alice friends with who is 180 cm tall", "find friends of alice that are 180 cm tall", "who is friends with alice and is 180 cm tall", "alices friend who is 180 cm tall", "what person is 180 cm tall and is alices friend"]}, "city that is birthplace of more than two person": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["name cities when shared with more than two persons as their birthplace", "find cities that more than two people were born in", "what city were more than two people in my social network born in", "what city were more than two people born in"]}, "relationship status that is relationship status of at most two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what is the relationship status of two or less people", "people in a mutually exclusive relationship", "which relationship status represents no more than two people", "relationship status of two or less persons", "what is the relationship status of no more than two people", "whats the relationship status of two people", "find the relationship status of no more than two people", "what relationship status is that of two people at the most", "which relationship status is of at most two person", "relationship status of max two people"]}, "person that is friends with employee whose start date is at least 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people that are friends with someone that started working in or after 2004", "friends with employee who are born atleast before 2004", "friend of employee whose start date not after 2004", "people who are friends with employees who strated in or after 2004", "who is friends with an employee who started in 2004 or later", "who is friends with the employee starting in 2004", "find people who are friends with employees who have a start date of 2004 or later", "find friends of employees who started in 2004 or after", "find me the emplotee who started after 2004", "friends of employees starting in or after 2004"]}, "employee whose end date is start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people who quit their job before alice started school", "which employees last day was the same day alice started school", "find employees with last day matching alices first day at school", "what employee quit their job on the day alice started", "employee who quit before alice started", "employee whose end date is start date of student alice", "find employees whose end date is the same as the start date for student alice", "people that stopped working the same day alice started school", "employees who finish when alice starts", "what employee is leaving the company on the same date that alice starts her job"]}, "person that not is friends with alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "paraphrases": ["find people who are not friends with alice", "person who is not a friend of alice", "which people are not friends of alice", "people that are not friends with alice", "people who is not friend with alice"]}, "student that has the most number of university": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["person that went to the most universities", "students who attended college the longest", "find students who attended the most universities", "student that is enrolled in the most universities"]}, "person whose birthdate is at most end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "paraphrases": ["who has a birthdate at the end of alices employment", "people born on or before the day alice quit her job", "people who were born after alice quit her job", "who was born on or before alices final day of employment", "who was born before alice left"]}, "person whose height is 180 cm and that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "paraphrases": ["who is a person whose height is 180 cm and thats friends with alice", "name a person 180 cm tall who is friends with alice", "who is 180 cm tall and friends with alice", "who is alice friends with thats 180 cm tall", "what people have a height of 180 and are friends with alice", "180 cm tall friends of alice", "alices 6 foot tall friend"]}, "person whose height is larger than 180 cm": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "paraphrases": ["name people whose height is greater than 180 cm", "find someone taller than 180 cm", "find people taller than 180 cm", "people that are taller than 180 cm"]}, "person that has more than two relationship status": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "paraphrases": ["people who have more than two relationship statuses", "name a person in more than two relationships", "someone with multiple relationship statuses", "who has over two relationship status", "who has three or more relationship statuses", "find people who have more than two relationship statuses", "who has more than two relationship status", "what people have more than two relationship status"]}, "city that is birthplace of student whose field of study is not computer science": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["birth city of student whose field of study is not computer science", "birthplace of employees who dont study computer science", "what city is the birthplace of a student that is not studying computer science", "find birthplace of student not studying computer science", "what is the birth city of students who have a field of study other than computer science", "name the city where a student was born who is not studying computer science", "birthplaces of people who studied in fields other than computer science", "who is the birthplace of students not majoring in computer science", "where were the students of any field but computer science born", "which student that does not stufy computer science was born in this city"]}, "student whose end date is at most 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have an end date that is either 2004 or 2010 and no greater", "find all students who graduated between 2004 and 2010", "students finishing before 2010", "find students with end date in 2004 or 2010", "which students graduate no later than 2004 or 2010", "student who finishes at most on 2004 or 2010", "which students graduate in 2004 or 2010 or before"]}, "employee whose end date is smaller than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who quit before alice graduated", "show me all employees leaving before alices last day", "an employee that ends before alice", "which employees have an eend date that is earlier than that of student alice", "what employee has a end date that is before the end date of alice", "person that stopped working before alice stopped school", "employee whose end date is not after alices end date", "which employee quit working before alice graduated from school"]}, "employer of employee alice whose job title is software engineer": {"denotation": "(list (name en.company.google) (name en.company.mckinsey) (name en.company.toyota))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "paraphrases": ["who employees alice as a software engineer", "who did alice work for as a software engineer", "who employs alice as a software engineer", "who is alices boss at her software engineer job", "which software engineer has employed alice"]}, "employee whose start date is at least start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who started work before alice started school", "what employee started after or during when alice started school", "people who joined their work with or after alice", "find employee starting on alices first day or later", "what employee started the same day as alice", "what employee had a start date as early as or later than alice", "people that started work when alice started school or after", "what employees have a start date that is the same as student alice or later", "employees who started no earlier than alice", "employee whose start date is not before start date of student alice"]}, "student whose field of study is not computer science": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students studying fields other than computer science", "what students have a field of study that is not computer science", "people who are not studying computer science", "students who are not studying computer science", "who is studying something other than computer science", "student whose field of study is not computer science", "a student not taking computer science", "students not studying computer science", "wnich students are not majoring in computer science", "people who studied subjects other than computer science"]}, "person whose birthdate is smaller than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "paraphrases": ["find a person born before alice started working", "people who were born before alice started her job"]}, "person that is friends with student whose end date is at most 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.54) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what people are friends with students whom have an end date that is no greater than 2004", "a friend of a student ending in 2004 or before", "which people are friends with students who graduate no later than 2004", "people who are friends with the student leaving by 2004", "people with friends that finished school in or before 2004", "person who is friends with a student that graduated in 2004 or before", "find students friends who ended in 2004 or before", "friend of student whose end date is not after 2004"]}, "person that is friends with person that is logged in": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "paraphrases": ["whose friend is logged in", "people who have friends that are currently online", "friends of people that are currently online", "what person is friends with the online person", "what person is friends with the person logged in"]}, "person that has two birthplace": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "paraphrases": ["find people with two birthplaces", "what person has two birthplaces", "people that have two birthplaces", "what people have two birthplaces", "who was born in two places", "people with two birthplaces", "who has two birthplaces"]}, "relationship status that is relationship status of employee whose start date is smaller than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what are the relationship statuses of employees whose start date is earlier than 2004", "what is the relationship status of employees who strated before 2004", "what is the relationship status of people that started working before 2004", "relationship status of employees who start before 2004", "relationship status of employees whose start date is before 2004", "what is the relationship status of employees that started before 2004", "relationship status of employee whose start ate is before 2004"]}, "person whose birthdate is not 2004": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "paraphrases": ["who is not born on 2004", "people born in any year except 2004", "people who were not born in 2004", "find people with birth date not in 2004", "find me the people born in any year but 2004"]}, "gender that is gender of employee whose start date is larger than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the gender of employees who started after 2004", "what is the gender of people that started working after 2004", "find the gender of employees who have a start date greater than 2004", "what are genders of employees who started after 2004", "the gender of an employee that started before 2004", "which gender had more employees start after 2004", "what gender of employees started after 2004", "what is the gender of the employee who started after 2004"]}, "person that student whose start date is smaller than 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.51) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["friends of students who began earlier than 2004", "name the friend of a student who began prior to 2004", "find people with friends that started school before 2004", "who has friends that are students who have a start date before 2004", "friends of students before 2004", "find the friends of people who joined their studies before 2004", "find students with a start date earlier than 2004 and their friends", "which people are friends with students who strated before 2004", "who are friends with connection who started school before 2004", "who is friends with the person who started school before 2004"]}, "employee whose start date is larger than birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees starting after alices birthday", "find the people joined work after alices birth", "employee whose start date is after birth date of alice", "people that started working after alice was born", "people who joined after alice was born", "which employees started after alices birthdate", "employees who started after alices birthdate", "which employee started after alices birthdate"]}, "person that is friends with student whose start date is smaller than 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["people who are friends with students who started after 2004", "people who are friends with a student whose start date is before 2004", "find students friends who started before 2004", "find those that are friends with students who have start dates earlier than 2004", "people that are friends with someone that started school before 2004", "people who are friends with students who started before 2004", "which person is friends with a student who started earlier than 2004", "friends of students starting before 2004", "one person whose friend started studies before 2004", "friend of student whose start date is before 2004"]}, "employee whose end date is at least 2004": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people who quit their job after 2003", "employee whose end date is not before 2004", "employees finishing contemporaneous to or after 2004", "which employee ended in 2004 or later", "people who quit their job in or after 2004", "who stopped working in 2004 or later", "find me all the people who quit during or after 2004", "which employees last day is no earlier than 2004", "what employee has an end date that is 2004 or later", "which employees quit after 2004"]}, "person that is friends with student whose end date is smaller than 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.54) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["people that are friends with someone that finished school before 2004", "find me friends of the student that is is leaving before 2004", "what people are friends with students whoese end date is before 2004", "people who are friends with those who completed studies before 2004", "a friend of a student that ends before 2004", "friend of student whose end date is before 2004", "friends of students finishing before 2004", "people that are friends with a student who started before 2004"]}, "student that has the most number of field of study": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["person who studied in most fields", "what student lists the most fields of study", "find students that have the largest number of field studies", "a student with the most fields of study", "find students with the most fields of study", "what student has the most majors", "student with most number of field of studies", "student with the highest number of subjects", "person that is studying the most things at school", "which students have the most majors"]}, "employee that has the smallest end date": {"denotation": "(list (name en.person.20) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee quit their job first", "which employee has the earliest end date", "employees with the soonest finish date", "which employee quit most recently", "what employees have the earliest end date", "which employeess last day was least recently", "who left their job the longest time ago", "employee with smallest end date", "which employee quit first", "person who first quit hisher job"]}, "student whose end date is at most birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose end date is not after birth date of alice", "students who graduated before alices birthday", "a student who left on or before alices birthday", "people that stopped school when alice was born or before", "which student ended at most on alices birthdate", "students finishing on or before alices birthday", "find students with last day before or on alices birthday", "students whose end date is on or before alices birthdate", "students who graduated on or before alices birthday", "what students have an end date that is no sooner than alcies birthday"]}, "student whose end date is birthdate of alice": {"denotation": "(list (name en.person.16) (name en.person.26) (name en.person.37) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students whos end date is equal to alices birthday", "people that stopped school the day alice was born", "which student quit on alices birthday", "students finishing on alices birthday", "find student with last day on alices birthday", "find the student who graduated on alices birthday", "find a student who left on alices birthday", "students that ended school on the day alice was born", "find me the student who graduated on alices birthdate", "student whose end date is birth date of alice"]}, "person that has less than two birthplace": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "paraphrases": ["find me all people with less than two birthplaces", "people with only one birthplace", "person that was only born in one place"]}, "gender that is gender of employee whose end date is at most 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find the genders of employees who have an end date no later than 2004", "gender of an employee that ends during or before 2004", "what is the gender of employees who left their jobs before 2004", "the gender of one worker who left in 2004 or before", "what is the gender of employees with last day in 2004 or before", "what genders are people that stopped working in or before 2004", "what is the gender of employees whose last day was no later than 2004", "gender of employee who left before 2005"]}, "person whose gender is gender of alice": {"denotation": null, "formula": null, "paraphrases": ["what person has the same gender as alice", "find someone with the same gender as alice"]}, "person that is friends with alice and whose relationship status is single": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["what single person is friends with alice", "find single friends of alice", "what people are friends with alice and also have a relationship status of single", "people who are friends with alice and single", "find all of alices single friends"]}, "person that has at most two gender": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "paraphrases": ["people with two genders or less", "person that has two genders", "what person has two genders"]}, "computer science or history": {"denotation": null, "formula": null, "paraphrases": ["people who study computer science or history", "history or computer science"]}, "relationship status that is relationship status of less than two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["relationship status that is relationship status of one person", "which relationship status do less than two people have", "what is the relationship status of fewer than two of the people", "what is the relationship status of fewer than two people", "what relationship statuses are meant for less than two people", "a unique relationship status", "what status is the relationship status of less than two people", "relationship status of only one person"]}, "person whose birthdate is larger than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "paraphrases": ["which people were born after alice left her job", "find people who were born after alice quit her job", "find someone born after alices last day of work", "find all people born after alice quitted"]}, "city that is birthplace of employee whose end date is larger than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["birth city of employees whose end date is after 2004", "name the birthplace city of the employee whose end date is larger than 2004", "what is the birthplace of employee who ended after 2004", "where were people that stopped working after 2004 born", "find the birth city of employees with an end date later than 2004", "fins birthplaces of employees with last day after 2004", "birthplaces of people who quit their jobs after 2004", "what is the birthplace of the employee who left after 2004", "what is the birthplace of employees whose last day was after 2004"]}, "employee whose end date is at least birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["an employee ending after alice was born", "what employee ended at least on alices birthdate", "find employees whom have an end date that is equal or greater to the birthday of alice", "employees who did not stop working before alice was born", "which employee quit before alice", "what employee started on or after alices birthdate", "find employees with last days on or after alices birthday", "people that stopped working when alice was born or after", "students who started no later than alices birthdate"]}, "gender that is gender of person whose birthdate is 2004": {"denotation": "(list (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "paraphrases": ["what is the gender of the person whose birthdate is in 2004", "what genders are the people born in 2004", "what is the gender of person who is born in 2004", "what gender does the person born in 2004 have", "find the gender of people born in 2004"]}, "person that is friends with student whose end date is at least 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is the friend of the student who quit in or after 2004", "person that is a friend of student who will graduate by 2004", "friend of student whose end date is not less than 2004", "what person is friends with a student that has an end date of 2004 or later", "which people are friends with students who graduated no sooner than 2004", "friends of students finishing after 2004", "find students friend with last day in 2004 or later", "people that have a friend that stopped school in or after 2004", "who is the friend of a person whose end date is at least 2004", "who is friends with the student who graduates in 2004 or later"]}, "end date of student alice whose university is brown university": {"denotation": "(list (date 2000 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "paraphrases": ["find me all end dates of all employees named alice who studied at brown university", "when did alice stop attending brown university", "what was alices last day of going to brown university", "what is the last date of alice who is a student of brown university", "when did alice graduate from brown university"]}, "person whose birthplace is new york and that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["find all of alices friends that were born in new york", "what people have a birthplace of new york who are also friends with alice", "who is born in new york and friends with alice", "name a friend of alice who was born in new york", "people from new york that are friends with alice", "alices friends who born in new york", "name the friend of alice whose birthplace is new york", "find alices friends who were born in new york"]}, "person whose height is 180 cm and whose birthplace is new york": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["people born in new york that are 180 cm tall", "a 180 cm person born in new york", "which person born in new york is 180 cm tall", "what people have a height of 180 cm and a birth city of new york", "find the person that is 180 cm tall and was born in new york", "people born in new york and 180 cm tall", "who is the person whose birthplace is new york and whose height is 180 cm", "find people 180 cm tall who were born in new york"]}, "employee that has less than two employer": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find me an employee who has worked at two or less jobs", "employees with fewer than two employers", "an employer with at least two employees", "what employee has less than two jobs", "find employees with one employer", "people that work for less than two employers", "employee with one employer"]}, "relationship status that is relationship status of employee whose employer is not mckinsey": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of the working people that do not work for mckinsey", "find the realtionship status of employees who are not employed by mickinsey", "whats the relationship status  of the employee who does not work for mckinsey", "relationship status of employee whose employer is not mckinsey", "what are the relationship statuses of employees that do not work at mckinsey", "find me the relationship status of the person that does not work for mckinsey", "what is the relationship status of person not employed by mckinsey", "whats the relationships status of the employee that doesnt work at mckinsey", "find relationship status of employees not with mckinsey", "what is the relationship status of employees who are not employed by mckinsey"]}, "gender that is gender of employee whose employer is not mckinsey": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["gender of employees not working for mckinsey", "what is the gender of the employee who is not employed by mckinsey", "what is the gender of an employee who does not have mckinsey as an employer", "what gender is the employee who is not employed by mckinsey", "locate the gender of employees whom are not employeed by mickinsey", "gender of employee whose employer is not mckinsey", "what is the gender of working people that dont work for mckinsey", "what is the gender of employees who dont work for mckinsey"]}, "person whose birthdate is at most 2004": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["who was born in 2004", "what person has a birthdate no later than 2004", "person born before 2004", "people born in or before 2004", "people who were born in 2004 or earlier"]}, "person that is friends with person whose birthplace is new york": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.6) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "paraphrases": ["find me all people who has a friend born in new york", "people who have friends that were born in new york", "people that are friends with someone born in new york", "what person is friends with the person who was born in new york", "any friend of anyone born in new york"]}, "person that has the least number of birthplace": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string birthplace)))", "paraphrases": ["find people with no birthplaces"]}, "relationship status that is relationship status of employee whose start date is at least 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of the employee who started in 2004", "what is the relationship status of employees starting in 2004 or later", "what is the relationship status of people that started working in or after 2004", "what is the relationship status of employees who have a start date that is 2004 or later", "the relationship status of an employee is one with a start date of atleast 2004", "what is thre relationship status of employees who started no earlier than 2004", "what is the the relationship status of the employee who started in 2004", "relationship status of student whose start date is not before 2004"]}, "person whose gender is male": {"denotation": null, "formula": null, "paraphrases": []}, "student whose end date is at least 2004": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students whose end date is 2004 or earlier", "what students have an end date no earlier than 2004", "who was a student before or on 2004", "student whose end date is not before 2004", "people that stopped school in or after 2004", "student who graduated after 2004", "which students left after 2004", "students who completed in or after 2004", "students who did not graduate before 2004", "student who has 2004 as a date"]}, "person that is logged in and whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.24) (name en.person.26) (name en.person.34) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.6) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["what person is logged in and was born in new york", "who is from new york and logged in", "persons presently logged in who were born in new york", "people born in new york that are currently online", "find people who are currently online and born in new york"]}, "person that alice is friends with and whose birthdate is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["friend of alice with birthdate in 2004", "whome is alice friends with who also have a birthdate of 2004", "name a person born in 2004 who is friends with alice"]}, "student whose start date is at least end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that started school on or after the day alice stopped school", "find students with a start date that is the same or greater than student alice", "student who starts at least before alice finishes", "which students start no sooner than alices graduation day", "student whose start date is not before end date of student alice", "find students starting on or after alices last day", "students who began school before alice graduated", "people who enrolled on or after the date on which alice completed her studies", "what students have a start date that is no earlier than the end date of alice"]}, "gender that is gender of student whose start date is larger than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["gender of a student who was enrolled after 2004", "find the gender of students who were born after 2004", "the gender of a student that starts after 2004", "whats the gender of the student that befins after 2004", "gender of people who joined their study after 2004", "what are genders of students starting after 2004", "find the gender of students who have a start date after 2004", "gender of student who started after 2004", "what is the gender of people that started school after 2004", "gender of students that started after 2004"]}, "employee whose start date is at most end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who start before or when alice finishes", "find the employee that was hired closest to the day alice quit her job", "find employees starting on or before alices last day", "people that started working when alice stopped working or before", "find me the employee who started around the time alice departed", "employee whose start date is not after the end date of employee alice", "who is the employee", "an employee starting when or before alice ends", "find employees who have a start date the same as employee alice"]}, "person that is friends with alice and whose birthplace is new york": {"denotation": "(list (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["who is alice friend born in new york", "find people who are friends with alice and born in new york", "which of alices friends were born in new york", "find one of alices friends who was born in new york", "friend of alice who was born in new york"]}, "person whose relationship status is single and that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["find singlestatus people who are alices friend", "which of alices friend is single", "find all single people that are friends with alice", "find friends of alice that are single", "who are alices single friends", "who is alice friends with that is single", "find people who have a relationship status of single who are also friends with alice"]}, "student whose end date is at most start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["a student that ends the same time alice starts", "people who completed their studies before alice joined", "find student whose last day is before or the same day as alices first day", "student whose end date is not after start date of employee alice", "which student ended school right when alice started her job", "which students graduate no later than alices first day of work", "what students have an end date that is no greater than employee alices start date", "which student ended no later than alices start date", "people that stopped going to school when alice started working or before", "students who finish before or contemporaneous to alices start"]}, "relationship status that is relationship status of student whose end date is larger than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["relationship status of students finished after 2004", "what is the students relationship status who ended greater than 2004", "what is the relationship status of people that finished school after 2004", "whats the relationship status of the student that graduated after 2004", "what is thre relationship status of students who graduated after 2004", "what is the relationship status of a student with an end date of 2004 or later", "whats the relationship status of the student that is leaving her job after 2004", "relationship status of student whose end date is after 2004", "find relationship status of students whose last day was after 2004"]}, "mckinsey or google": {"denotation": "(list (name en.company.google) (name en.company.mckinsey))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))", "paraphrases": ["either mckinsey or google", "people who work at mckinsey or google"]}, "gender that is gender of alice and that is gender of alice": {"denotation": "(list (name en.gender.female))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "paraphrases": ["what is alices gender", "gender which is same as alice"]}, "relationship status that is relationship status of student whose end date is not 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find relationship statuses for students who have an end date that is not 2004", "what is the relationship status of students with an end date that is not 2004", "what is relationship status of students with end dates other than 2004", "relationship status of students not finishing in 2004", "what are the relationship statuses of student who did not graduate in 2004", "what is the relationship status of students who did not graduate in 2004", "what is the relationship status of students that did not finish school in 2004", "relationship status of student who does not graduate by 2004"]}, "person that employee whose start date is not 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who is friends with an employee who start date is not 2004", "people with friends who did not start work in 2004", "who are people who are employees with a start date not of 2004 friends with", "who is friends with the person who didnt start working in 2004", "who is friends with the employee who did not start in 2004", "which employees start date is not 2004", "people who were not friends before 2004", "friends of people who joined their jobs in years other than 2004", "find friends of employees who did not start in 2004"]}, "person that is friends with the least number of person": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.15) (name en.person.19) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.56) (name en.person.57) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["who has the fewest number of friends", "who has lowest number of friends", "which person has the fewest number of friends", "what person has the least friends"]}, "person that is friends with employee whose start date is larger than 2004": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people who are friends with employees who started working in or before 2004", "people who are friends with an employee who started after 2004", "what person is friends with the employee that was hired before 2004", "which people are friends with employees how started after 2004", "find employees friend with start date after 2004", "find people that are friends with employees whose start date is later than 2004", "friend of employee whose start date after 2004", "find me all people that are friends with the employee starting after 2004", "people that are friends with someone that started working after 2004", "friends of students starting after 2004"]}, "student whose end date is at least start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students are leaving prior to the date alice starts", "a student ending after or when alice starts", "student who graduated before alice started her job", "which students graduate no sooner than alices first work day", "students finishing contemporaneous to or before alice starts", "people that finished school on or after the day alice started working", "student who left on or before alices joining", "find students whose last day is the same or later than alices", "what students have an end date that is the start date of employee alice or later"]}, "gender that is gender of employee whose start date is not 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["whats the gender of employees who didnt start in 2004", "the gender of a worker who didnt start in 2004", "what sex are the employees who did not start in 2004", "gender of employees not starting in 2004", "find the gender of employees with a start date not equal to 2004", "what is the gender of working people that did not start in 2004", "what is the gender of employee who started in year other than 2004", "what is the gender of employees who did not start in 2004", "gender of employee whose start date is not 2004", "gender of an employee not starting in 2004"]}, "employee whose start date is start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employees start the day alice starts", "which employees start date is the same as alice", "employee with same start date as that of employee alice", "what employees started the same day as alice", "find me all employees that start on the same day as alice", "find all employees whose start date matches alices", "what employee started their job on the same day as alice", "people that started working the same time as alice", "which employee started on the same date as alice", "find employees who have a start date that is the same as employee alice"]}, "person that is friends with employee whose employer is not mckinsey": {"denotation": "(list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who is friends with an employee who does not work for mckinsey", "find employees friends not employed at mckinsey", "what person is friends with people that do not work for mckinsey", "what person is friends with an employee who does not work for mckinsey", "people who are friends with people who dont work for mckinsey", "friend of employee whose employer is not mckinsey", "people who are friends with employees that are not named mickinsey", "who is the person who is friends with a nonmckinsey employee", "people that have a friend that works for someone other than mckinsey"]}, "gender that is gender of employee whose start date is smaller than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what gender are people that started working before 2004", "gender of an employee starting before 2004", "find me the gender of employees starting before 2004", "gender of employees starting before 2004", "what is gender of employees who started before 2004", "what is the gender of employees whose start date is earlier than 2004", "gender of employees that started before 2004"]}, "student that has the largest end date": {"denotation": "(list (name en.person.11) (name en.person.23) (name en.person.51) (name en.person.59) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student has the greatest end date", "which student was the last to finish", "student who ended last", "which student left most recently", "person who completed the education latest", "a student with the most recent end date", "person that stopped school most recently", "students who finish the latest", "what students have the latest end date"]}, "person whose height is 180 cm and whose job title is software engineer": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "paraphrases": ["who is a software engineer that is 180 cm", "what person has a height of 180 cm and a job title of software engineer", "who is the software engineer who is 180 cm tall", "find the person that is 180 cm tall and is a software engineer", "find employees called software engineers who are 180 cm tall", "which person 180 cm tall is a software engineer", "which software engineer is 180 cm tall", "software engineers whose height is 180cm", "people who are 180 cm tall and are software engineers", "all 180 cm tall software engineers"]}, "person whose birthplace is new york and whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["find me all people who were born in new york", "which people were born in new york", "people who were born in new york"]}, "person whose relationship status is relationship status that is relationship status of alice": {"denotation": null, "formula": null, "paraphrases": ["which person has a relationship status the same as alice"]}, "start date of employee alice whose employer is mckinsey": {"denotation": "(list (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "paraphrases": ["start date of alice at mckinsey", "when did alice start working for mckinsey", "when did mckinseys employe alice start", "when did alice start at mckinsey"]}, "city that is birthplace of student whose start date is not 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["show me which cities the people starting before or after 2004 were born in", "where were people that started school in any year but 2004 born", "the birthplace of a student not starting in 2004", "find the birth city for students whom have a start date other than 2004", "what is the birth city of a student who didnt start in 2004", "birthplace of students not starting in 2004", "birthplace of students who did not join in 2004", "birth city of student whose start date is not 2004", "what cities are the birthplace of students who did not start in 2004"]}, "employee whose job title is not software engineer": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["an employee that isnt a software engineer", "which employee is not the software engineer", "which employees dont have the job title software engineer", "what employees who are not software engineers", "which employees are working jobs other than softwhere engineer", "employees other than software engineers", "find employees with job title not software engineer", "what employees have a job title other than software engineer", "employee whose job title is not software engineer", "working people that are not software engineers"]}, "person that has at most two relationship status": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "paraphrases": ["who has maximum two relationship status", "what person has two relationship statuses", "people with two relationship statuses or less", "person who has been in less then 3 relationships"]}, "relationship status that is relationship status of employee whose start date is larger than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the employees relationship status who started after 2004", "relationship status of employee whose start date is larger than 2004", "relationship status of employees starting after 2004", "whats the relationship status of the employee starting after 2004", "what is the relationship status of people that started working after 2004", "what is relationship status of employees starting after 2004", "what is the relationship status of an employee whose start date is later than 2004", "what is the relationship status of employees who started after 2004", "find relationship statuses for employees with a start date later than 2004"]}, "employee that has at most two employer": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employee has no more than two employers", "employee with not more than two employers", "employees for two employers maximum", "people that have two or fewer employers listed", "find all the employees that had no more than two jobs", "which employee has no more than two employers", "find me employees that have worked for no more than two employers", "which employees have had no more than employers", "find employees with two employers or less"]}, "gender that is gender of at least two person": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["which gender is claimed by at least two people", "gender which is same as at least two persons", "what gender do at least two people have"]}, "person whose height is 180 cm and that is gender of alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "paraphrases": ["all 180 cm tall females", "which women are 180 cm tall", "find people who have the same gender as alice and are 180 cm tall", "find people who are 180 cm tall who are alices gender", "find the person that is 180 cm tall and is also female", "find people with a height of 180 cm who are the same gender as alice", "name a person of the same gender as alice who is 180 cm tall", "who is 180 cm tall and is female", "who has the same gender as alice and is 180 cm tall", "someone 180 cm tall and same gender as alice"]}, "student whose start date is at most birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is not after birth date of alice", "which students have the same birthrate and start date of alice", "which students started no later than alices birthdate", "which students start date is closest to alices birthday", "students who started before or on alices birthdate", "which student started on or before alices birthdate", "people that started working when alice was born or before", "find the people who joined their studies before alice was born"]}, "city that is birthplace of alice or bob": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["what city was alice or bob born in", "what city were alice or bob born in", "what city was alice and bob born in"]}, "person whose birthdate is larger than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "paraphrases": ["find me a person born after alices first day of school", "who is born after student alice started", "people that were born after alice started school", "person born after alice started school", "people who were born after alice started school"]}, "relationship status that is relationship status of student whose end date is at least 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["the relationship statues of a student ending in 2004", "what is the relationship status of people who stopped school in 2004 or later", "find me the relationship status of students who graduated since 2004", "relationship status of all students whos end date is 2004 on", "what is the relationship status of students who have an end date that is from 2004 or greater", "relationship status of students who left in or after 2004", "relationship status of employee whose end date is not before 2004", "what is the relationship status of student who ended in 2004", "relationship status of students finishing after 2004", "what is the student end date at least 2004"]}, "city that is birthplace of employee whose end date is at most 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["where were employees who finish on or before 2004 born", "what is the birthplace of employees whose last day was no later than 2004", "what city is the birthplace of employees who have an end date no later than 2004", "where were the people that stopped working in or before 2004 born", "find cities that are the birthplaces of employees with an end date no later than 2004", "what city is the birthplace of the employees who stoped working for us before 2004", "birth places of employees who quit in 2004 or before", "find the city of birth for the employee who quit before 2004", "birth city of employee whose end date is not after 2004", "employees  city of birth who was born at or before 2004"]}, "student whose end date is larger than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student graduated after alice graduated", "which students have larger end dates than alice", "people that stopped school after alice did", "a student ending after alice", "student whose end date is after end date of student alice", "what students have an end date that is greater than that of student alice", "students who ended school after the day alice ended school", "find me student whose end date is after student alices", "students finishing after alice", "who graduated after alice"]}, "person whose birthdate is at least end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "paraphrases": ["person born after alice graduated", "people who were born on or after alices last day of school", "people born on or after the day alice stopped attending school", "who was born on or after alices last day of school"]}, "person that alice is friends with and whose gender is male": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "paraphrases": ["males that alice is friends with", "find males that alice is friends with", "which of alices friends are male", "who is friends with alice and is male", "who is alices male friend", "find all alices friends that are male"]}, "student whose start date is larger than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is after start date of student alice", "name the student who was born after alice ", "who started working after the student alice did", "a student who started after student alice", "which student started after alice", "what student has a start date that is later than that of student alice", "people that started school after alice", "which students started after alices first day of school"]}, "gender that is gender of student whose end date is larger than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["which gender is the student who ended after 2004", "find me the genders of students who attended after 2004", "what is the gender of a student with an end date later than 2004", "what are students genders with last days after 2004", "gender of student whose end date is after 2004", "gender of students whose end date is later than 2004", "what is the gender of students who graduate after 2004", "find the genders of students with end dates later than 2004", "what genders are the people that finished school after 2004"]}, "student whose start date is smaller than 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which student has a start date earlier than 2004", "student whose start date is before 2004", "student who joined before 2004", "which students started before 2004", "students that will start before 2004", "find students whose start date is less than 2004", "students who started before 2004", "people that started school before 2004", "find students starting before 2004"]}, "person whose gender is not male": {"denotation": "(list (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "paraphrases": ["find someone who is female", "find people who are not male", "people that are not male"]}, "employee whose start date is start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee has the same start date as alice", "employees who started on the same date as alice", "find employees that have a start date that is the same as student alices", "employees starting contemporaneous to alice", "people that started working when alice started school", "what employee has a start date that is the same as alice", "find employees starting the same day as student alice", "employee whose start date is same as that of student alice", "who started with alice", "which employees stared the same day alice started school"]}, "city that is birthplace of alice": {"denotation": null, "formula": null, "paraphrases": ["where was alice born"]}, "person whose birthdate is smaller than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "paraphrases": ["find people born before the employment end date of alice", "who was born before alices last day of employment", "people born before alice quit her job", "people who were born before alice quit her job"]}, "person whose gender is person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["find the gender of people 180 cm tall", "gender of people whose height is 180cm", "what gender are those who are 180 cm tall", "which gender are most people who are 180 cm tall", "person with same gender as that of person 180 cm tall", "find the gender of all people logged in with a height of 180 cm", "what person is the same gender as the 180 cm tall person"]}, "gender that is gender of employee whose start date is at least 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what gender are employees who have a start date of 2004 or greater", "what is the gender of the employee whose start date is in 2004", "genders of employees starting in or after 2004", "gender of all employees who started in 2004 or later", "gender of employee who joined before 2005", "what gender are people that started working in or after 2004", "what is the gender of employees sho started before 2004", "gender of employee whose start date is at least 2004", "what is the gender of the employee who started in 2004 or later"]}, "gender that is gender of alice": {"denotation": "(list (name en.gender.female))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "paraphrases": ["whats the gender of alice"]}, "city that is birthplace of employee whose end date is smaller than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the birthdays of employees who left before 2004", "what is the birthplace of employees whose last day was before 2004", "birthplace of employees who finish before 2004", "birth city of employee whose end date is before 2004", "list the birthplaces of people who quit their jobs before 2004", "where were the people that stopped working before 2004 born", "what city is the birthplace of the employee who ended working before 2004", "birthplace of employees whose end date is before 2004", "what city is the birthplace of employees before 2004", "what is the birth city of all employees who have an end date less than 2004"]}, "job title of employee alice": {"denotation": "(list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "paraphrases": ["what is the job title of alice", "what is job title of employee alice", "what is alices job title"]}, "person whose height is at most height of alice": {"denotation": "(list (name en.person.18) (name en.person.35) (name en.person.4) (name en.person.5) (name en.person.51) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "paraphrases": ["people who are the same height as alice or shorter", "who is either shorter than alice or same", "find someone who is as tall or shorter than alice", "find people who are not bigger than alice in height", "people that are the same height as or shorter than alice"]}, "person that is logged in and that is friends with alice": {"denotation": "(list (name en.person.3) (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "paraphrases": ["find me all of alices friends who are currently online", "find all of alices friends who are currently online", "people that are currently online and friends with alice", "alices friend who is logged in", "which of alices friends are currently online"]}, "person that is friends with student whose start date is at least 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["people who are friends with a student whose start date is 2004 or later", "who are the friends of the new students that are starting by 2004", "people who are friends with those who joined studies in or after 2004", "which people are friends with students who started no sooner than 2004", "what people are friends with students that have a start date of 2004 or later", "people that have a friend that started school in or after 2004", "find people who are friends with students who have a start date of 2004 or later", "a friend of a student that starts in 2004 or before", "friend of a student starting before or during 2004", "which people are friends with students who started no earlier than 2004", "people that are friends with students hired to start on or before 2004", "find students friends who started in 2004 or later", "people that are friends with someone that started school in or after 2004", "friends of students starting in or after 2004", "person who is friends with students who joined in and after 2004", "people who are friends with a student that started no earlier than 2004", "friends of students starting on or after 2004"]}, "gender that is gender of person whose gender is male": {"denotation": "(list (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "paraphrases": ["find people who are male"]}, "person that has the most number of birthplace": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string birthplace)))", "paraphrases": ["people born in the most cities", "who has the most birthplaces listed"]}, "person whose birthdate is person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["person with same birthdate of person with 180 cm height", "what is the birthdate of people who are 180 cm tall", "who has the same birthday as the person who is 180 cm tall", "what is the birthdate of the person who is 180 cm", "what people have the same birthdate as those whose height is 180 cm", "of all the people who are 180 cm tall which of them share birthdays"]}, "student whose end date is at most start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students with last days on or before alices first day", "what student has an end date that is no greater than the start date of alice", "students who started school on the same day as or before alive started", "which students completed school by the time alice began", "student who graduates before alice starts", "student whose end date is not after atart date of student alice", "people that stopped school on or before the day alice started school", "what student has an end date before student alice", "find students with an end date that is no greater than alice", "find me all students that will be leaving the company by the time alice starts"]}, "person that is friends with student whose university is not brown university": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["friend of student who is not student of brown university", "people who are friends with students not attending brown university", "find me all the people who are friends with people that did not attend brown", "people who have friends that go to a school other than brown", "which person is friends with someone who goes to somewhere besides brown university", "who is friends with a student who does not attend brown university", "find people who are friends with students whom are not part of brown university", "what person has a friend who is a student at a university other than brown university", "find students friends not attending brown university"]}, "person whose height is larger than height of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "paraphrases": ["find people who are greater in height than alice", "who is taller than alice", "people taller than alice"]}, "person that alice is friends with and that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "paraphrases": ["who is a friend exclusively to alice", "name a person who is friends with alice", "friend of alice", "find all people who are friends of alice", "find people whom are friends with alice"]}, "employee whose end date is start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employee has an end date that is the same as the start date of alice", "people that stopped working when alice started working", "employee who left the day alice joined", "what employees left when alice started", "employees who quit their job on the same day alice started her job", "employees whose last day is the same as alices first day at the job", "employee whose end date is start date of employee alice", "what employees have a end date that is the same as the start date of employee alice", "people who quit their job before alice joined", "employee left the day alice started"]}, "person that employee whose end date is larger than 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find friends of people who quit their jobs after 2004", "who is friends with employees whos end date is larger than 2004", "friend of employee whose end date is after 2004", "who is friends with the employee who quit later than 2004", "find employees who have an end date later than 2004 and their friends", "who is friends with the person who stopped working after 2004", "who stopped working after 2004  and has connections to me", "a friend of someone who quit after 2004", "friends of people who quit their jobs after 2004"]}, "employee whose start date is at most birthdate of alice": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who started before alice was born", "employee whose end date is not after birth date of alice", "what employees have a start date that is no later than alices birthday", "people that started work when alice was born or earlier", "find me all employees who will have starte by alices birthday", "employees who started working on or before the day alice as born", "which employees started work before alices birthday", "which employees started on or before alices birthdate", "what employee has the same birthday as alice", "what employees have a start date that is no later than the birthdate of alice"]}, "city that is birthplace of at least two person": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["which city were at least two people born in", "find cities where at least two people were born", "city where at least two people were born", "what city were at least two people born in"]}, "person whose gender is male and whose gender is male": {"denotation": null, "formula": null, "paraphrases": []}, "number of city": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))", "paraphrases": ["number of cities people are from", "what is the citys number", "what is the number of the city", "what is the number of city"]}, "student whose end date is at least start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have an end date that is no earlier than the start date of alice", "students finishing contemporaneous to or after alice starts", "students who graduate no sooner than the day alice started", "find students who have an end date that is equal or later to that of student alice", "student whose end date is not before start date of student alice", "people who stopped school on or after the date alice started school", "students who did not graduate before alice enrolled", "people completed study before alice started study", "student that graduates at least before alice starts school", "find students with last day on or after alices first day"]}, "student that has less than two field of study": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what student has fewer than two fields of study", "which students have fewer than 2 majors", "student with only one field of study", "find students with one field of study", "find me all students who have only one field of study", "what student has only one field of study", "student not studying fewer than two fields of study", "find me all students with a single major", "find students who have fewer than two field of study", "who is studying less than two things"]}, "person that alice is friends with and whose birthplace is new york": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["who is friends with alice and was born in new york", "find alices friends born in new york", "what friend of alice was born in new york", "what people are friends with alice and have a birthplace of new york", "alices friends who were born in new york", "who is alices friend that is from new york", "find all alices friends that were born in new york", "alices friend born in new york"]}, "employee whose end date is at least end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose end date is not before end date of employee alice", "name the employee who quit the job on the same date as employee alice", "this employee has an ending date that is almost the same as alices", "which employees last day was no earlier than alices first day", "what employee has an end date that is at least the end date for the employee alice", "what employee quit their job the same day or after alice", "people that stopped working when alice did or after", "employee who left on the same day or later as alice", "find employees whose last day is the same or later than alices"]}, "field of study of student alice whose field of study is computer science": {"denotation": "(list (name en.field.computer_science))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "paraphrases": ["is alices field of study computer science", "alices field of study is computer science", "did alice study computer science"]}, "employee whose end date is at most 2004": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee ended no later than 2004", "who are the employees who quit before 2004", "employees whose last day was in or before 2004", "what employees have an end date no later than 2004", "one employee who left in 2004 or before", "employee whose end date is not after 2004", "find employees with last day in 2004 or before", "employees who quit in 2003 or earlier", "people that stopped working in 2004 or before"]}, "city that is birthplace of employee whose start date is at least 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find the birth city of all employees who have a start date that is 2004 or later", "where were the people that started work in or after 2004 born", "what is the birthplace of employees who started in 2004 or later", "birthplace of students who started no earlier than 2004", "birth city of employee whose start date is not after 2004", "birthplace of employees who started in or after 2004", "what is the birth city of a worker who started in 2004 or after", "city of birth for people employed since 2004", "what is birthplace of employees starting in 2004 and after"]}, "person that has more than two gender": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "paraphrases": ["whos got more than 2 genders down", "which people have more than two genders", "find people with three genders", "who has over two genders", "who has more than two genders", "find people who have more than two genders", "which people have more than genders"]}, "person whose birthdate is 2004 and whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["what persons birthday is in 2004", "find all people who were born in 2004", "people that were born in 2004"]}, "relationship status that is relationship status of employee whose end date is larger than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of an employee who has worked since 2004", "what is the relationship status of employees whose last day was after 2004", "relationship status of employee joining after 2004", "find the relationship status of employees whom have an end date that is bigger than 2004", "relationship status of employee whose end date is after 2004", "find me all the relationship statuses of employees who started job after 2004", "relationship status of employees who finish after 2004", "what is relationship status of employee whose last day was after 2004", "whats the relationship status of employee who quit their job after 2004", "what is the relationship status of people that stopped working after 2004"]}, "person whose birthplace is not new york": {"denotation": "(list (name en.person.10) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.25) (name en.person.27) (name en.person.28) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.45) (name en.person.5) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "paraphrases": ["what person was not born in new york", "people who were not born in new york", "people not born in new york", "person not born in new york", "people born anywhere but new york"]}, "person whose birthdate is larger than birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "paraphrases": ["find me all people who are older than alice", "people who were born after alice", "who is younger than alice", "person born after alice", "people born after alice"]}, "start date of student alice": {"denotation": "(list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))", "paraphrases": ["when did alice start school", "when did alice start attending school", "what is schooling start date of alice", "what day does alice start"]}, "city that is birthplace of the least number of person": {"denotation": "(list (name en.city.beijing))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["place of birth for the fewest people", "what city has the least births", "city where the least number of people were born", "find the least common birthplace", "which city has minimum number of people born in"]}, "person whose gender is male and whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["who is born is 2004 and is a male", "all males who were born in 2004", "what males were born in 2004", "people who are male and born in 2004"]}, "city that is birthplace of employee whose start date is at most 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["where are the birth cities of employees who have a start date of no earlier than 2004", "where were the people that started working in or before 2004 born", "birthplaces of employees who started working in 2004 or earlier", "name the city where an employee was born who started no later than 2004", "birthplace of employees who joined before 2005", "find the birthdplaces of new employees we have starting by 2004", "what is the birthplace of employees who started in 2004 or before", "birthplace of employees starting in or before 2004", "birth city of employee whose start date is at most 2004"]}, "person whose birthdate is smaller than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["people born before 2010", "people born between 2004 and 2010", "what person has a birthdate between 2004 and 2010", "persons born in or before 2004"]}, "employee whose start date is smaller than birthdate of alice": {"denotation": "(list (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees starting before alices birthday", "find employees that have a start date that is earlier than the birthdate of alice", "fine me employees starting before alices birthday", "what employee has a start date that is earlier than the birthdate of alice", "what employees have been here less time then alice", "which employee started earlier than alices birthdate", "people that started working before alices birthdate", "employees who started working before the day alice was born", "employee whose start date is before birth date of alice", "an employee starting before alice was born"]}, "person whose gender is male and whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.26) (name en.person.34) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.56) (name en.person.58) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["what male was born in new york", "find people whose birthplace is new york", "people who are male and born in new york", "any male born in new york"]}, "gender that is gender of employee whose end date is smaller than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["gender of employees who left before 2004", "employee who is same sex who left more other employee started in 2004", "what is the gender of people that stopped working before 2004", "what is the gender of an employee whose end date is earlier than 2004", "what was the gender of employees who left before 2004", "gender of employee whose end date is before 2004", "what gender are the employees who left the company before 2004", "what is the gender of employees whose end date is less than 2004"]}, "person whose birthplace is new york and whose birthdate is 2004": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["find all people who born in new york in 2004", "persons born in new york in 2004", "who was born in new york in 2004"]}, "field that is field of study of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["field of study of someone 180 cm tall", "what is the field of study of those who are 180 cm tall", "find the field of study of all persons with a height of 180 cm", "find fields of study for those 180 cm tall", "field of study of people who are 180 cm tall", "what is the field of study of the 180 cm tall person", "find me typical fields of study for people who are 180 cm tall", "what is the field of study for people who are 180 cm tall", "what do people study who are 180 cm"]}, "person whose gender is male and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["who is male and 180 cm tall", "find males who are 180cm tall", "which guys are also 180 cm tall", "who is a person that is a male and whose height is 180 cm", "find people who are male and 180 cm tall", "a 180 cm tall male"]}, "relationship status that is relationship status of student whose field of study is not computer science": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the relationship status of the student not in computer science", "what is the relationship status of a student studying something other than computer science", "find the relationship statuses of students whom do not study computer science", "whats the relationship status of students that did not study computer science", "relationship status of student whose field of study is not computer science", "what is the relationship status of the student who is not studying computer science", "what is the relationship status of people studying anything but computer science", "find relationship status of students not studying computer science field", "what is the relationship status of students who are not majoring in compuer science"]}, "city that is birthplace of person whose birthdate is 2004": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "paraphrases": ["what cities were people born in 2004 born in", "find birthplace cities of persons born in 2004", "find the birthplaces of people born in 2004", "what is the birthplace of the person born in 2004", "which city a person is born in whose year of birth is 2004"]}, "student whose start date is larger than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students who started school after alice quit her job", "find students with a start date that is later than that of employee alice", "student who joined after alice left", "people that started school after alice stopped working", "student who started after alice left", "people who joined their studies after alice quit her job", "what students started after alice left", "what student has a start date later than the end date of alice", "students who started after alices last day at the job"]}, "person whose relationship status is single and whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.29) (name en.person.34) (name en.person.38) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.56) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["single people who was born in new york", "people who are single and born in new york", "people born in new york that are single", "what persons relationship status is single and was born in new york", "who is single from new york"]}, "relationship status that is relationship status of the least number of person": {"denotation": "(list (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what relationships status represents the fewest people", "whose relationship status is unique", "what relationship status is listed by the least number of people", "find the least common relationship status", "least common relationship status"]}, "person whose birthdate is at most 2004 or 2010": {"denotation": null, "formula": null, "paraphrases": ["find someone born during or before 2010", "who was born in 2004 or 2010", "find people born between 2004 and 2010"]}, "person that student whose end date is at least 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.4) (name en.person.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who is friends with students that have an end date of 2004", "who is friends with a student who graduated in 2004 or later", "who is friends with the person who is graduating in 2004 at the earliest", "find friends of students whose last day is 2004 or later", "find all people with friends that finished school in 2004", "which people are friends with students graduating in 2004 or later", "who is friends with students whose end date is 2004 or later", "who is the the student whose end date was 2004 friends with", "friends of people who completed their studies after 2003", "which people are friends with students who graduated no earlier than 2004"]}, "person that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["a friend of alice", "anyone who is alices friend"]}, "person whose relationship status is single and whose gender is male": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "paraphrases": ["find males who are single", "who is single male", "what male is single", "which male has a relationship status of single"]}, "180 cm or 200 cm": {"denotation": "(list (number 180 en.cm) (number 200 en.cm))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))", "paraphrases": ["find people with height either 180 or 200 cm", "either 180cm or 200cm", "find people who are between 180 cm and 200 cm tall"]}, "relationship status that is relationship status of alice": {"denotation": null, "formula": null, "paraphrases": []}, "employee whose end date is smaller than birthdate of alice": {"denotation": "(list (name en.person.16) (name en.person.20) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees with an end date that is less than alices birthday", "an employee who left before alice was born", "an employee ending before alice was born", "employee who left before alice was born", "which employee quit before alice was born", "employee whose end date is  birth date of alice", "people that stopped working before alice was born", "fine me employees that are leaving before alices birthday", "employees who finish before alices birthday", "employees whose last day is before alice"]}, "person whose height is 180 cm or 200 cm": {"denotation": "(list (name en.person.34))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm))))", "paraphrases": ["people that are 180 cm or 200 cm tall", "what person has a height of 180 to 200 cm", "person who is 180 or 200cm tall"]}, "person that is friends with alice and whose birthdate is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "paraphrases": ["alices friends born in 2004", "who was born in 2004 who is friends with alice", "a friend of alice born in 2004", "find alices friends born in 2004", "who is friends with alice and has a birthdate on 2004", "friends of alice born in 2004", "people alice is friends with that were also born in 2004", "which of alices friends were born in 2004", "find alices friend that was born in 2004", "find friends of alice with a birthdate of 2004"]}, "number of company": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type))))", "paraphrases": ["what is the companys number", "what is the phone number of a company", "how many companies are there"]}, "person that has more than two birthplace": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "paraphrases": ["which person was born in more than 2 places", "person with two or more birthplaces", "who was born in over two places", "what people have more than two birthplaces", "find people that have more than two birthplaces"]}, "student whose start date is at most start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students started no later than alices first day of work", "find student with start date before or on alices start date", "students who began school the same day alice started working", "students who started no later than the start date of alice", "show me the students starting at the same time or after alice", "people that started school when alice started working or before", "students starting before or with alice", "what students have a start date that is no greater than employee alice", "student whose start date is not after start date of employee alice"]}, "gender that is gender of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["what gender is the person who 180 cm tall", "is the person whos 180 cm tall a male female or other", "gender of persons who are 180 cm tall", "who is the same gender as the 180 cm person", "find the gender of people with a height of 180 cm", "what is the gender of a 180 cm person"]}, "person whose relationship status is single and whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["people who are single", "what person has their status as single"]}, "employee whose start date is at most start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose start date is not after start date of student alice", "which employee started no later than alice", "employees who started working at the same time as or before alice", "a worker who began on or before the day student alice started", "find employees who have a start date no later than student alices start date", "employees starting contemporaneous to or before alice", "which employees started no later than the day alice started school", "people that started work when alice started school  or before", "find the employee that was hired closest to the date alice was hired", "find employee with start date on or before alices"]}, "city that is birthplace of two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what city was two people born in", "birth place of two persons", "city with birthplace of two person", "which city is the birthplace of two of the people", "where were two people both born", "find me the two people born in the same city", "what city is the birthplace of two people", "find the birth city of two people", "what city do two people share as a birthplace", "what birthplace has at least two people in it"]}, "student whose start date is larger than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students starting after alice", "what is the start date of a student who started before alice", "find me the student who started before alice", "a student starting after alice", "find all the students that started after alice was hired", "students who start after alice", "student whose start date is after start date of employee alice", "people that started school after alice started working", "what students have a start date that is after the start date of employee alice"]}, "student whose end date is larger than 2004": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.56) (name en.person.59) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["who stopped going to school after 2004", "find me all students who graduated after 2004", "which student ended after 2004", "what students have an end date after 2004", "student whose end date is after 2004", "people who completed the study after 2004", "students whose end date is later than 2004", "find students with last day after 2004", "what students have an end date later than 2004", "which students graduate after 2004"]}, "person that employee whose job title is not software engineer is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.36) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["friends of people whose job title is not software engineers", "who is friends of employees who have a job titale other than software engineer", "what person is friends with the employee who is not a software engineer", "people with friends who have jobs but not software engineers", "find all friends that are not software engineers", "who is that employee who isnt a software engineer friends with", "people who are friends with employees that are not software engineers", "who is friends with the person who isnt a software engineer", "find friends of employee without title of software engineer"]}, "university of student alice": {"denotation": "(list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "paraphrases": ["what university did alice attend", "what university does alice study at", "what is the university of alice", "alice is a student at which university", "find alice a student at university"]}, "employee whose end date is smaller than 2004": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee ended earlier than 2004", "people who quit their job before 2004", "employee whose end date is before 2004", "which employees left prior to 2004", "people that stopped working before 2004", "find me all employees who quit before 2004", "what worker left before 2004", "an employee ending before 2004", "what employees have an end date before 2004"]}, "end date of employee alice whose job title is software engineer": {"denotation": "(list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "paraphrases": ["what is the end date of alices job as software engineer", "when did software engineer alice left", "when did alice stop working as a software engineer", "when did alice quit her software engineer job"]}, "person whose birthplace is new york or beijing": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))", "paraphrases": ["who is born in new york or beijing", "people born in new york or beijing", "people who are born in new york or beijing", "find people born in new york or beijing"]}, "person that is logged in and whose gender is male": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.25) (name en.person.26) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.56) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "paraphrases": ["find me all males that are currently online", "people who are male and currently online", "any male who has logged in", "males who are online", "online male member"]}, "employee whose end date is at least start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees who finish on or after alice starts", "people who quit their job on the same day or after alice got hired", "which employee ended on alices start date", "name the employees who quit the job when alice was born ", "what employees have an end date that is employee alices start date or later", "which employeess last day was no earlier than alices first day", "employees who quit after alice started her job", "people that stopped working when alice started or after", "find employees with last day on or after alices first day"]}, "person that is friends with employee whose end date is at most 2004": {"denotation": "(list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.4) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find people who are friends with employees who have an end date no later than 2004", "friend of employee whose end date is not after 2004", "people that are friends with someone that stopped working in or before 2004", "find the people who are friends with people who quit their job before 2005", "who is friends with employees before or on 2004", "what person is friends with an employee who had an end date no later than 2004", "people who are friends with employees who started work before 2004", "find employees friend with a last day in 2004 or before", "friends of employees finishing before 2004", "who is the friend of an employee whose end date is before 2004", "find people that are friends with employees who have an end date no later than 2004", "who is friends with the employee that is leaving the company by 2004", "find friends of employees with last day in 2004 or before", "find me the employee who quit before 2004", "people who are friends with employees whose last day was in or before 2004", "friends with employee who quit their job till 2004", "who is friends with the employee that quit in 2004", "people who are friends with an employee whose end date is no later than 2004"]}, "person whose relationship status is single or married": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married)))", "paraphrases": ["all single or married persons", "which people are single or married", "find everyone who is either single or married"]}, "relationship status that is relationship status of alice and that is relationship status of alice": {"denotation": "(list (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "paraphrases": ["who has similar relationship status that of alice", "what is the relationship status of alice"]}, "person that student whose university is not brown university is friends with": {"denotation": "(list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.51) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["friends of people studied in universities other than brown university", "who is a person whose university is not brown university friends with", "who is friends with someone who didnt go to brown university", "find people with friends that went to school but not brown university", "find me friends of people studying somewhere other than brown university", "students friend whose university is not brown university", "find friends of students not attending brown university", "find people who are students of a university that is not brown and their friends", "which of my friends is at some school other than brown university", "name a friend of a student who did not study at brown university"]}, "person whose birthdate is larger than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "paraphrases": ["people born after alice finished school", "find someone born after alices graduation date", "who was born after alice left", "find people born after alices graduation from school", "person who has a birthday before alice graduates"]}, "student whose start date is smaller than birthdate of alice": {"denotation": "(list (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is before birth date of alice", "what student started earlier than alices birthdate", "what student has a start date before the birthdate of alice", "what student started before alice was born", "people that started school before alice was born", "what student has a start date before alices birthday", "people joined their study before alice born", "which students started before alices birthdate"]}, "student whose end date is smaller than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what student ended school before 2004 or 2010", "which students graduate before 2004 or 2010", "which student ending date is earlier than 2004", "students whose end date is smaller than 2004 and 2010", "student who finishes before 2004 or 2010", "students who finish before 2010", "people that finished school before 2004 or before 2010", "what students have an end date earlier than 2004 or 2010", "find students whose last day was before 2010"]}, "person whose birthplace is new york and whose gender is male": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.26) (name en.person.34) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.56) (name en.person.58) (name en.person.7) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "paraphrases": ["any male who is born in new york", "people who were born in new york and are male", "find me a male born in new york", "males who were born in new york"]}, "employee whose start date is at least start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["people that started working the same time or after alice did", "employee whose start date is not before start date of employee alice", "employees who have the same start date as alice", "which employees started no later than alice did", "which employee started at the same time as alice", "employees who started on alices start date or later", "employees who joined after  alice joined", "employees who start with or after alice", "find employees starting on or after alices first day", "find employees who have a start date that is the same as employee alice or greater"]}, "city that is birthplace of student whose start date is larger than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["find the birthplace city of students who have a start date later than 2004", "where were the people that started school after 2004 born", "the birthplace of a student starting after 2004", "what is birthplace of students who started after 2004", "birthplaces of students that started school after 2004", "birthplaces of students starting after 2004", "where were students born who started after 2004", "what city was the student that started after 2004 born in", "birth city of student whose start date is after 2004"]}, "person whose birthplace is new york and whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.29) (name en.person.34) (name en.person.38) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.56) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["find single people born in new york", "what person was born in new york and single", "single person born in new york", "find me everyone born in new york who is single"]}, "person that is friends with student whose end date is larger than 2004": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["which people are friends with students who graduate after 2004", "find people that are friends with students who have quit after 2004", "people who are friends with a student whose end date is after 2004", "people that are friends with someone that stopped school after 2004", "friend of student whose end date is after 2004", "find the people who are friends with students whose end date is farther than 2004", "who is the person that is friends with the student and graduated in 2004", "who is friends with the student who ended after 2004", "people who are friends with students who ended school after 2004"]}, "person whose gender is male and that is logged in": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.25) (name en.person.26) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.56) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "paraphrases": ["any male who is logged in", "males who are online", "males that are currently online"]}, "person that person whose height is 180 cm is friends with": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["name a friend of the person who is 180 cm tall", "friends of people with 180 cm height", "find people with a height of 180 cm and their friends", "find people who have friends that are 180 cm tall", "who has friends who are 180 cm tall", "friends of people who are taller than 180 cm", "who is the person that is 180 cm friends with"]}, "person whose birthdate is smaller than 2004": {"denotation": "(list (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["who is born before 2004", "what person has a birthdate earlier than 2004", "people born before 2004", "persons born before 2004"]}, "employee whose end date is smaller than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["an employee that ends before alice begins", "employees who finish before alice", "which employee has an end date earlier than alice", "employee who quit before alice was hired", "employees who are starting before alices last day", "what employees have an end date that is smaller than that of employee alice", "person that stopped working before alice stopped working", "employee whose end date is before end date of employee alice", "which employee quit before alice quit her job", "what employee has an end date that is before the end date of alice"]}, "student whose end date is smaller than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose end date is before end date of employee alice", "a student that ends before alice", "which student ended earlier than alice", "person who stopped school before alice stopped working", "what student has an end date that is before the end date of alice", "what student graduated before alice quit her job", "students who will have their last day before alice quits her job", "student who graduated before alice quit her job", "find students with an end date earlier than that of employee alice", "student who finishes before alice"]}, "person that student whose start date is not 2004 is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.51) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["who has friends that are students whos start date before 2004", "which students am i friends with who didnt start in 2004", "find friends of students with start dates other than 2004", "people who are friends with someone that did not start in 2004", "who is friends with the person who didnt start in 2004", "find a person who is a student with a start date that is not 2004 and their friends", "friends of people who started their studies in an year other than 2004", "find friends of people who did not start school in 2004", "who is friends with the student who did not start in 2004"]}, "person that the most number of person is friends with": {"denotation": "(list (name en.person.16) (name en.person.19) (name en.person.36) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["people that have the most friends", "who has most number of friends", "which person has the most number of friends", "who has the most friends", "find the person with the most friends"]}, "student whose start date is at least 2004 or 2010": {"denotation": "(list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students started school after 2004 or 2010", "students that will begin after 2004 and no later than 2010", "what students have a start date that is either 2004 or 2010", "what students started between 2004 and 2010", "students who began school in 2004 or later", "people that started school in or after 2004 or in or after 2010", "students who started in 2004 or 2010", "what students have a start date that is at least either 2004 or 2010"]}, "student whose start date is smaller than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["find students whose start date is less than that of student alice", "student whose start date is before start date of student alice", "find students starting before alice", "people that started school before alice did", "what student began before student alice did", "who started school before alice", "student whose start date  is before alices", "which students started school before alice started school"]}, "person whose height is 180 cm and whose employer is mckinsey": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "paraphrases": ["which employee of mckinsey is 180 cm tall", "who does mckinsey employ who is 180 cm tall", "which of mckinseys employees is 180 cm tall", "a 180 cm tall mckinsey employee", "find people with a height of 180 cm and micknsey as their employer", "who is 180 cm tall working at mckinsey", "find people employed by mckinsey who are 180 cm tall", "180 cm tall people worked at mckinsey", "who works at mckinsey and is 180 cm tall", "people who work at mckinsey and are 180 cm tall"]}, "person that student whose field of study is not computer science is friends with": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.51) (name en.person.54) (name en.person.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["a friend of a noncomputer science student", "who has friends who do not have computer science as a major", "who are some of my noncomputer science major connections friends with", "find friends who are not in computer science", "who is friends with the student who is not studying computer science", "find people who are students with a field of study that is not computer science and their friends", "find friends of people who did not study computer science in school", "who is friends with the non computer science major", "friends of people who studied the fields other than computer science", "who is a person whose field of study is not computer science friends with"]}, "relationship status that is relationship status of employee whose end date is at least 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what is the relationship status of people who stopped working in 2004 or later", "whats the relationship status of employees who quit after 2004", "what is the relationship status of employees whose last day was no earlier than 2004", "relationship status of employee finishing contemporaneous to or after 2004", "what are the relationship statuses of people who quit their job in or after 2004", "relationship status of people who quit their job after 2003", "what is the relationship status of an employee who quit in 2004 or later", "what is the employees relationship status who ended in 2004", "find the relationship status of an employee who has an end date of 2004"]}, "student whose start date is smaller than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people who joined their study before alice completed", "find students with a start date that is earlier than that of fellow student alice", "which student left school before alice left school", "which students started before the day alice graduated", "a student that starts before alice finishes", "students who start before alice finishes", "people that started school before alice stopped", "student whose start date is before end date of student alice", "find student whose first day if before alices last day", "which student started earlier than alices end date"]}, "person whose birthdate is smaller than birthdate of alice": {"denotation": "(list (name en.person.12) (name en.person.16) (name en.person.3) (name en.person.38) (name en.person.41) (name en.person.42) (name en.person.46) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "paraphrases": ["find someone who was born before alice", "who is younger than alice", "people born before alice", "what person was born earlier than that of alice", "who was born before alice"]}, "student whose university is brown university or ucla": {"denotation": "(list (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.38) (name en.person.4) (name en.person.43) (name en.person.45) (name en.person.51) (name en.person.55) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students go to brown university or ucla", "students from brown university or ucla", "student whose university is either brown university or ucla", "name the students of brown university ", "who goes to brown university or ucla", "students at brown or ucla", "find me all students who attended either brown university or ucla", "student that is enrolled in brown or ucla university", "find students whose university is either brown university or ucla", "find students attending brown or ucla"]}, "employee whose start date is smaller than start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee whose start date is before start date of student alice", "find employees starting before alice", "what employee has a start date earlier than the start date of alice", "what employees have a start date before that of student alice", "employee who started to work before alices enrollment in school", "find the people who joined their job before alice joined her studies", "employees who started before alice started school", "employees starting before alice", "people that started work before alice started school", "name an employee who started before the student named alice"]}, "end date of employee alice whose employer is mckinsey": {"denotation": "(list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "paraphrases": ["when did alice stop working for mckinsey", "what is the end date of alice at mckinseys", "when did alice quit job at mckinsey", "when did alice quit working for mckinsey"]}, "student whose end date is smaller than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have an end date less than that of the start date of employee alice", "student whose end date is before start date of employee alice", "people who completed education before alice joined work", "students whose end date is before alices start date", "people that stopped school before alice started working", "find students with last days before alices first day", "what are the start and end employment dates of alice", "students who graduated before alice started work"]}, "employee that has the smallest start date": {"denotation": "(list (name en.person.30) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employees has the least recent start date", "which employee was the first to be hired", "employee starting the soonest", "which employee started earliest", "what employee started the earliest", "who was the first person to start working", "which employee has the earliest start date", "employee who started earliest", "what employee was hired last", "find employee with the earliest start date"]}, "person that person that alice is friends with is friends with": {"denotation": "(list (name en.person.15) (name en.person.25))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "paraphrases": ["people that have friends that alice is friends with", "which people are friends with alices friends", "which people are friends of alices friends", "people those who are friends of friends of alice", "who are some of alices friends connections", "what people are friens with alice"]}, "person whose relationship status is single and that is logged in": {"denotation": null, "formula": null, "paraphrases": ["people who are single that are currently online", "who is logged in as well as logged in", "people that are currently online that are single", "find me all the online singles", "find all people that are single and online"]}, "start date of employee alice whose end date is 2004": {"denotation": "(list (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "paraphrases": ["when did alice start the job she left in 2004", "alice quit her job in 2004 when did she start it", "when did alice start the job that she quit in 2004", "start date of alices employment which ended in 2004"]}, "person that is logged in": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.6) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)))", "paraphrases": ["all people currently online", "what person is logged in", "who is the person who has logged in ", "people that are currently online"]}, "person that person whose birthplace is new york is friends with": {"denotation": "(list (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "paraphrases": ["friend of alices friend who is from new york", "who is friends with the person from new york", "find people who have a birthplace of new york and their friends", "find the friends of the people born in new york", "find friends of people who were born in new york", "find friends of people born in new york", "who is friends with someone born in new york", "friends of friends of people born in new york", "who is now friends with the person who was born in new york", "a friend of someone born in new york"]}, "end date of employee alice": {"denotation": null, "formula": null, "paraphrases": ["what is alices termination date", "when did alice quit", "when did alice stop working", "alices quit date", "what was alices last day of work"]}, "employee whose employer is employer of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employee who works with alice", "employee who shares same employer with employee alice", "how many people have the same employer as alice", "find employees who have an employer different from that of alice", "who works for the same employer as ailce", "who is the boss of alice", "who is alices boss", "employees who share a workplace with alive", "which employee has the same boss as alice"]}, "student whose end date is start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school when alice started", "student whose end date is on the date student alice started", "find me students whose end dates are the same as the start date of alice", "students who have the same end date as the start date of student alice", "find student whose last day matches alices start date", "what students completed school the same year alice began", "a student ending when alice starts", "students finishing when alice starts", "students who left when alice started as a student", "which students graduate the day alice starts school"]}, "person that employee whose end date is not 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who is friends with someone who didnt stop working in 2004", "people who have friends and did not quit their job in 2004", "people who are friends of employees with a 2004 end date", "a friend of an employee who did not quit in 2004", "friends of people who quit their jobs in an year other than 2004", "name the friend of an employee who did not quit in 2004", "what employee has an end date before 2004", "find friends of people who didnt lose employment in 2004", "find friends of employee with end date not in 2004", "who is friends with employees who have an end date that is not 2004"]}, "person that is logged in and that alice is friends with": {"denotation": "(list (name en.person.14))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["which of alices friends are online right now", "what people are logged in who are also friends with alice", "which of alices friends is online", "find people who are logged in who are alices friends", "people who are friends with alice and currently online", "who is online and is friends with", "alices friends who are currently online", "name a friend of alice who is online", "alices friends who are logged in", "frinds of alice currently logged in"]}, "employee whose end date is at most end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employees finishing before alice", "employees who quit as late as alice", "people that stopped working when alice stopped school or before", "which worker left on or before the day student alice started", "an employee ending before or when alice ends", "which employees had their last day no later than alices graduation", "which employee quit on or before the student alice", "what employees have an end date that is no later than that of student alice", "find employee with last day same as or before alices"]}, "person that is friends with alice": {"denotation": null, "formula": null, "paraphrases": ["who is alices friend"]}, "person whose height is person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["find people who are 180 cm tall", "who is the 180 cm tall", "people that are 180 cm tall", "which peolpe are exactly 180 cm tall", "find all people who are 180 cm tall"]}, "student whose start date is at least birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student who is enrolled on the day of alices birthday", "students who start after alices birthday", "which students started no earlier than alices birthdate", "which student started on alices birthdate", "student whose start date is not before birth date of alice", "find me the student whose start date is on alices birthday", "students who started no earlier than alices birthdate", "find students starting on or after alices birthday", "people that started school on or after alices birthdate", "what students have a start date that is equal to alices birthday or later"]}, "student whose end date is at least end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students graduate no sooner than alices graduation day", "people that finished school at the same time as or before alice did", "what students have an end date that is the same of later than student alice", "find students with last day is on or after alices last day", "students who finished by the time alice finished", "student whose end date is not before end date of student alice", "students who finish with or after alice", "students whose end date is on alices end date or later", "which students end date happends the same time as  alice"]}, "person that has the least number of relationship status": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "paraphrases": ["which person has the least number of relationship statuses", "people that have the least number of relationship statuses", "who has minimum number of relationship statuses", "who has the least number of relationship statuses", "find people who have only 1 relationship status"]}, "person that is friends with alice and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["which of alices friends is 180 cm tall", "alices friends with a height of 180 cm", "find all people who are friends with alice and are 180 cm tall", "who is friends with alice and is 180 cm tall", "people who are friends with alice whose height is 180 cm", "name a person who is 180 cm who is friends with alice", "which people are friends with alice and is 180 cm tall", "what people are friends with alice and have a height of 180 cm"]}, "person whose birthdate is larger than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "paraphrases": ["who was born after alice started", "people born after alice started working", "what person has a birthdate larger than that of alice", "people who were born after alice started working"]}, "person whose birthdate is 2004 and whose relationship status is single": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "paraphrases": ["people born in 2004 that are single", "singles who were born in 2004", "people who were born in 2004 and are single", "anyone single born in 2004", "find all people who are not in a relationship and were born in 2004"]}, "person whose birthdate is 2004 and whose gender is male": {"denotation": null, "formula": null, "paraphrases": ["any male born in 2004", "find males born in 2004", "males born in 2004", "find me males born in 2004"]}, "person whose relationship status is single and whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "paraphrases": ["people who are single and 180 cm tall", "single person 180 cm tall", "which single people are 180 cm tall", "people 180 cm tall who are single", "what single person is 180 cm tall", "all 180 cm tall singles", "find people who have a height of 180 cm and a relationship status of single"]}, "student whose start date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["which students started in years other than 2004", "student whose start date is not 2004", "students who did not start in 2004", "who went to school but did not start in 2004", "what students have a start date that is anything but 2004", "students not starting in 2004", "people who joined study in years other than 2004", "student who did not join in 2004", "find students with start dates other than 2004"]}, "employee whose start date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["working people that did not start in 2004", "find employees starting other than in 2004", "which employee did not start in 2004", "find employees who have a start date other than 2004", "employee whose start date is not 2004", "employees who did not start in 2004", "a worker who didnt start in 2004", "employees not starting in 2004"]}, "end date of employee alice whose end date is 2004": {"denotation": "(list (date 2004 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "paraphrases": ["when did alice leave in 2004", "what date did alice leave her job in 2004", "find people with employment end date as 2004", "what date in 2004 did alice stop working", "what date in 2004 is alices last day of work"]}, "employee that has the largest end date": {"denotation": "(list (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employees last day was most recently", "what employee quit their job last", "which employee has the largest end date", "find employees with the latest end dates", "employee who resigned recently", "find employee with latest last day", "who quit working most recently", "which employee quit recently", "employee with largest end date", "who was the last employee to quit"]}, "software engineer or program manager": {"denotation": "(list (name en.job_title.program_manager) (name en.job_title.software_engineer))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))", "paraphrases": ["find me a program manager or a software engineer", "people that are software engineers or program managers", "people who are software engineers or project managers", "who is a software engineer or program manager"]}, "student whose end date is at least birthdate of alice": {"denotation": "(list (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["who is a student whose end date is at least alices birthday", "students finishing on or after alices birthday", "who quit after alices birthday", "people that stopped school when alice was born or after", "students who ended school on or after the day alice was born", "a student who left on or after alices birthday", "what student had an end date that is later than the birthdate of alice", "find students with an end date that is equal to or greater than the birthdate of alice", "students who graduated on or after alices birthdate"]}, "student whose start date is at most 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student who started not after 2004", "people that started school in or before 2004", "students who enrolled in or before 2004", "students who started in 2004 or before", "students who start before or on 2004", "which students started no later than 2004", "find a student who started no later than 2004", "what student has a start date no later than 2004", "find students with a start date no later than 2004", "student who started at or before 2004"]}, "person that employee whose start date is at least 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.51) (name en.person.56) (name en.person.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["fine me friends of people who joined their jobs after 2003", "who is friends with the person who started working in 2004", "people who are friends with the smployee starting by 2994", "find friends of people who started work in 2004 at the earliest", "a friend of someone with a start date of at least 2004", "find employees who have a start date of 2004 or later and their friends", "who is friends with the employee who started no later than 2004", "friend of employee whose start date is at least 2004", "who are friends of people who werent working until at least 2004"]}, "gender that is gender of less than two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["gender that has less than two people", "what is the gender of an individual", "find people with a gender that less than two people have", "gender of only one person", "what gender has less than two people", "which people have the same gender as fewer than two people", "is there a gender less than two people have", "what is the gender of that person", "find the gender of fewer than two people"]}, "employee whose start date is larger than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employee started after employee alice did", "what employees have a start date after the start date of employee alice", "people that started working after alice did", "employees starting after alice", "which employees started after alice did", "find employee with a start date after alices", "which employee started after the employee alice", "employees who started after alice", "employee whose start date is after start date of employee alice"]}, "person that is friends with student whose field of study is not computer science": {"denotation": "(list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["people who are friends with students who dont major in computer sience", "find a person whom is friends with students whose field of study is not computer science", "a person with a friend whos not a computer science major", "find students friends not studying computer science field", "a friend of a student that isnt in computer science", "people that are friends with someone in school studying something other than computer science", "what person is friends with a student who does not study computer science", "friends of people not studying computer science", "friend of student whose field of study is not computer science", "find me the student whose field of study is not computer science"]}, "person that is friends with person that alice is friends with": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "paraphrases": ["who is friends with a person that is friends with alice", "a mutual friend of alice", "people who are friends of alices friends"]}, "number of relationship status": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type))))", "paraphrases": ["how many relationship status options are there", "how many relationship statuses are there"]}, "person whose birthdate is at least 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["who was born after 2003", "find me all people born after 2004", "find people who were born in 2004 or later", "people born in 2004 or later", "people born in or after 2004"]}, "student whose end date is larger than end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what students have an end date that is later than that of employee alice", "people that stopped school after alice stopped working", "student ending after alice", "which student left school after alice quit her job", "students whose end date is later than the end date of alice", "students who finish after alice", "who has been a student longer than alice has been employed", "find students whose last day was after employee alices", "which students graduate after alices last day at work"]}, "relationship status that is relationship status of student whose start date is at least 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what are the current relationship statuses of students with a start date of 2004 or later", "what is thre relationship status of students who started no sooner than 2004", "whats the relationship status of the student starting on or before 2004", "relationship status of students who started no earlier than 2004", "find relationship statuses of students with a start date that is 2004 or later", "what is the relationship status of students who started no earlier than", "relationship status of students starting after or in 2004", "what is the relationship status of a student who had a start date in 2004 or later", "relationship status of all students who started after 2004", "find all the relationship statuses of the students that started in 2004 and before", "what are students relationship status who started in 2004 or later", "what is the relationship status of people that started school in or after 2004", "relationship statuses of students who began school in or after 2004", "relationship status of students starting after 2004", "what is relationship status of students starting in 2004 and after"]}, "relationship status that is relationship status of employee whose end date is not 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["the relationship status of a worker who didnt leave in 2004", "what is the relationship status of working people that did not stop in 2004", "what is relationship status of employees with last day other than 2004", "relationship status of employees whose end date is not 2004", "relationship status of employee whose end date is not 2004", "what is the employees relationship status who did not end in 2004", "find relationship statuses for employees who dont have an end date of 2004", "relationship status of employees not finishing in 2004", "what is the relationship status of employees whose last day was not in 2004"]}, "student whose end date is smaller than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["people that stopped school before alice did", "students whose end date is before alices", "what student has an end date no earlier than alices end date", "a student who left before student alice did", "name all students who quit before alice", "which students graduate before alice does", "find students who have an end date that is earlier than student alice", "people completed their study before alice", "find students with last day before alices", "student whose end date is before end date of student alice"]}, "person that is friends with alice or bob": {"denotation": "(list (name en.person.3) (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["find a friend of alice or bob", "who is friend of either alice or bob", "people that are friends with either alice or bob", "people that are friends with alice or bob"]}, "student whose end date is at most end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["students who left by the time alice left", "people that stopped school when alice stopped working or before", "student whose end date is not after end date of employee alice", "find students with last day before or the same as alices", "students finishing contemporaneous or before alice", "which students graduated no later than alices last day of work", "a student who left on the day alice did or before", "student whose end date is so later than alices", "locate students who have an end date that is no greater than employee alices", "which student ended no later than alice"]}, "employee that has the least number of job title": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees with fewest job titles", "employee that has the lowest job status", "an employee with the least job titles", "employee with the least job titles", "which employees have the fewest job titles", "find employees who have the fewest number of job titles", "employee with least number of job titles", "employees with the fewest job titles", "working person with the least job titles", "employees with one job title"]}, "person that is friends with person whose birthdate is 2004": {"denotation": "(list (name en.person.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "paraphrases": ["find all people who is friend with people born in 2004", "people that have a friend born in 2004", "friend of someone born in 2004", "who is friends with someone whos birthdate is 2004", "people who have friends that were born in 2004"]}, "student that has the smallest end date": {"denotation": "(list (name en.person.38) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student who started earliest", "which student has the earliest start date", "person who completed the education first", "which student started school the earliest", "find students whom have the earliest end date", "what student graduates the earliest", "who finished school the earliest", "find student with earliest last day", "which student left first"]}, "person that has the largest birthdate": {"denotation": "(list (name en.person.19) (name en.person.36) (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "paraphrases": ["who is the oldest person", "who was born most recently", "find the oldest person"]}, "city that is birthplace of person whose birthplace is new york": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "paraphrases": ["what city in new york is the persons birthplace", "all people born in new york", "what cities in new york were people born in"]}, "employee that has the most number of job title": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what worker has the most job titles", "person that has the most job titles", "what employees have the greatest amount of job titles", "employee who has most number of job titles", "what employee has the greatest number of job titles", "which employees has the largest amount of job titles", "who has the most jobs", "employees with the most job titles", "which employee has the most job titles", "who is the employee with the most job titles"]}, "student whose end date is smaller than 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["what student has an end date before 2004", "students who ended school in 2003 or earlier", "people that stopped school before 2004", "find the students that graduated before 2004", "a student ending before 2004", "student whose end date is before 2004", "who has a smaller end date than 2004", "students finishing before 2004", "who graduated before 2004", "find students who have an end date less than 2004"]}, "total height of person": {"denotation": "(list (number 6857 en.cm))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "paraphrases": ["height of a person", "find the height of a person", "what is the combined height of everyone in my network", "what is the total height of a person"]}, "student whose start date is at most end date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student whose start date is not after end date of employee alice", "people that started school on or before the day alice stopped working", "find me the student who started before alices departure", "what is the end date of employee alice", "which students start date is on or before alices end date", "students who started on or before alices end date", "what students have a start date that is no later than the end date of employee alice", "students starting before or contemporaneous to when alice finishes"]}, "end date of student alice": {"denotation": "(list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))", "paraphrases": ["what is alices end date when she was a student", "what is alices end date", "which date did student alice left", "when did alice finish school"]}, "relationship status that is relationship status of student whose start date is larger than 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the relationship status of people that started school after 2004", "what is the relationship status of the student whose start date is before 204", "what is the relationship status of studetns who started after 2004", "whats the relationship status of students who joined after 2004", "who has a relationship that started after 2004", "which student has the same relationship as the student who started after 2004", "find the relationship statuses of students with a start date later than 2004", "relationship statuses of students who began school after 2004", "relationship status of student whose start date is after 2004"]}, "new york or beijing": {"denotation": null, "formula": null, "paraphrases": ["either new york or beijing", "select new york or beijing"]}, "relationship status that is relationship status of person that is logged in": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "paraphrases": ["what are the relationship statuses of people that are currently online", "people who are single and currently online", "what is the relationship status of the person logged in", "anyone has similar relationship as of anyone logged in"]}, "person whose birthplace is birthplace of alice": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "paraphrases": ["which people were born in the same place as alice", "whats the birthplace of alice", "who was born in the same place as alice", "which employee has the same birthplace as alice", "find people with same birthplace as alice", "people born in the same place as alice", "person from same birth place as that of alice", "people who were born in the same place as alice", "find people who have the same birthplace as alice"]}, "person whose birthdate is smaller than end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "paraphrases": ["who was born before alices last day of school", "people who were born before alice graduated school", "people born before alice finished school"]}, "person whose height is 180 cm and whose university is brown university": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "paraphrases": ["which student from brown university is 180 cm tall", "which people are 180 cm at brown university", "which people at brown university are 180 cm in height", "180 cm tall brown university student", "180 cm tall persons studied in brown university", "find people who are 180 cm tall and attend brown university", "people who went to brown university and are single", "who is 180 cm tall and goes to brown university", "find people with a height of 180 cm that go to brown university"]}, "gender that is gender of the least number of person": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what is the least common gender", "what gender represents the least number of people", "who is same gender as of at least two persons", "what gender has the fewest people", "people of the least common gender"]}, "employee whose end date is smaller than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees whose end date is less than 2004 or 2010", "employees finishing before 2004", "employee whose end date is before 2004 or 2010", "find employees who quit theri job before 2004 or 2010", "people that stopped working before 2004 or before 2010", "find employee whose last day was before 2010", "employee who has a smaller date than 2004 and 2010", "which employees last day was no later than 2004 or 2010"]}, "relationship status that is relationship status of person whose birthdate is 2004": {"denotation": "(list (name en.relationship_status.married) (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "paraphrases": ["the relationship status of people born in 2004", "find the relationship status of people born in 2004", "what is the relationship status of a person born in 2004", "what relationship statuses are claimed by people born in 2004", "relationship status that is the same as a person born in 2004"]}, "person whose height is at least height of alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "paraphrases": ["people who are at least as tall as alice", "find me everyone at least as tall as alice", "find people at least as tall as alice", "person alices height or taller", "what person is at least the same height as that of alice"]}, "city that is birthplace of employee whose start date is not 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["birthplace of employees who didnt start in 2004", "birth  city of employee whose start date is not 2004", "birthplace of employees who didnt start working in 2004", "birthplace of people who did not start their job in 2004", "what is the birth city of a worker who didnt start in 2004", "find the birthplace cities of employees whom have a start date not equal to 2004", "what is the birthplace of employees who did not start in 2004", "what is the birthplace of people who did not start in 2004", "what city is the bithplace of an employee who did not start in 2004", "where were the people that started working in any year but 2004 born"]}, "city that is birthplace of student whose end date is smaller than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what city is the birthplace of the student who ended school before 2004", "where were the people that finished school before 2004 born", "birthplace of students who started before 2004", "what is the birth city of students whose end date is less than 2004", "birth city of student whose end date is before 2004", "birthplace of students whose end date is before 2004", "what city is the birthplace of students before 2004", "what is the birthplace of students who graduated before 2004", "list the birthplaces of people who completed their studies before 2004", "what is the birthplace of students who graduated before 2002"]}, "person that at most two person is friends with": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["find people with only one or two friends", "who has maximum 2 friends", "people that have two or less friends", "people with at most two friends", "what person has two or less friends"]}, "number of gender": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))", "paraphrases": ["how many males or females are there", "what is the total number of genders", "how many gender options are there", "how many genders are there"]}, "person that is friends with less than two person": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.31) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["people with only one friend", "find all people who are friends with less than two other people", "who has less than two friends", "people with less than two friends"]}, "employee whose start date is birthdate of alice": {"denotation": "(list (name en.person.12) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["what employee has a start date that is the birthdate of alice", "employee whose start date is birth date of alice", "employees starting on alices birthday", "which employee has a start date on alices birthdate", "employees who started working the same day alice was born", "find employees who have a start day at the same time as alices birthdate", "what employees started on alices birthday", "who started working on alices birthdate", "employees that are starting their new job on alices birthday", "an employee starting when alice was born"]}, "person whose birthplace is new york": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "paraphrases": ["what person was born in new york", "persons born in new york", "people born in new york"]}, "employee whose start date is smaller than 2004 or 2010": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find employees starting before 2010", "which employees started before 2004 or 2010", "an employee starting before 2004 or 2010", "employee who joined before 2004 or in 2010", "which employee started earlier than 2004 or 2010", "people that started working before 2004 or before 2010", "find employees who have a start date that is either less than 2004 or 2010", "find the people joined work before 2010", "students who started before 2004 or 2010"]}, "student whose start date is at most end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["student with start date not after end date of student alice", "what is the most end date of student alice", "find me the student who started on the same day as alices departure", "students starting before alice finishes", "students who started before or on alices last day", "student who joined on or before the day alice left", "people who started school on or before the day alice finished school", "what students have a start date that is no later than student alices end date"]}, "university of student alice whose end date is 2004": {"denotation": "(list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "paraphrases": ["which is the university of studen alice who finished in 2004", "what university did alice attend in 2004", "what university will alice finish in 2004", "what university did alice stop attending in 2004", "what university did alice graduate from in 2004"]}, "person that employee whose start date is at most 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["people with friends who started work in 2004 at the latest", "what employee has a start date of 2004", "people who are friends with people who got their current job before 2005", "who is friends with someone who started working during or before 2004", "people who are friends with someone who started working before 2005", "who is the employee whose start date was at least 2004 friends with", "person who is friends with someone whose start date is no later than 2004", "find employees with a start date no later than 2004 and their friends", "name a friend of the employee who started working no later than 2004", "friends of people who joined their jobs before 2005"]}, "city that is birthplace of person whose height is 180 cm": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "paraphrases": ["what city has a birthplace of a person who is at least 180 cm", "what cities are the birthplaces of people who have a height of 180 cm", "which city were people who are 180 cm tall born in", "where was the person born who is 180 cm tall", "birthplaces of all 180 cm tall people", "birth city of person whose height is 180 cm", "where was the 180 cm tall person born", "find the birthplace of all people 180 cm tall", "find the birthplaces of people who are 180 cm tall", "which cities were people 180 cm tall born in"]}, "gender that is gender of employee whose end date is not 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what gender is the employee whose end date is not 2004", "genders of employees not finishing in 2004", "what sex are the employees who did not quit in 2004", "what is the gender of employees who did not stop working in 2004", "gender employee whose end date is not 2004", "find the gender of employees who have an end date that is not 2004", "what is the gender of the employee who did not end in 2004", "what is the gender of working people that did not stop in 2004", "what is gender of employees with last days other than 2004", "gender of all employees who did not quit in 2004"]}, "employee whose end date is larger than start date of employee alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee who left after alice started", "which employees last day was after alices first day", "what employee was terminated after alice started working", "find the employee who who left after alice started", "employee whose end date is not after start date of employee alice", "find me employees who were no longer employed after alices start date", "find employees whom have an end date bigger than the start date for employee alice", "people that stopped working after alice started working", "which employee left their job after alice started"]}, "relationship status that is relationship status of two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what is the relationship status of those two people", "what is the relationship status of two individuals", "what is the relationship status of two people with the same status", "what is the relationship status of the two people", "relationship status of two persons", "what is the status of the two peoples relationship", "relationship status of two people", "what is the relationship status for two people", "what relationship status do two people share"]}, "gender of alice": {"denotation": "(list (name en.gender.female))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender)))", "paraphrases": ["is alice male or female", "what is alices gender"]}, "student whose end date is not 2004": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "paraphrases": ["one student who didnt stop in 2004", "find students with an end date not of 2004", "find student with last day other than 2004", "students who didnt graduate in 2004", "students that didnt finish in 2004", "which students quit outside of 2004", "students not finishing in 2004", "student whose end date is not 2004", "which students graduated any year but 2004", "a student not ending in 2004"]}, "relationship status that is relationship status of person that is friends with alice": {"denotation": "(list (name en.relationship_status.married))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "paraphrases": ["what is the relationship status of alices friends", "what relationship statuses are claimed by alices friends", "alices friends relationship status"]}, "person that more than two person is friends with": {"denotation": null, "formula": null, "paraphrases": ["find all people who have more than two friends"]}, "employee whose end date is 2004 or 2010": {"denotation": "(list (name en.person.53) (name en.person.55) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["find all employees who quit in 2004 and 2010", "people that stopped working in 2004 or 2010", "mention the name of an employee whose end date is either 2004 or 2010", "which employees last day was in 2004 or 2010", "find employees with last days of either 2004 or 2010", "people who quit job in 2004 and 2010", "what employees have an end date that is either 2004 or 2010", "which employee ended in 2004 or 2010"]}, "person that employee whose employer is not mckinsey is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.58) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who are people who work anywhere but mckinsey friends with", "find friends of people who do not work at mckinsey", "connections from friends who dont work at mckinsey", "who are the friends of those not employed by mckinsey", "who is friends with someone who doesnt work for mckinsey", "a friend is someone not employed by mckinsey", "name the friend of a person not employed by mckinsey", "friends of people worked in companies other than mckinsey", "who has friends that are not employees at mckinsey", "what people are employees of a employer that is not mckinsey friends with"]}, "city that is birthplace of less than two person": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what city were less than two people born in", "what is the city that is the birthplace of at least two people", "what city is the birthplace of less than two people", "find oneperson birthplaces", "name a city that fewer than two of the people were born in", "birthplace of only one person", "find the city that is the birthplace of only one person", "find the birth city of fewer than two people", "birthplace of less than two people"]}, "person whose birthdate is 2004 and that is logged in": {"denotation": "(list (name en.person.11) (name en.person.34) (name en.person.44))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "paraphrases": ["what person is logged in and has a birthdate in 2004", "the person logged in who is born in 2004", "find a person logged in that was born in 2004"]}, "person whose relationship status is relationship status of alice": {"denotation": "(list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))", "paraphrases": ["who has same relationship status as that of alice", "people with the same relationship status as alice", "people with relationship status as alice", "what person has a relationship status the same as alice"]}, "gender that is gender of employee whose end date is larger than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["what are genders of employees whose last day was after 2004", "gender of employee whose end date is after 2004", "gender of employees whose end date is later than 2004", "what is the gender of an employee with an end date later than 2004", "find me the genders of employees who started after 2004", "what is the gender of employees with an end date greater than 2004", "what genders are the people that stopped working after 2004", "which gender is the employee who ended after 2004"]}, "person that has the smallest height": {"denotation": "(list (name en.person.4) (name en.person.5))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "paraphrases": ["what person is the shortest", "who is the shortest person", "find the shortest person", "who is the shortest person in my network", "shortest person"]}, "person whose height is 180 cm and that alice is friends with": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "paraphrases": ["name a person 180 cm in height who is friends with alice", "which of alices friends is 180 cm tall", "friends of alice who are 180 cm tall", "alices friends who are 180 cm tall", "find people whose height is 180 cm that are also friends with alice", "find alices friend who is 180 cm tall", "who is friends with alice and is 180 cm tall", "name the friend of alice with a height of 180cm"]}, "job title of employee alice whose start date is 2004": {"denotation": "(list (name en.job_title.ceo) (name en.job_title.program_manager))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "paraphrases": ["what is job title of alice who is employed since 2004", "what job did alice start in 2004", "what was alices job title in 2004", "what was alices job when she started in 2004", "what is the job title of alice who started in 2004"]}, "person whose gender is gender that is gender of alice": {"denotation": null, "formula": null, "paraphrases": ["people whose gender is same as alice"]}, "employee whose end date is at most birthdate of alice": {"denotation": "(list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["employee ending before or when alice was born", "name an employee who quit before alice was born", "find employees with an end date that is no later than alices birthday", "employees who quit before alices birthday", "which employees last day is no later than alices birthdate", "which employee ended no greater than alices birthdate", "people that stopped working when alice was born  or before", "find me an employee whose end date is equal to or earlier than the birthdate of student alice", "employee who quit before birthdate of alice"]}, "city that is birthplace of student whose end date is not 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what is the birth city of a student who didnt stop in 2004", "where were students that did not finish in 2004 born", "birthplace of people who completed their study in an year other than 2004", "what is the birth city of the student who didnt end in 2004", "what is the birthplace of students who did not graduate in 2004", "birthplace of students whose end date is not in 2004", "what is the birthplace city of a student whose end date was not in 2004", "birth  city of student whose end date is not 2004", "find birthplace of student with last day other than 2004", "what are the birth cities of students who have an end date that is not 2004"]}, "gender that is gender of student whose start date is smaller than 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["gender of students starting before 2004", "gender of student whose start date is before 2004", "gender of students joining before 2004", "what is the gender of students sho started before 2004", "what gender is the student that starts before 2004", "the gender of a student who started before 2004", "what sex are the students who stated before 2004", "find the genders of students whom have start dates earlier than 2004", "the gender of a student starting before 2004", "what is the gender of people that started school before 2004"]}, "employee whose start date is end date of employee alice": {"denotation": "(list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employees have start dates the same as alices last day", "people that started working when alice stopped working", "employees who started when alice quit her job", "employee who was born when alice quit the job", "which employee started right when alice quit her job", "employees who start when alice leaves", "find employees starting on alices last day", "people who started working on the day alice quit her job", "find employees with a start date that is equal to the end date of employee alice"]}, "person that person that is logged in is friends with": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.31) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.4) (name en.person.42) (name en.person.49) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "paraphrases": ["which people are friends with the person currently logged in", "name a friend of the person who is online", "which of my friends connections are online now", "people that have friends that are currently online", "who is friends with the online person", "find friends of people who are logged in", "find the friends of people who are currently online", "who has friends that are online", "what people are logged in and whom are they friends with", "find me friends of people logged in"]}, "person whose height is 180 cm and that is relationship status of alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "paraphrases": ["a 180 cm tall person with same relationship status as alice", "people with the same relationship status as alice and are also 180 cm tall", "what people have a height of 180 cm and the same relationship status as alice", "whos 180 cm tall and in the same sort of relationship situaiton as alice", "who has the same relationship status as alice and is 180 cm tall", "who is in the same type of relationship as alice and is 180 cm tall", "people who are 180 cm tall and in a relationship with ailce", "who is 180 cm tall and the same relationship status as alice", "180 cm tall person with same relationship status as that of alice"]}, "person whose height is 180 cm and that is birthplace of alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "paraphrases": ["find people with a height of 180 cm and the same birthplace as alice", "who is 180 cm and from the same place as alice", "people who have the same birthplace as alice and are 180 cm tall", "180 cm tall person with same birth place as that of alice", "a 180 cm tall person born in same place as alice", "find me all the people that are 180 cm tall and were born in the same place as alice", "who is 180 cm tall and born in the same city as alice", "180 cm tall persons who were born in the same place where alice was born", "who is 180 cm tall and has the same birthplace as alice"]}, "person that is friends with person that is friends with alice": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "paraphrases": ["find people who are friends of alices friends", "what people are friends with those who are friends with alice", "a friend of alices friend", "who is friends with alices friend", "who are alices friends friends", "people who are a friend of a friend of alices"]}, "person whose height is at most 180 cm": {"denotation": null, "formula": null, "paraphrases": ["people who are shorter than 181 cm", "who is shorter than 181cm", "people who are 180 cm or less in height", "people that are at most 180 cm tall", "what person has a height of at the most 180 cm"]}, "city that is birthplace of employee whose start date is smaller than 2004": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["find birthplaces of employees who started before 2004", "find the birth city of employees whose start date is less than 2004", "birthplaces of employees starting before 2004", "birth city of student whose start date is before 2004", "find me the place of birth for all employees starting before 2004", "where were people that started work before 2004 born", "what is the birthplace of employees who started before 2004", "birthplace of employees who started before 2004", "what city is the birthplace of the employee who started earlier than 2004"]}, "city that is birthplace of alice and that is birthplace of alice": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "paraphrases": ["who is born in a city that alice was born in", "where was alice born"]}, "birthplace of alice": {"denotation": "(list (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace)))", "paraphrases": ["where is alice born", "what is alices birthplace", "where was alice born", "place where alice was born", "alices birthplace"]}, "person that employee whose end date is at least 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["which people are friends with employees whose last day of work was no earlier than 2004", "friends of people who quit their jobs after 2003", "who is friends with a person who didnt stop working in 2004", "person who is friends with an employee who retired at least 2004", "find friends of employees with 2004 end dates or later", "name the friend of an employee who quit after 2004", "who is friends with an employee whos end date is 2004", "find the friends of employees that quit in 2004 or later", "what employees have an end date of 2004 or later and who are their friends", "find friends of people who quit their jobs in 2004"]}, "relationship status that is not relationship status of alice": {"denotation": "(list (name en.relationship_status.married))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "paraphrases": ["people who have a different relationship status than alice", "relationship status that is not similar to alice", "what relationship statuses are not claimed by alice", "who has different relationship status to alice", "find me all people who are not in a relationship with alice"]}, "person that is friends with alice and that is friends with alice": {"denotation": "(list (name en.person.3) (name en.person.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "paraphrases": ["who is friend of alice", "who is the friend of alice", "what person is friends with alice"]}, "person whose height is at most 180 cm or 200 cm": {"denotation": "(list (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "paraphrases": ["find people whos height is in between 180cm200cm", "what person is 200 cm or shorter", "people shorter than 200 cm"]}, "relationship status that is relationship status of alice or bob": {"denotation": "(list (name en.relationship_status.single))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["what are alice and bobs relationship statuses", "what is the relationship status of alice and bob", "what is the relationship status of alice or bob"]}, "city that is birthplace of employee whose employer is not mckinsey": {"denotation": "(list (name en.city.beijing) (name en.city.new_york))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["where are all employees born who are not employed by mckinsey", "what is the birthplace of an employee who does not work for mckinsey", "birth city of employee whose employer is not mckinsey", "find birthplaces of nonmckinsey employees", "what are the birth cities of employees who are not employed by mickinsey", "the birthplace of someone not employed by mckinsey", "where were the working people that do not work for mckinsey born", "birthplace of employees who are not employed by mckinsey", "where was the employee born who does not work for mckinsey", "where were employees at companies other than mckinsey born"]}, "person that employee whose start date is larger than 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.51) (name en.person.56) (name en.person.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["a friend of someone emplyed after 2004", "friends of people who joined their jobs after 2004", "who has friends with a start date after 2004", "what employees have a start date later than 2004 and who are they friends with", "who is friends with the employee who began later than 2004", "people who have friends and started working after 2004", "people that are friends with the new emplyees that stars after 2004", "which people are friends with employees who started working after 2004", "who is friends with the person who started working after 2004", "friend of employee whose start date is larger than 2004"]}, "gender that is gender of the most number of person": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["what is the gender of most", "what is the most common gender", "people of the most numerous gender", "which gender is present in most number", "what gender has the most people"]}, "person whose birthdate is at most end date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "paraphrases": ["what person has a birthdate with at most that of alices", "person whos birthday is before alice graduates", "people born on or before the date alice stopped attending school", "people who were born after alice graduated school"]}, "person whose birthdate is at most start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "paraphrases": ["person who is older then alice", "people born on or before the day alice started school", "people born after alices first day of school"]}, "gender that is gender of employee whose start date is at most 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["the gender of an employee starting before or during 2004", "what is the gender of employees whose start date is no later than 2004", "what is the gender of employees who started no later than 2004", "what is employees gender who started in 2004 or earlier", "what is the gender of people that started working in or before 2004", "gender of employees who began working by 2004", "find the genders of employees who start date is no later than 2004", "gender of employees who start before or in 2004"]}, "average height of person": {"denotation": "(list (number 180.447 en.cm))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "paraphrases": ["what is the average height of people", "what is the average height of all the people in my network", "what is the average height of a person", "what is the average height of everyone"]}, "employee whose end date is at most start date of student alice": {"denotation": "(list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "paraphrases": ["which employee quit the day alice started", "employee whose end date not after start date of student alice", "people that stopped working when alice started school or before", "what employees have a end date that is no greater than the start date of student alice", "which employees had an end date before alice started school", "employee whose end date that is around alices start date", "an employee who left on or before the day student alice started", "find employees with last days on or before alices first day"]}, "person that employee whose start date is smaller than 2004 is friends with": {"denotation": "(list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.25) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "paraphrases": ["who is friends with the employee who started before 2004", "a friend of someone who started before 2004", "find me friends of people who joined their jobs before 2004", "people that are friends with the new emplyee starting before2994", "who are the friends of employees with a start date before 2004", "friends of employees who started after 2004", "find friends of people who started their job before 2004", "who is friends with the person who started working before 2004", "friend of employee whose start date is smaller than 2004", "what are the friends like for people who started working before 2004"]}, "gender that is gender of student whose start date is not 2004": {"denotation": "(list (name en.gender.female) (name en.gender.male))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "paraphrases": ["what sex are the students who did not start in 2004", "sex of students who didnt start school in 2004", "what is the gender of the students that did not start in 2004", "what is gender of students starting in years other than 2004", "what is the gender of students with a start date that is not the same as 2004", "what genders are people that started school in any year but 2004", "what is the gender of a student who did not begin in 2004", "gender of students not starting in 2004", "find me the gender of students who did not begin school in 2004", "gender of student whose start date is not 2004"]}, "city that is not birthplace of alice": {"denotation": "(list (name en.city.beijing))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))", "paraphrases": ["cities that alice was not born in", "where wa alice not born", "cities where alice was not born", "where was alice not born"]}, "person whose birthplace is new york and that is logged in": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.24) (name en.person.26) (name en.person.34) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.6) (name en.person.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "paraphrases": ["find people who are logged in and has the birth place as newyork", "find me all people that were born in new york that are currently online", "what logged in person was born in new york", "people born in new york and currently online"]}, "person whose birthplace is city that is birthplace of alice": {"denotation": "(list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "paraphrases": ["people born in the same city as alice", "find someone born in the same city as alice", "people who were born in the same city as alice", "find people who has the same birthplace as alice", "who is born in a city where alice is born"]}}