{"canonical": "color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color)))", "natural": "what color is brick 1"}
{"canonical": "block that block 1 is above and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string is_special)))", "natural": "select the block 1"}
{"canonical": "block that is right of block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me all blocks right of the block that block 1 is below"}
{"canonical": "block whose height is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "block whose height is at most 3 inches or 6 inches"}
{"canonical": "block that is right of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the brick that has the least blocks to the left of it"}
{"canonical": "block that is right of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is right of at most one block"}
{"canonical": "block that block that block 1 is left of is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block is to the right of block 1 "}
{"canonical": "block that is left of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "what 3 inch brick is to the left of brick 1"}
{"canonical": "block whose shape is shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))", "natural": "which brick is the same shape as brick 1"}
{"canonical": "block whose height is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "natural": "block whose height is not 3 inches"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all blocks whose width is smaller than 6 inches"}
{"canonical": "block that is above block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "block a above block that is above block 1"}
{"canonical": "block whose height is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find blocks that are taller than block 1 is long"}
{"canonical": "block that is right of block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find the block that is right and below block 1"}
{"canonical": "block that is left of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "block that is left of block whose length is 3 inches"}
{"canonical": "block that is right of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "what block is between block 1 and a block to the left of block 1"}
{"canonical": "block whose height is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "select all bricks with length of 1"}
{"canonical": "block that is left of block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "what block is to the left of the block above block 1"}
{"canonical": "block that has two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "natural": "find me all blocks that have two shapes"}
{"canonical": "block that is left of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks left and above block 1"}
{"canonical": "block that is special and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string is_special)))", "natural": "find a special block"}
{"canonical": "block that is below block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "which brick is below the brick to the right of brick 1"}
{"canonical": "block whose width is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "natural": "the unique 3 inch wide block"}
{"canonical": "block that has the smallest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "which block has the shortest length"}
{"canonical": "block that is left of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "find the 3 inch long block to the left of block 1"}
{"canonical": "block that is left of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find me all blocks left of block 1 or 2"}
{"canonical": "block that is below block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "choose the block below block 1 that is 3 inches long"}
{"canonical": "block whose width is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find a block wider than block 1 is tall"}
{"canonical": "block that not is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "natural": "is there a block located to the left of block 1"}
{"canonical": "block whose length is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "which brick is 3 inches wide and to the right of brick 1"}
{"canonical": "block that block 1 is left of and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "what block is to the right of block 1 and is in the shape of a pyramid"}
{"canonical": "block that has less than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))", "natural": "select a block with less than two colors"}
{"canonical": "block whose height is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find a block at most as tall as block 1s width"}
{"canonical": "block whose width is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick has a width less than the length of brick 1"}
{"canonical": "block whose length is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "what block is longer than block 1"}
{"canonical": "block that is special and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "natural": "what special blocks are left of block 1"}
{"canonical": "block that less than two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with less than 2 blocks to the left"}
{"canonical": "block that block 1 not is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string !=) en.block.block1))", "natural": "find me all blocks that block 1 is not under"}
{"canonical": "shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))", "natural": "what shape is brick 1"}
{"canonical": "block that at most two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks that is at most below 2 blocks"}
{"canonical": "block that block that is below block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "find me all blocks below which block 1 is above"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what brick has no more than two bricks to its left"}
{"canonical": "block whose length is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "natural": "which brick is not 3 inches long"}
{"canonical": "block that is right of block 1 and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block has block 1 at its left and right"}
{"canonical": "block that block 1 is above and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "block below and left from block 1"}
{"canonical": "number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "number of block"}
{"canonical": "block that is special and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "natural": "is  there a special block with a height that is only 3 inches"}
{"canonical": "block that block 1 is above and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find the block that block 1 is above"}
{"canonical": "block that at least two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks that has at least 2 blocks to the left"}
{"canonical": "block that is left of block 1 and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "select the block that is to the left and above block 1"}
{"canonical": "block that is above block 1 and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "find me all blocks over and right of block 1"}
{"canonical": "block that is special and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch high special blocks"}
{"canonical": "block that is below block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks below block 1 which block 1 is also below"}
{"canonical": "block whose width is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "select a block with equivalent width to block 1"}
{"canonical": "block that the most number of block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the single block that is located to the right of the largest number of blocks"}
{"canonical": "block that is right of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "which pyramid shaped block is to the right of block 1"}
{"canonical": "block that is right of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "choose a block that is the right of the furthest block to the left"}
{"canonical": "block whose height is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find a block shorter than the width of block 1"}
{"canonical": "block whose shape is a pyramid and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "natural": "find me all pyramid blocks that is left of block 1"}
{"canonical": "width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))", "natural": "how wide is block 1"}
{"canonical": "block that at least two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that is is left of block two"}
{"canonical": "block that block 1 is below and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is below"}
{"canonical": "block that block 1 or block 2 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "select the blocks above block 1 and 2"}
{"canonical": "block whose length is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is at least 3 inches long"}
{"canonical": "block whose height is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick is higher than brick 1 is long"}
{"canonical": "block whose length is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "select a brick whose length is at least the width of block 1"}
{"canonical": "block that is left of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "pyramid shaped block that is to the left of block 1"}
{"canonical": "block whose length is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all the blocks shorter than block 1"}
{"canonical": "block that block that block 1 is left of is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "find me all blocks that is left or right of block 1"}
{"canonical": "block that more than two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block right of more than two blocks"}
{"canonical": "block that block 1 or block 2 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find me all blocks right of blocks 1 or 2"}
{"canonical": "block that block that is below block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "2 blocks below block 1"}
{"canonical": "block that is right of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "2 blocks right of block 1"}
{"canonical": "block whose width is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me a block skinnier than block 1"}
{"canonical": "number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what is the number of the block"}
{"canonical": "block whose length is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which brick has a length smaller than 3 or 6 inches"}
{"canonical": "block that is above less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is above less than two bricks"}
{"canonical": "block whose length is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find a block that block 1 is longer than"}
{"canonical": "block whose height is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "select a block with a height of 1 block width"}
{"canonical": "block that is right of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block has less than two blocks to the left of it"}
{"canonical": "block that at most two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above at most two block"}
{"canonical": "block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "natural": "select the blocks to the left of block 1"}
{"canonical": "block that is above block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "block up and left from block 1"}
{"canonical": "block whose width is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "block whose width is at least height of block 1"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "find the blocks that have two shapes or less"}
{"canonical": "total width of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))", "natural": "what is the width of the block"}
{"canonical": "block whose length is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find a block that is at least 3 to 6 inches"}
{"canonical": "block that is below block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find the block underneath the pyramidshaped block"}
{"canonical": "block that block 1 or block 2 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "above block 1 or block 2"}
{"canonical": "block that is special and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "natural": "what special blocks are above block 1"}
{"canonical": "block that block 1 is below and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "block above and to right of block 1"}
{"canonical": "block that block 1 is above and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "block that has block 1 above and below"}
{"canonical": "block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find the block that is to the left of block 1"}
{"canonical": "block that is special and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "natural": "find me a special block to the left of block 1"}
{"canonical": "block that less than two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block that has less than 2 blocks to its left"}
{"canonical": "block that is below block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "what block is below the block that block 1 is below"}
{"canonical": "block whose length is 3 inches and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "natural": "find me all the 3 inch long blocks"}
{"canonical": "block that is right of block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "what block is to the right of the 3 inch wide block"}
{"canonical": "block that block 1 is right of and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "left of block 1"}
{"canonical": "block whose length is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "what blocks length is smaller than block 1s width"}
{"canonical": "block that is right of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block to the right of at least 2 blocks"}
{"canonical": "block that is left of block 1 and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "select the block above on the left"}
{"canonical": "block that block whose length is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "select the block that is on the left side of the block that is 3 inches in length"}
{"canonical": "block that block 1 is left of and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "is there a block to the right of block 1 and to the left of block 1"}
{"canonical": "block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "natural": "which brick is above brick 1"}
{"canonical": "block that block 1 is right of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "block right of block 1 which is 3 inches high"}
{"canonical": "block that is right of block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select the block that is to the right of block 1 and has a height of 3 inches"}
{"canonical": "block whose height is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "find a block with the same height as block 1"}
{"canonical": "block that block 1 or block 2 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find the block that is left of block 1 or block 2"}
{"canonical": "block whose length is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "find me all the 3 inch long bricks left of block 1"}
{"canonical": "block that block whose shape is a pyramid is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block left of pyramid"}
{"canonical": "block whose shape is a pyramid and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "natural": "what block has the shape of a pyramid and is to the left of block 1"}
{"canonical": "shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))", "natural": "describe the shape of block 1"}
{"canonical": "block that is right of block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "the block below block one and to the right of block 1"}
{"canonical": "block that block that is special is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me all special blocks that are above"}
{"canonical": "block that is left of block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "find me the block that is to the left of block 1 with a height of 3 inches"}
{"canonical": "block whose width is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks at most 3 inches wide"}
{"canonical": "block that is above less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above less than two blocks"}
{"canonical": "height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))", "natural": "height of block 1"}
{"canonical": "block that more than two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "is there a block to the left of more than two blocks"}
{"canonical": "block whose width is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "find me all 3 inch wide pyramid blocks"}
{"canonical": "block whose height is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "what block is 3 inches tall and pyramidshaped"}
{"canonical": "block whose shape is shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))", "natural": "find a block the same shape as block 1"}
{"canonical": "block that is above more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above two or more blocks"}
{"canonical": "block whose length is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "locate the block with a length that exceeds the width of block 1"}
{"canonical": "block that is special and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "natural": "find all the special blocks that are 3 inches long"}
{"canonical": "block that is above block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me all blocks above that block 1 is below"}
{"canonical": "block whose length is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "select the block with a length of 3 inches that is above block 1"}
{"canonical": "block that two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the block that is two blocks above that block"}
{"canonical": "block that has at least two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >=) (number 2)))", "natural": "blocks of two or more colors"}
{"canonical": "block that not is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "natural": "find me all blocks not right of block 1"}
{"canonical": "block whose length is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "select the 3 inch block below block 1"}
{"canonical": "block that is left of block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "what block is to the left of the 3 inch wide block"}
{"canonical": "block that is above block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "which brick is above the pyramidshaped block"}
{"canonical": "block that block 1 is right of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "3 inches long block at the left of block 1"}
{"canonical": "block that is left of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block to left of two or more blocks"}
{"canonical": "block that is special and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all special blocks that are below block 1"}
{"canonical": "block that block 1 is below and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "which 3 inches long block is above block 1"}
{"canonical": "block that block that block 1 is above is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "what is the block below and left of block 1"}
{"canonical": "block that is left of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "choose a block to the left of the special brick"}
{"canonical": "block that block whose height is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "select the block that is left of a block that is 3 inches"}
{"canonical": "block whose width is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "which pyramidshaped block is 3 inches wide"}
{"canonical": "block whose height is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "bloch longer than the length of block 1"}
{"canonical": "block that has two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (number 2)))", "natural": "block with two colors"}
{"canonical": "height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))", "natural": "what is the height of block 1"}
{"canonical": "block whose width is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which brick is no wider than 3 or 6 inches"}
{"canonical": "block that block that block 1 is left of is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "2nd block left of block 1"}
{"canonical": "block whose height is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is shorter than 3 inches"}
{"canonical": "block that is right of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me the block that is to the right of the special block"}
{"canonical": "block that is below block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "find the block underneath block 1 that is also 3 inches long"}
{"canonical": "block that is right of block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "below and right of block 1"}
{"canonical": "block that is left of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "block which is at the left of the block below block 1"}
{"canonical": "block that is below block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "which block is below block 1 that is at least 3 inches high"}
{"canonical": "block that has the smallest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "block with lowest width"}
{"canonical": "block that the least number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above least number of blocks"}
{"canonical": "block that has the least number of color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string color)))", "natural": "block that has the least number of color"}
{"canonical": "block that block 1 or block 2 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find me all blocks below blocks 1 or 2"}
{"canonical": "block whose shape is a pyramid and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find the block that has a shape of a pyramid and is to the right of block 1"}
{"canonical": "block that block 1 is left of and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "what block has block 1 above and left"}
{"canonical": "block that at most two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with at most 2 blocks to the right of it"}
{"canonical": "block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me the block that block 1 is below"}
{"canonical": "block whose height is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block whose height is smaller than length of block 1"}
{"canonical": "block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "natural": "find me all the blocks right of block 1"}
{"canonical": "block that is special and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "special block to right of block 1"}
{"canonical": "block that at most two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block beneath block 2"}
{"canonical": "block that two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block to the left of block 2"}
{"canonical": "block that block that block 1 is below is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "2 blocks below block 1"}
{"canonical": "block whose width is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me a block as wide as block 1 or wider"}
{"canonical": "block that block 1 is below and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "pyramid block above block 1"}
{"canonical": "block that block 1 is below and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "select the block that block 1 is below"}
{"canonical": "block that is above block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))", "natural": "choose the block above the speciallooking block 1"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "what pyramidshaped block is to the right of block 1"}
{"canonical": "block that is left of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "what block is to the left of either block 1 or block 2"}
{"canonical": "block that has the most number of color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string color)))", "natural": "which brick has the most colors"}
{"canonical": "block that is right of more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks that is right of more than 2 blocks"}
{"canonical": "block whose width is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me a block with equal or less width than block 1"}
{"canonical": "block that is right of block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "3 inch block right of block 1"}
{"canonical": "block that block 1 is right of and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me the block that block 1 is to ther right of and that has a shape of a pyramid"}
{"canonical": "block that is below block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find the block that is underneath block 1"}
{"canonical": "block that block that block 1 is right of is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks front and left of block 1"}
{"canonical": "block that not is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "natural": "which brick is not below brick 1"}
{"canonical": "block whose length is 3 inches and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find the block that has a length of 3 inches and is below block 1"}
{"canonical": "block that has at least two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >=) (number 2)))", "natural": "find me all blocks with at least 2 colors"}
{"canonical": "block whose length is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "block whose length is 3 inches and whose shape is a pyramid"}
{"canonical": "block that block that is below block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "left of and below block 1"}
{"canonical": "block whose height is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all the blocks at most as tall as block 1"}
{"canonical": "block whose shape is a pyramid and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "pyramid block below block 1"}
{"canonical": "block whose height is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all 3 inch tall blocks that block 1 is above"}
{"canonical": "block whose height is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "is there a block shorter in height than block 1 is wide"}
{"canonical": "block that block 1 is right of and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "left of block 1"}
{"canonical": "block whose length is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "find me all 3 or 6 inch long blocks"}
{"canonical": "block whose width is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "choose a block that is the same height as block 1"}
{"canonical": "block that is left of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "find me all blocks at block 1"}
{"canonical": "block whose length is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "natural": "find me a special 3 inch long block"}
{"canonical": "block that block 1 is below and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is below and right of"}
{"canonical": "block that block whose shape is a pyramid is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "what block is to the right of a pyramidshaped block"}
{"canonical": "block whose length is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "block whose length is minimum the height of block 1"}
{"canonical": "block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "natural": "select the 3 inch tall block"}
{"canonical": "block that is left of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the block that is to the left of two or more blocks"}
{"canonical": "block that is left of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "what block is to the left of the block that is to the right of block 1"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "block whose width is smaller than height of block 1"}
{"canonical": "block whose shape is a pyramid and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "natural": "a pyramid shaped block"}
{"canonical": "block whose width is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is at least 3 inches wide"}
{"canonical": "block whose shape is a pyramid and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "what pyramid blocks are above block 1"}
{"canonical": "block whose length is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find the block with a length shorter than that of block 1"}
{"canonical": "block that block 1 is below and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "what block is below block 1 and has a height of 3 inches"}
{"canonical": "block that is right of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "pyramid block rght of block 1"}
{"canonical": "height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))", "natural": "how tall is block 1"}
{"canonical": "block that block whose width is 3 inches is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "what block is to the right of the block that is three inches wide"}
{"canonical": "block whose length is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select the blocks less than 3 inches"}
{"canonical": "block that the most number of block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the brick that is to the furthest left"}
{"canonical": "block that less than two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "the blocks under block 2 are smaller"}
{"canonical": "block that at least two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block located to the right of at least two other blocks"}
{"canonical": "block that is left of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "block that is left of block 1 or block 2"}
{"canonical": "block whose length is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find the block that is shorer than block 1"}
{"canonical": "block that at most two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block to the left of two blocks or one but no more"}
{"canonical": "block whose length is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select a brick that is no bigger than 3 inches long"}
{"canonical": "block that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "find the shortest block"}
{"canonical": "block that block 1 is below and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "select the pyramid shaped block"}
{"canonical": "block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "natural": "is there a block piled on top of block 1"}
{"canonical": "block that is above block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "block that is above block that is special"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "find the block that is special and to the right of block 1"}
{"canonical": "block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "natural": "find me any pyramidshaped block"}
{"canonical": "block that is right of block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "select the blocks that are to the right of pyramid blocks"}
{"canonical": "block that is right of block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find the block that is right of block 1 and has a width of 3 inches"}
{"canonical": "block that block that block 1 is below is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find the block that block 1 is below"}
{"canonical": "block that is right of block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "above block 1 to the left"}
{"canonical": "block that two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with 2 blocks below it"}
{"canonical": "block that block that is special is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "right of special block"}
{"canonical": "block whose shape is a pyramid and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "natural": "find a pyramidshaped block with a 3 inch height"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find a block that has a length of less than 3 inches"}
{"canonical": "block that is above the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me the block with the least blocks below it"}
{"canonical": "block that is below at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block on bottom"}
{"canonical": "block whose length is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block that is shorter than block 1"}
{"canonical": "block that block 1 is right of and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is right and below of"}
{"canonical": "block that at least two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what brick has at least two bricks to its left"}
{"canonical": "block that block 1 is below and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string is_special)))", "natural": "find me all special blocks that block 1 is below"}
{"canonical": "block that two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that two block is right of"}
{"canonical": "block that is right of block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "select the blocks on the right of and below block 1"}
{"canonical": "block whose length is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find the block with the same length as block 1"}
{"canonical": "block that is left of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "block left and below block 1"}
{"canonical": "block that block that is special is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "block above special block"}
{"canonical": "block whose length is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick is no longer than brick 1"}
{"canonical": "block whose height is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "a brick between 3 and 6 inches"}
{"canonical": "block whose length is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "choose the brick below brick 1 that is 3 inches long"}
{"canonical": "block that has more than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))", "natural": "blocks of more than two colours"}
{"canonical": "block whose length is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "block whose length is 3 inches or 6 inches"}
{"canonical": "block whose width is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "what block has a width of 3 inches and is to the left of block 1"}
{"canonical": "block that is left of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "2nd left of block 1"}
{"canonical": "block whose height is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find me a block with a height of 3 inches that block 1 is to the left of"}
{"canonical": "block that is below more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block below two or more blocks"}
{"canonical": "block whose length is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which block is longer than block 1 is wide"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that at most two block is left of"}
{"canonical": "block that block 1 is left of and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find me all blocks below and right of block 1"}
{"canonical": "block whose height is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "is there a block that is taller than block 1"}
{"canonical": "block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))", "natural": "choose brick 1 or brick 2"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "find me all special blocks that is right of block 1"}
{"canonical": "block that is right of block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select the block 3 inched high to the right of block 1"}
{"canonical": "block that block that is right of block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "block two right from block 1"}
{"canonical": "block that is special and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all special blocks that block 1 is right of"}
{"canonical": "block whose height is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "which blocks have a height equal to the width of block 1"}
{"canonical": "block that block 1 is right of and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find the blocks to the right and left of block 1 "}
{"canonical": "block that block 1 is below and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "block that has a width of 3 inches and is below block 1"}
{"canonical": "block that more than two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what brick has more than 2 bricks below it"}
{"canonical": "block whose height is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "find me all 3 or 6 inch high blocks"}
{"canonical": "block that the least number of block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the block that is above the smallest group of blocks"}
{"canonical": "block that is right of block 1 and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find me the block that is to the right and above block 1"}
{"canonical": "block whose width is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "any block with width of either 3 inches or 6 inches"}
{"canonical": "block that is below block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "locate the block beneath the block that has a width of 3 inches"}
{"canonical": "block that block 1 is above and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "select all the pyramidshaped blocks above block1"}
{"canonical": "block whose width is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "find me all the 3 inch wide blocks below block 1"}
{"canonical": "block that is right of block 1 and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "block that is right of block 1 and that is right of block 1"}
{"canonical": "block that block that block 1 is below is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "right of block above block 1"}
{"canonical": "block whose color is color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))", "natural": "which block is the same color as block 1"}
{"canonical": "block that is left of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block that is left of block that is left of block 1"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "find me all pyramid blocks that is right of block 1"}
{"canonical": "block whose length is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "find the blocks with length and height of 3 inches "}
{"canonical": "block whose width is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which brick is no wider than brick 1"}
{"canonical": "block that is right of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "block that is right of block that is right of block 1"}
{"canonical": "block whose shape is a pyramid and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "natural": "select the pyramidshape blocks above block 1"}
{"canonical": "block that the least number of block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block with the least number of blocks below it"}
{"canonical": "block whose height is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "are there any blocks whose height is that of either 3 inches or 6 inches at most"}
{"canonical": "block that block that is left of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block left of block above block 1"}
{"canonical": "block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "natural": "select the block to the right of block 1"}
{"canonical": "block whose length is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is 3 inches or less long"}
{"canonical": "block that is above block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "is there a block on top of the pyramidshaped block"}
{"canonical": "block that is left of block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me all blocks left of that block 1 is below"}
{"canonical": "block whose shape is a pyramid and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "natural": "block whose shape is a pyramid and whose width is 3 inches"}
{"canonical": "block whose height is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find the block whose height is 3 inches"}
{"canonical": "block that is above block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "block two above block 1"}
{"canonical": "block whose width is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "block with same width that of block 1"}
{"canonical": "block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "natural": "select the blocks below block 1"}
{"canonical": "block that is special and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "natural": "what block is unique and shaped like a pyramid"}
{"canonical": "block whose height is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "find me a block that is either 3 or 6 inches tall"}
{"canonical": "block that block 1 is below and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "above and left of block 1"}
{"canonical": "block that block whose height is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block below three inch block"}
{"canonical": "block that is left of block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block at the left of pyramid shaped block"}
{"canonical": "block whose shape is a pyramid and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "natural": "find me all the special pyramid blocks"}
{"canonical": "block whose height is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "block with height of either 3 inches or 6 inches"}
{"canonical": "block that is right of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block right of block which is left of block 1"}
{"canonical": "block whose length is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "block whose length is length of block 1"}
{"canonical": "block whose height is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "find the blocks who have a height of 3 inches are are to the left of block 1"}
{"canonical": "block that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "which block is the tallest"}
{"canonical": "block that is below block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "block below and two left of block 1"}
{"canonical": "block that is left of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with at least 2 blocks to the right"}
{"canonical": "block that is right of block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "select a brick to the right of the brick directly below brick 1"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick has a length shorter than 3 inches"}
{"canonical": "block that is below block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "block below block 1"}
{"canonical": "block that has less than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))", "natural": "select a block that has less than two colors"}
{"canonical": "block that is right of block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "block at the right of 3 inches wide block"}
{"canonical": "block that two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that is on top of two other blocks"}
{"canonical": "block that is left of block 1 and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "select the blocks on the right and left of block 1"}
{"canonical": "block that block that is right of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "what block is to the right and below block 1"}
{"canonical": "block whose height is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find the block with a height less than 3 inches"}
{"canonical": "block whose length is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all blocks with a length shorter than the width of block 1"}
{"canonical": "total height of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))", "natural": "find the total height of the blocks"}
{"canonical": "block whose height is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "select blocks that have a height of 3 inches and are to the right of block 1"}
{"canonical": "block that block 1 is left of and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "select the block that block 1 is to the left and below"}
{"canonical": "block that block that block 1 is below is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "block two above block 1"}
{"canonical": "block whose length is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select a block that has a length of more than 3 inches"}
{"canonical": "block whose height is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "choose the brick that is 3 inches high below brick 1"}
{"canonical": "block whose height is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find the block with a height that does not surpass either 3 or 6 inches"}
{"canonical": "block that is right of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me the block that is to the right of the block that block 1 is above"}
{"canonical": "block whose height is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "select all 3 inch high blocks"}
{"canonical": "average height of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))", "natural": "what is the average height of the bricks"}
{"canonical": "block that has the smallest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "find the skinniest block"}
{"canonical": "block whose height is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "select all blocks with height equal to the length of block 1"}
{"canonical": "block whose length is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "find me a pyramidshaped block 3 inches long"}
{"canonical": "block that block that is below block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "find me all blocks 2 below block 1"}
{"canonical": "block whose length is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "3 inches long block to the left of block 1"}
{"canonical": "block that the least number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which block is at the very bottom"}
{"canonical": "block that is left of block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "choose the block that is below and to the left of block 1"}
{"canonical": "block that is below block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "choose block underneath block under block 1"}
{"canonical": "block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "block left of block 1"}
{"canonical": "block whose height is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select the block that is at least 3 inches tall"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "select the block that is in the shape of a pyramid and to the right of block 1"}
{"canonical": "number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what is the number of bricks"}
{"canonical": "block that block that block 1 is left of is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "block below and right of block 1"}
{"canonical": "block that not is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "natural": "select the block that block 1 is not below it"}
{"canonical": "block whose length is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "select a block below block 1 that is 3 inches long"}
{"canonical": "block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block is block 1 to the right of"}
{"canonical": "block that has the smallest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "select the shortest block"}
{"canonical": "block whose width is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "what block has the same width as block 1s height"}
{"canonical": "block that block 1 or block 2 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find blocks above block 1 or block 2"}
{"canonical": "block that is right of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block above and rigth from block 1"}
{"canonical": "block that is above block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "what block is above the block of block1 "}
{"canonical": "block that is left of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "which brick is left of brick 1 or 2"}
{"canonical": "block that is below block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me the block that is below the block that is below block 1"}
{"canonical": "block that is above at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find all blocks above 2 or fewer blocks"}
{"canonical": "block that is special and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "natural": "block that is special and whose length is 3 inches"}
{"canonical": "block that block 1 is left of and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block is left and right of block 1"}
{"canonical": "block that less than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick has less than two bricks above it"}
{"canonical": "block whose shape is not a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "natural": "find me all the blocks that is not a pyramid"}
{"canonical": "block that is below block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find me all the bricks below block 1 or 2"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "pyramid block right of block 1"}
{"canonical": "block that is left of block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "what block is above block 1"}
{"canonical": "block that block 1 is left of and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "what block is to the right of block 1"}
{"canonical": "block that is above block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find the block located on top of the block that is 3 inches high"}
{"canonical": "block whose width is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block has a width of 3 inches and block 1 is to the right of"}
{"canonical": "block that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "block that has the largest height"}
{"canonical": "total width of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))", "natural": "what is the total width of the blocks"}
{"canonical": "block that is left of block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find me all blocks left and below block 1"}
{"canonical": "block that block that is above block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find me the block that is above block 1"}
{"canonical": "block that is below block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "what block is below the special block"}
{"canonical": "block that block that block 1 is right of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks that is above and right of block 1"}
{"canonical": "block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "natural": "find a block shaped like a pyramid"}
{"canonical": "block that has the least number of color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string color)))", "natural": "select the least colorful brick"}
{"canonical": "block that is below block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me all blocks that is 2 blocks below block 1"}
{"canonical": "block that is left of block 1 and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "what block is to the left of block one"}
{"canonical": "block that is left of two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block left from two others"}
{"canonical": "block that is right of block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all blocks right of block 1 that is above it"}
{"canonical": "block that block 1 not is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string !=) en.block.block1))", "natural": "block not right of block 1"}
{"canonical": "block whose shape is not a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "natural": "locate the block that has a shape other than that of a pyramid"}
{"canonical": "block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "natural": "3 inches high block"}
{"canonical": "block that is right of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "find me all blocks right to whatever block 1 is left of"}
{"canonical": "block whose length is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "block whose length is at most either 3 inches or 6 inches"}
{"canonical": "block that is left of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block left of 2 blocks"}
{"canonical": "block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))", "natural": "locate block one or block 2"}
{"canonical": "block that is above block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "what 3 inches long block is above block 1"}
{"canonical": "block whose width is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "bricks that are the same size as brick 1"}
{"canonical": "block that block that is special is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "which is the block to the right of special block"}
{"canonical": "block that is above block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "choose the brick that is above the brick to the left of brick 1"}
{"canonical": "block that is above block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find the block that has a width of 3 inches and is above block 1"}
{"canonical": "block that block 1 is right of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "select the block that is to the left of block 1 and that has a length of 3 inches"}
{"canonical": "block that is above at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select a block with two blocks below it"}
{"canonical": "height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))", "natural": "how tall is block 1"}
{"canonical": "block that is left of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "find me all the blocks two blocks left of block 1"}
{"canonical": "block that is left of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "2 blocks right of block 1"}
{"canonical": "block that block that is right of block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "find me all blocks that is right of block 1"}
{"canonical": "block that block 1 is right of and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string is_special)))", "natural": "find me all special blocks left of block 1"}
{"canonical": "number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "how many blocks are there"}
{"canonical": "block whose width is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find me a block with the same width as block 1s length"}
{"canonical": "block that is below block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "which block is below block that is at the right of block 1"}
{"canonical": "block that block that block 1 is left of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block is left of and above block 1"}
{"canonical": "block that block whose length is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "select the block that has a length of two inches above another block"}
{"canonical": "block whose length is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks at most as long as block 1"}
{"canonical": "block whose height is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is at least 3 inches high"}
{"canonical": "block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))", "natural": "select block 1 or 2"}
{"canonical": "block that is left of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "locate a block that is on the left side of the smallest number of blocks"}
{"canonical": "block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is left of"}
{"canonical": "block whose length is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "which brick is as long as brick 1 is tall"}
{"canonical": "block that is above block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "find me all the blocks above 3 inch long blocks"}
{"canonical": "block that is above block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "locate the block that is on top of at least one other block and that has a length of 3 inches"}
{"canonical": "block whose length is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block whose length is at least length of block 1"}
{"canonical": "block that is right of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block to the right of the 3 inch high block"}
{"canonical": "block that block that is below block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "what blocks are below block 1"}
{"canonical": "block whose width is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "choose the block that has the same width as block 1 has height"}
{"canonical": "block that is right of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "what block is to the right and above block 1"}
{"canonical": "total length of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))", "natural": "how long is the block"}
{"canonical": "block that block 1 is above and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch long blocks below block 1"}
{"canonical": "block that is right of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "two blocks right of block 1"}
{"canonical": "block that is below block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me all blocks 2 below block 1"}
{"canonical": "block that is right of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block to the right of the most blocks"}
{"canonical": "block that block 1 is left of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find the block that block 1 is to the left of and above"}
{"canonical": "average height of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))", "natural": "find the average height of a block"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks with length less than 3 inches"}
{"canonical": "block whose height is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find blocks that are at least as tall as block 1 is wide"}
{"canonical": "block that is right of at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick has no more than two blocks to its left"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "special block to right of block 1"}
{"canonical": "block that block 1 is below and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "block above block one"}
{"canonical": "block whose height is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "what 3 inch block is below block 1"}
{"canonical": "block whose shape is not a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "natural": "block whose shape is not a pyramid"}
{"canonical": "block that more than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is above more than two blocks"}
{"canonical": "block that is above block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block that is above block whose shape is a pyramid"}
{"canonical": "block that is above block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))", "natural": "select all special blocks above block 1"}
{"canonical": "block that is special and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find special blocks with block 1 above them"}
{"canonical": "block that block that is left of block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block above and right from block 1"}
{"canonical": "block that block that is right of block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "select the block to the right of the block left of block 1"}
{"canonical": "block that is right of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block with the most blocks to the right of"}
{"canonical": "block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "natural": "select all pyramid blocks"}
{"canonical": "block that is below block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block that is below block whose height is 3 inches"}
{"canonical": "block that block 1 not is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string !=) en.block.block1))", "natural": "block that block one isnt left of"}
{"canonical": "block that is special and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "natural": "find me all special blocks above block 1"}
{"canonical": "block whose width is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks as wide as block 1 is long"}
{"canonical": "block that block that block 1 is left of is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block has block 1 left and right"}
{"canonical": "block that block 1 is below and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find blocks to the left and above block 1"}
{"canonical": "block that is below the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block has the most blocks above it"}
{"canonical": "block whose length is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block whose length is larger than width of block 1"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block within 2 blocks to the left"}
{"canonical": "block that is below two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks below 2 blocks"}
{"canonical": "average height of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))", "natural": "what is the average height of the blocks"}
{"canonical": "block that is left of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with at most two blocks to the left"}
{"canonical": "block that is left of block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find me all blocks and and over block 1"}
{"canonical": "block that block 1 is above and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "find me the block that block 1 is to the right and above"}
{"canonical": "block that has less than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))", "natural": "find the block with only one color"}
{"canonical": "block whose height is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find me all the blocks as tall as block 1 is long"}
{"canonical": "block whose shape is a pyramid or a cube", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))", "natural": "choose the brick shaped like a pyramid or a cube"}
{"canonical": "block whose length is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which block is at least 3 or 6 inches long"}
{"canonical": "block whose width is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all the blocks with a smaller width than the length of block 1"}
{"canonical": "block whose width is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all the bricks at least as wide as block 1 is tall"}
{"canonical": "block whose length is 3 inches and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "natural": "what pyramidshaped brick is 3 inches long"}
{"canonical": "block that has the most number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))", "natural": "select the block with the most shapes"}
{"canonical": "block that is above block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find me all blocks above and to the right of block 1"}
{"canonical": "block that is left of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which blocks are left of singleorfewer blocks"}
{"canonical": "block whose shape is a pyramid and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))", "natural": "find the 3 inch long pyramidshaped block"}
{"canonical": "block that has the least number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))", "natural": "what block has the fewest shapes"}
{"canonical": "block that is left of block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "below and left of block 1"}
{"canonical": "block that block 1 is above and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all blocks above and to the left of block 1"}
{"canonical": "block whose color is color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))", "natural": "find a block the same color as block 1"}
{"canonical": "block whose height is 3 inches and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "natural": "block 3 inches high and long"}
{"canonical": "block whose shape is a pyramid or a cube", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))", "natural": "find the block that is shaped like a pyramid or a cube"}
{"canonical": "block that block that block 1 is right of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "block that has block 1 at right and below"}
{"canonical": "block that block 1 is above and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "select the block above the left one"}
{"canonical": "block that at most two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block has two blocks or less below it"}
{"canonical": "block that is below block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "choose a 3 inch block under block 1"}
{"canonical": "block that at most two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that at most two block is below"}
{"canonical": "block that is below block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "choose a block that is below a 3 inch block"}
{"canonical": "block that is right of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "block right of the block below block 1"}
{"canonical": "block that block that is special is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me all special blocks that is below"}
{"canonical": "block that has more than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))", "natural": "multicolor block"}
{"canonical": "block whose height is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find the block taller than 3 inches"}
{"canonical": "block that has more than two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >) (number 2)))", "natural": "find me all blocks with at least 2 shapes"}
{"canonical": "block that block 1 is right of and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me the pyramid block that is to the right of block 1"}
{"canonical": "block whose length is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which block has a length smaller than block 1s width"}
{"canonical": "block whose height is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "what block is of 3 inches height and above block 1 "}
{"canonical": "block that block whose height is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "3 inch block near top"}
{"canonical": "block that is left of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "third block to the left"}
{"canonical": "block that is below block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "choose a block below the 3 inch brick"}
{"canonical": "block whose height is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is shorter than 3 inches"}
{"canonical": "block that block 1 is right of and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "pyramid block left of block 1"}
{"canonical": "block that block 1 is left of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "right and below block 1"}
{"canonical": "block whose width is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "what brick is 3 inches wide and 3 inches high"}
{"canonical": "block that at least two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above at leat two blocks"}
{"canonical": "block whose width is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all the bricks wider than the width of block 1"}
{"canonical": "block whose height is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find a block that is at least the same height as block 1"}
{"canonical": "block whose width is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "is there a block with a width equal to either 3 or 6 inches"}
{"canonical": "block whose length is 3 inches and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block 3 inches long and below block one"}
{"canonical": "block whose length is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "natural": "find a block without a length of 3 inches"}
{"canonical": "block that two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select block to the left of two blocks"}
{"canonical": "block whose width is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all blocks as wider than 3 inches"}
{"canonical": "block that block 1 is above and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "what block is above block 1 "}
{"canonical": "block that has at least two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >=) (number 2)))", "natural": "what block has two or more shapes"}
{"canonical": "block that block 1 is right of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "3 inch block left of block 1"}
{"canonical": "block that block 1 is left of and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is left and right of"}
{"canonical": "block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "name a block that has block 1 on its left"}
{"canonical": "block that is left of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the brick at the very left"}
{"canonical": "block that block that block 1 is above is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me all blocks that is above and right of block 1"}
{"canonical": "block that is left of block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "left of block 1"}
{"canonical": "block that block 1 is right of and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me all pyramid blocks that is left or right of block 1"}
{"canonical": "block that is above block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "pyramid block above block 1"}
{"canonical": "block that is right of block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "look below and right of block 1"}
{"canonical": "block that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "what block has the greatest height"}
{"canonical": "block that is left of block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find all blocks that are to the left of a pyramid block"}
{"canonical": "block that is above block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "find me all the blocks above 3 inch wide blocks"}
{"canonical": "block whose shape is a pyramid and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))", "natural": "find me a block with a pyramid shape and has a length of 3 inches"}
{"canonical": "block whose width is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks with a width shorter than 3 inches"}
{"canonical": "block that is left of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "which block is to the left of the 3inch high block"}
{"canonical": "block whose height is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find the block that has a height of 3 inches and that block 1 is to the right of"}
{"canonical": "block that more than two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is to the right of more than two blocks"}
{"canonical": "block whose length is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "3 inch long block above block 1"}
{"canonical": "block that block whose height is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me the block that has a height of 3 inches"}
{"canonical": "block that block whose length is 3 inches is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "get me a block to the right of a 3inch block"}
{"canonical": "block that is special and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "natural": "which special block is 3 inches wide"}
{"canonical": "block whose length is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks at most 3 inches long"}
{"canonical": "block that block 1 is left of and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "which block is above and to left of block 1 "}
{"canonical": "block that is right of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "what block is to the right of the 3 inch long block"}
{"canonical": "block that block that is left of block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "what block is left of the block that block 1 is to the right of"}
{"canonical": "block that block whose height is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "what block is left of a 3 inch block"}
{"canonical": "shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))", "natural": "what shape is block 1"}
{"canonical": "block that is above block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "what block is above the block that is above block 1"}
{"canonical": "block that block 1 is right of and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "find the block that is to the right of block 1"}
{"canonical": "block that block 1 is below and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me all pyramid blocks that block 1 is below"}
{"canonical": "block that has two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (number 2)))", "natural": "find me all blocks with 2 colors"}
{"canonical": "block whose height is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which brick is higher than 3 or 6 inches"}
{"canonical": "block that is below less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks below at most 1 blocks"}
{"canonical": "width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))", "natural": "how wide is block 1"}
{"canonical": "block that block that is left of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block that is left of the block above block 1"}
{"canonical": "block that is right of block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "right of block 1"}
{"canonical": "block whose width is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "select the block which is right to block 1 with 3 inches"}
{"canonical": "block that block 1 is left of and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "block to the left of block 1 thats 3 inches wide"}
{"canonical": "block that at least two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me a block below at least two blocks"}
{"canonical": "block that is special and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "natural": "which special brick is to the right of brick 1"}
{"canonical": "block whose length is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all the blocks longer than block 1"}
{"canonical": "block that is below block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "locate the block beneath block 1 that also has a width of 3 inches"}
{"canonical": "block that at least two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that at least two block is left of"}
{"canonical": "block whose height is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "find me all 3 inch tall blocks left of block 1"}
{"canonical": "block that is right of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me all blocks right of that block 1 is above"}
{"canonical": "block whose height is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "which block is the same height as block 1"}
{"canonical": "block that is below block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all blocks below that block 1 is above"}
{"canonical": "block that is left of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "which brick is to the left of the brick that is 3 inches tall"}
{"canonical": "block that block that is below block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "block below block one"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "block whose length is smaller than 3 inches"}
{"canonical": "block that has the least number of color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string color)))", "natural": "find me the block with the least colors"}
{"canonical": "block that is right of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find the block that is to the right of block 1 whose shape is also a pyramid"}
{"canonical": "block whose height is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all the blocks as tall as the width of block 1"}
{"canonical": "block that is below block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select the 3 inch tall block below block 1"}
{"canonical": "average width of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))", "natural": "what is the average block width"}
{"canonical": "block that block that is above block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find a block that is above block 1"}
{"canonical": "block whose length is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "natural": "choose a block that is not 3 inches"}
{"canonical": "block that is below less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is below less than two bricks"}
{"canonical": "block whose width is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block wider than block 1"}
{"canonical": "block that block 1 is below and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select the 3 inch high block above block 1"}
{"canonical": "block that is below block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "select the block that is below the block to the right of block 1"}
{"canonical": "block that block that block 1 is below is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find the block that is below block 1"}
{"canonical": "block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "natural": "3 inches long block"}
{"canonical": "block that block 1 is right of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select the block that is to the left of block 1 and has a total height of 3 inches"}
{"canonical": "block whose height is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "natural": "what blocks have a height not equal to 3 inches"}
{"canonical": "block that more than two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that more than two block is left of"}
{"canonical": "block that is right of block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "block that is right of block that is above block 1"}
{"canonical": "block whose height is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "select the bricks that are less than 6 inches tall then select the bricks that are less than 3 inches tall"}
{"canonical": "block that is below block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find me all blocks below pyramid blocks"}
{"canonical": "color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color)))", "natural": "what is the color of block 1"}
{"canonical": "block whose shape is a pyramid and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "natural": "select a special pyramid block"}
{"canonical": "block that block 1 is above and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "right and below block 1"}
{"canonical": "block that is below block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "find the block located beneath the second block that is located to the left of block 1"}
{"canonical": "block whose height is 3 inches and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "natural": "block with 3 inch height and 3 inch wide"}
{"canonical": "block that is above less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is above less than two block"}
{"canonical": "block that is below block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "block that is below block 1 or block 2"}
{"canonical": "average width of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))", "natural": "what is the average width of the blocks"}
{"canonical": "block that is right of block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "block that has block 1 above and left"}
{"canonical": "block that block 1 is right of and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block aboe and left of block 1"}
{"canonical": "block that not is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "natural": "find me all blocks not above block 1"}
{"canonical": "block that two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "is there a block beneath two other blocks"}
{"canonical": "block that is special and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "natural": "select the 3 inch wide special block"}
{"canonical": "block whose width is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "natural": "which brick is not 3 inches wide"}
{"canonical": "block that is left of block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "find me all the blocks left and below block 1"}
{"canonical": "block that is right of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find the block to the right of the 3 inch tall block"}
{"canonical": "block that more than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block with more than two blocks above it"}
{"canonical": "block that is left of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "what block is to the left of the 3 inch tall block"}
{"canonical": "block whose length is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find a block 6 inches or less long"}
{"canonical": "block that is below block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me the block that is below the block which block 1 is above"}
{"canonical": "block that is above block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find me all blocks 2 above block 1"}
{"canonical": "block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "natural": "find me all the pyramid blocks"}
{"canonical": "block that block 1 is below and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "block which has block 1s below and right"}
{"canonical": "block whose length is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find blocks with the length of block 1"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "find me all pyramid blocks which is right of block 1"}
{"canonical": "block whose width is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "choose a block that is bigger than block 1"}
{"canonical": "block whose length is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "a brick which length is between 3 and 6 inches"}
{"canonical": "block that block whose width is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "block right of 3 inch wide block"}
{"canonical": "block that block 1 is right of and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "block in block 1"}
{"canonical": "block that is above block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block above block 1"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block with two or less blocks to the left"}
{"canonical": "block that has the largest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "find the longest block"}
{"canonical": "block that has less than two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <) (number 2)))", "natural": "which brick has less than two shapes"}
{"canonical": "block that block 1 is right of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "which is the 3 inches tall block at the left of block 1"}
{"canonical": "block whose length is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find a block with a diameter that does not surpass the height of block 1"}
{"canonical": "block whose length is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "select block of length 3 or 6 inches"}
{"canonical": "block that block 1 is right of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me the block that is to the left and below block 1"}
{"canonical": "block that two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which block has two blocks above it"}
{"canonical": "block whose width is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks at least 3 inches wide"}
{"canonical": "block that is left of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "see block below block 1 and choose the one left of it"}
{"canonical": "block that block 1 is left of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "which block is 3 in height and has block 1 on its left"}
{"canonical": "block that is left of block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "left of block over block 1"}
{"canonical": "block that is above at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks above at most 2 blocks"}
{"canonical": "block whose height is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "select bricks that are at least 3 inches high"}
{"canonical": "block that is left of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me all the blocks left of 3 inch tall blocks"}
{"canonical": "block whose length is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which brick is at least as long as brick 1 is wide"}
{"canonical": "block that block 1 is right of and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string is_special)))", "natural": "block that left of block one and special"}
{"canonical": "block that is below block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block is below the block that block 1 is to the left of"}
{"canonical": "block whose height is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "choose a 3 inch tall brick"}
{"canonical": "block that the most number of block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block that has the most blocks to its right"}
{"canonical": "block that block 1 is above and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block is block one above and to the right of"}
{"canonical": "block that block 1 is below and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string is_special)))", "natural": "select the block that is special and below block 1"}
{"canonical": "block that block 1 is below and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "which block that is 3 in height has block 1 below it"}
{"canonical": "block that is left of block 1 and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "select the blocks to the right and left of block 1"}
{"canonical": "block that has two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (number 2)))", "natural": "select blocks that are two colors"}
{"canonical": "block whose width is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select the block with a width smaller than 3 inches"}
{"canonical": "block that block whose height is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me all 3 inch tall blocks"}
{"canonical": "block whose height is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks taller than the length of block 1"}
{"canonical": "block that not is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "natural": "find a block that is not above block 1"}
{"canonical": "block that is below block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "block below block right of block 1"}
{"canonical": "block whose length is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "choose a block which is as long as block 1 is wide"}
{"canonical": "block that block 1 is left of and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string is_special)))", "natural": "find me all special blocks that block 1 is left of"}
{"canonical": "block that is above block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "find the block up 1 and right 1 of block 1"}
{"canonical": "block whose height is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "block whose height is 3 inches or 6 inches"}
{"canonical": "block whose shape is a pyramid and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "natural": "block whose shape is a pyramid and that is special"}
{"canonical": "block that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "find the shortest block"}
{"canonical": "block that is below block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "which brick is below the special brick"}
{"canonical": "block whose width is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "select a brick that is at least as wide as brick 1 is long"}
{"canonical": "block that is below block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "natural": "find me the special blocks below block 1"}
{"canonical": "shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))", "natural": "find me all blocks with the shape of block 1"}
{"canonical": "block whose width is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "locate a block that is no wider than the height of block 1"}
{"canonical": "block whose width is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find a block that is wider than block 1"}
{"canonical": "block whose height is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "what block is at least as tall as block 1 is wide"}
{"canonical": "block that block 1 not is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string !=) en.block.block1))", "natural": "block not to right of block 1"}
{"canonical": "block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch high blocks"}
{"canonical": "block whose shape is a pyramid or a cube", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))", "natural": "find me all the pyramid or cube bricks"}
{"canonical": "block that block that is above block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find me all blocks that block 1 is above and right of"}
{"canonical": "block that is below block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "select the brick below and to the right of block 1"}
{"canonical": "block that is right of block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find me all the blocks right of the pyramid block"}
{"canonical": "block that block 1 is left of and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "what block is to the right of block 1 and has a width of 3 inches"}
{"canonical": "block that block whose shape is a pyramid is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block to the left of pyramid block"}
{"canonical": "block whose shape is a pyramid and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "natural": "which brick is shaped like a pyramid"}
{"canonical": "block that block whose shape is a pyramid is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block right of pyramid block"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "special block right of block 1"}
{"canonical": "block that the most number of block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that the most number of block is left of"}
{"canonical": "block that is above the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above most number of blocks"}
{"canonical": "block that block 1 is above and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks that above and below block 1"}
{"canonical": "block that block 1 is right of and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is right of and which is left of block 1"}
{"canonical": "block whose height is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "3 inch tall block  above block 1"}
{"canonical": "block whose width is 3 inches and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "select the block that has a width of 3 inches and is below block 1"}
{"canonical": "block whose length is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "block as long as the height of block 1"}
{"canonical": "block whose width is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks at least 3 inches in width"}
{"canonical": "block whose width is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "locate the block with a diameter less than that of block 1"}
{"canonical": "block that block that block 1 is right of is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks which block 1 is right and left of"}
{"canonical": "block that block 1 is right of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch tall blocks that block 1 is right of"}
{"canonical": "block that is right of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "which pyramid blocks are to the right of block 1"}
{"canonical": "block that is right of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is right of less than two block"}
{"canonical": "block that has two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "natural": "two shape block"}
{"canonical": "block whose height is 3 inches and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "natural": "the 3x3 inch block"}
{"canonical": "block that is right of block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks that is right of the block which block 1 is right of"}
{"canonical": "block that block 1 is left of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "select the left of block 1"}
{"canonical": "block whose height is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "block whose height is smaller than 3 inches"}
{"canonical": "block whose shape is a pyramid and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "natural": "find me all pyramid shaped blocks"}
{"canonical": "block that less than two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block that is to the left of block 2"}
{"canonical": "block whose shape is a pyramid and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "natural": "find me a 3 inch tall pyramidshaped block"}
{"canonical": "block that block 1 is right of and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "left and above block 1"}
{"canonical": "block whose height is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find a block with a height no more than 3 inches"}
{"canonical": "block whose width is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "choose blocks wider than block 1s height"}
{"canonical": "block whose height is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "what block is 3 inches or taller"}
{"canonical": "block that is below block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me all blocks below the special blocks"}
{"canonical": "block that is special and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "natural": "what special block is above block 1"}
{"canonical": "block whose height is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all 3 inch tall blocks that block 1 is right of"}
{"canonical": "block that at most two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the blocks that are under no more than 2 blocks"}
{"canonical": "block that is below the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is at the very top"}
{"canonical": "block whose length is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "find the block whose length and height is 3 inches"}
{"canonical": "block that block whose length is 3 inches is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "block above 3 inch block"}
{"canonical": "block whose height is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "select the blocks that have a height less than or equal to block 1s length"}
{"canonical": "block that is left of block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "find me a block that is to the left of the block with a width of 3 inches"}
{"canonical": "block that the most number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is below the most blocks"}
{"canonical": "block whose width is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "select a block that has a width that is the same width of block 1"}
{"canonical": "block whose width is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "natural": "find the 3 inch wide special block"}
{"canonical": "block that block 1 or block 2 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "block left of blocks 1 and 2"}
{"canonical": "block that block that is above block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "select the block to the left of the block above block 1"}
{"canonical": "block whose height is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find a block taller than 3 inches"}
{"canonical": "block that is above block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "find a block of 3 height above block 1"}
{"canonical": "block that block 1 is left of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "are there any 3inch long blocks to the right of block 1"}
{"canonical": "block whose shape is a pyramid and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me all pyramid blocks which block 1 is right of"}
{"canonical": "block whose height is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "find the 3 inch tall block below block 1"}
{"canonical": "block that is below block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find the pyramidshaped block below block 1"}
{"canonical": "block whose height is 3 inches and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "3 inch block above block 1"}
{"canonical": "block that block 1 is above and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "which block is above block 1"}
{"canonical": "block whose width is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "3 inch block below block 1"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "which brick has a width smaller than the height of brick 1"}
{"canonical": "block whose width is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick is no wider than brick 1 is long"}
{"canonical": "block that is left of block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "select the block left of block 1"}
{"canonical": "block that is above block 1 and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find the block that is on top of block 1"}
{"canonical": "block that has at least two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >=) (number 2)))", "natural": "name a block that has two or more shapes"}
{"canonical": "block that block 1 is right of and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "select the blocks to the left of and above block 1"}
{"canonical": "block whose height is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "3 inch block above block 1"}
{"canonical": "block whose width is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all blocks at least 3 inch wide"}
{"canonical": "block whose length is 3 inches and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "natural": "select all blocks that are 3 inches long"}
{"canonical": "block that the least number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that the least number of block is above"}
{"canonical": "block whose length is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select all blocks with length greater than 3"}
{"canonical": "block that is below at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that is below no more than two blocks"}
{"canonical": "block whose length is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "find me all blocks with the same width as block 1"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "block that has at most two shape"}
{"canonical": "block that the least number of block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is farthest to the left"}
{"canonical": "block that block whose width is 3 inches is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "select the blocks that are 3 inches wide"}
{"canonical": "block whose height is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "block whose height is at most 3 inches"}
{"canonical": "block whose width is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "which block is at least as wide as block 1 is tall"}
{"canonical": "block that has more than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))", "natural": "find me all blocks with more than 2 colors"}
{"canonical": "block that the least number of block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the brick with the least number of blocks to the left of it"}
{"canonical": "block that is right of more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the blocks to the right of greater that two blocks"}
{"canonical": "block whose height is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "which brick is taller than brick 1"}
{"canonical": "block that has the most number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))", "natural": "which brick has the most shapes"}
{"canonical": "block whose width is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which blocks exceed 3inches wide"}
{"canonical": "block that not is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "natural": "find me all the blocks not below block 1"}
{"canonical": "block that is above the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is closest to the bottom"}
{"canonical": "block that is right of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "what block is to the right of the block that block 1 is above"}
{"canonical": "block whose length is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all blocks with a length longer than 3 inches"}
{"canonical": "block that is below at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the blocks below block 2"}
{"canonical": "block that is left of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block with the least blocks to the left of"}
{"canonical": "block that is above block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me the block that is above the block that is below block 1"}
{"canonical": "block that is below block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find the block with the pyramidshaped block above it"}
{"canonical": "block that block 1 is left of and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "block that has block 1 in the right and left"}
{"canonical": "block that is left of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is furthest to the left"}
{"canonical": "block that is below block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me all blocks below 3 inch high blocks"}
{"canonical": "block that block that block 1 is right of is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks that block 1 is right and below"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find a block with a width that is less than the height of block 1"}
{"canonical": "block that is right of block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "what block is to the right of the block that block 1 is to the right of"}
{"canonical": "block that the most number of block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block which is at the right of most number of blocks"}
{"canonical": "block that is right of two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks 2 blocks from the right"}
{"canonical": "block that is below block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "block that is below block whose length is 3 inches"}
{"canonical": "block that is above block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "which brick is above the brick to the right of brick 1"}
{"canonical": "block that is above the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "is there a block that is on top of the fewest number of other blocks"}
{"canonical": "block that has the most number of color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string color)))", "natural": "choose the most colorful block"}
{"canonical": "block that is right of block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find me a 3inch wide block to the right of block 1"}
{"canonical": "block whose shape is not a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "natural": "choose a block that is not pyramid shaped"}
{"canonical": "block whose width is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find the blocks that have a width of 3 inches and are to the left of block 1"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all blocks shorter than 3 inches"}
{"canonical": "block that has less than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))", "natural": "which block is only a single color"}
{"canonical": "block whose height is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all blocks at least the same height as block 1"}
{"canonical": "block that block that block 1 is right of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "select the block that block 1 is to the right and above"}
{"canonical": "block that has at most two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "natural": "block with maximum two colors"}
{"canonical": "block whose length is 3 inches and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "natural": "find me all the blocks that is 3 inches wide and long"}
{"canonical": "block whose height is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find a block taller than block 1 is long"}
{"canonical": "block that is special and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "natural": "find me all special 3 inch long blocks"}
{"canonical": "block whose width is 3 inches and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch wide and long blocks"}
{"canonical": "block whose length is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find a block at least 3 inches long"}
{"canonical": "block whose width is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "natural": "select all bricks that are not 3 inches wide"}
{"canonical": "block whose length is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "3 inch block left of block 1"}
{"canonical": "block whose shape is a pyramid and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "natural": "pyramid block rght of block 1"}
{"canonical": "block whose width is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "what block has a width of 3 inches and is above block 1"}
{"canonical": "block that at most two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the bricks that have at most 2 blocks below it"}
{"canonical": "block whose length is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all the blocks at least 3 inches long"}
{"canonical": "block that more than two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is to left of more than two blocks"}
{"canonical": "block that block 1 is below and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me the block that block 1 is below and above"}
{"canonical": "block that is below block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find a block that is beneath either block 1 or block 2"}
{"canonical": "block that block 1 is left of and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block to the right of block 1 and above it"}
{"canonical": "block whose height is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "natural": "what blocks height is not 3 inches"}
{"canonical": "block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "natural": "which brick is 3 inches wide"}
{"canonical": "block whose width is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is less than 3 inches wide"}
{"canonical": "block that is left of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "find the block that is on the other side of a block located to the left of block 1"}
{"canonical": "block that is left of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "select the pyramidshaped block that is left of block 1"}
{"canonical": "block that is below less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block with less that two blocks above it"}
{"canonical": "length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))", "natural": "select all blocks of length 1"}
{"canonical": "block that block 1 is left of and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is left and below"}
{"canonical": "block whose length is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which brick is at most 3 or 6 inches long"}
{"canonical": "block that is left of less than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is to the left of less than two bricks"}
{"canonical": "block whose width is 3 inches and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "what block has a width of three inches and that block 1 is below"}
{"canonical": "block that is above block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "which brick is above a brick that is 3 inches wide"}
{"canonical": "block that not is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "natural": "which block is to the left of block 1"}
{"canonical": "block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))", "natural": "find me either block 1 or block 2"}
{"canonical": "block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "natural": "find the block with 3 inches of height"}
{"canonical": "block whose length is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "select the 3 inch long block to the right of block 1"}
{"canonical": "block that at least two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me a block with two blocks to the left of it"}
{"canonical": "block that block 1 is below and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "block below block 1 which is 3 inches long"}
{"canonical": "block that is special and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "natural": "a special block whose shape is pyramid"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "select the block that is in the shape of a pyramid and to the right of block 1"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what block is skinnier than the height of block 1"}
{"canonical": "block that block that is right of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "block to the right and below block 1"}
{"canonical": "block that is above block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block that is above block whose height is 3 inches"}
{"canonical": "block that has the least number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))", "natural": "choose the most shapeless block"}
{"canonical": "block that block whose length is 3 inches is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "find the block with 3 inches in length"}
{"canonical": "block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))", "natural": "either block 1 or 2"}
{"canonical": "block that at least two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me a block above at least two blocks"}
{"canonical": "block that is special and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "what blocks are special and are below block 1"}
{"canonical": "block whose length is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "block that is shorter than block one"}
{"canonical": "block whose length is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "block whose length is larger than 3 inches"}
{"canonical": "block that block 1 is below and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "name a block with block 1 below and to the right"}
{"canonical": "block that more than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks with more than 2 blocks above it"}
{"canonical": "block that is left of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "cannot paraphase"}
{"canonical": "block that at most two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick has no more than 2 bricks to its right"}
{"canonical": "average length of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))", "natural": "find me a block with average length"}
{"canonical": "block whose height is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block taller or same height as the width of block 1"}
{"canonical": "block that is below the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block that is beneath the smallest number of other blocks"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "choose a block that is not more than 2 shapes"}
{"canonical": "block that block 1 or block 2 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "what block is above block 2 or block 1"}
{"canonical": "block that is below block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find me all blocks that is below which block 1 is right of"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "choose a block that is smaller than block 1"}
{"canonical": "block that is right of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block with the fewest blocks to the left of it"}
{"canonical": "block whose length is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find a block with a length of 3 inches that block 1 is above"}
{"canonical": "block that is left of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me all blocks which is left and above block 1"}
{"canonical": "block whose length is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "find the block underneath block 1 that is 3 inches long"}
{"canonical": "block that block 1 is above and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "below and left of block 1"}
{"canonical": "block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "natural": "find a block that is 3 inches long"}
{"canonical": "block that block that is right of block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "2nd block right of block 1"}
{"canonical": "block whose length is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find me all the blocks as long as block 1"}
{"canonical": "block whose width is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "3 inch wide block to the right of block 1"}
{"canonical": "block that block that is special is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "what is the block above special block"}
{"canonical": "block that block 1 is above and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find the pyramid shaped block below block 1"}
{"canonical": "block that block that block 1 is right of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "find a block below the block on the right of block 1"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me a block smaller than 6 inches"}
{"canonical": "block that is above block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "block above block that is below block 1"}
{"canonical": "block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks above block 1"}
{"canonical": "block whose shape is shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))", "natural": "choose a block that looks just like block 1"}
{"canonical": "block whose width is larger than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block more wider than length of block 1"}
{"canonical": "block that is above two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block above two others"}
{"canonical": "block that block that block 1 is right of is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "what block is the block to the right and below block 1"}
{"canonical": "block that is below block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "which block is below a block that block 1 is to the right of"}
{"canonical": "block whose length is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "natural": "what brick is both unique and 3 inches"}
{"canonical": "block that is above block 1 and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find me all the blocks above block 1"}
{"canonical": "block whose width is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is no wider than 3 inches"}
{"canonical": "block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "natural": "block whose length is 3 inches"}
{"canonical": "block that block that block 1 is left of is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block is to the left and below block 1"}
{"canonical": "block that not is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "natural": "block that is not right of block 1"}
{"canonical": "block whose shape is shape of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))", "natural": "find the block with the same shape as block 1"}
{"canonical": "block whose length is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what block is at least as long as block 1s height"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "select the special block that is to the right of block 1"}
{"canonical": "total length of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))", "natural": "what is the total length of the blocks"}
{"canonical": "block whose width is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "what brick is as wide as brick 1 is long"}
{"canonical": "block that block whose height is 3 inches is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "what block is above a block that is three inches in height"}
{"canonical": "block that is right of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "what 3 inch brick is to the right of brick 1"}
{"canonical": "width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))", "natural": "what is the width of block 1"}
{"canonical": "block that is left of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me all the blocks left of special blocks"}
{"canonical": "block that block that is below block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "find me all blocks below that block 1 is left of"}
{"canonical": "block that block whose width is 3 inches is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "select the block that is below the block with a width of 3 inches"}
{"canonical": "block that the least number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the brick with the least blocks above it"}
{"canonical": "block that is below block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "block below block that is above block 1"}
{"canonical": "block that is right of block 1 and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch wide blocks that is right of block 1"}
{"canonical": "block that is right of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "select the block that is to the right of a block with a length of 3 inches"}
{"canonical": "block that is above block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "block that is above block whose width is 3 inches"}
{"canonical": "block whose height is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "what block three inches in height is above block 1"}
{"canonical": "block that block 1 is right of and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "natural": "find me all blocks above which block 1 is right of"}
{"canonical": "block that is right of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "block that is right of block 1 and whose length is 3 inches"}
{"canonical": "block whose shape is a pyramid and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "select the pyramidshaped block below block 1"}
{"canonical": "block that two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block above two blocks"}
{"canonical": "block whose height is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "natural": "gather all the blocks that are not 3 inches long"}
{"canonical": "block that is left of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch blocks left of block 1"}
{"canonical": "block that less than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "the block beneath the block which is less than two"}
{"canonical": "block whose width is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all blocks whose width is shorter than the height of block 1"}
{"canonical": "block whose length is 3 inches and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "natural": "find me a 3 inch long block"}
{"canonical": "block that block 1 is below and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "3 inch wide block above block 1"}
{"canonical": "block that is above block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "find me all blocks over that block 1 is left of"}
{"canonical": "block that is above block 1 and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "select me the block that is above block 1 and has a height of 3 inches"}
{"canonical": "width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))", "natural": "what is the width of block 1"}
{"canonical": "block whose height is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find me all the blocks taller than 3 inches"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "what block has two or less shapes"}
{"canonical": "block that is below block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "select the block that is below block 1"}
{"canonical": "block that more than two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that more than two block is right of"}
{"canonical": "color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color)))", "natural": "what color is block 1"}
{"canonical": "block that is right of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "find the block to the right of the block that is to the left of block 1"}
{"canonical": "block that at least two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block buried under at least two other blocks"}
{"canonical": "block that block whose shape is a pyramid is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find me all blocks right of pyramid blocks"}
{"canonical": "block that at least two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with at least 2 blocks above it"}
{"canonical": "block that is special and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "natural": "block that is special and that is left of block 1"}
{"canonical": "block whose width is at most 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "is there a block with a width that equals 3 or 6 inches maximum"}
{"canonical": "block that block that block 1 is above is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me the block that is above the block that is above block 1"}
{"canonical": "block whose width is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "natural": "which special brick is 3 inches wide"}
{"canonical": "block that block 1 or block 2 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "block below block 1 and block 2"}
{"canonical": "block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "get the blocks below block 1"}
{"canonical": "block that block 1 is below and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find me a block with a width of three inches that block 1 is below"}
{"canonical": "block that is special and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "select the special block above block 1"}
{"canonical": "block that is left of block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find me the block that is to the left of the block that block 1 is above"}
{"canonical": "block that has the most number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))", "natural": "find the block with the most shapes"}
{"canonical": "block that is right of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which block is farthest to the left"}
{"canonical": "block whose height is 3 inches and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "natural": "block whose height is 3 inches and whose width is 3 inches"}
{"canonical": "block whose length is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is less than 3 inches long"}
{"canonical": "block whose height is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all blocks shorter than the width of block 1"}
{"canonical": "block that has the smallest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "block that has the smallest width"}
{"canonical": "3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))", "natural": "what brick is at least 3 or 6 inches"}
{"canonical": "block that block that is above block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "block above block 1"}
{"canonical": "block whose length is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks as long as block 1"}
{"canonical": "block that has the least number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))", "natural": "select all blocks which has least number of shape"}
{"canonical": "block whose width is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find the block with 3 inches of width"}
{"canonical": "block that is below block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me a block below the 3 inch tall block"}
{"canonical": "block that block 1 is above and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "block above 1 block and left of 1 block"}
{"canonical": "block whose width is at least width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "choose a block thats the same width as block 1"}
{"canonical": "block that block whose height is 3 inches is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find a block to the right of a block 3 in height"}
{"canonical": "block that is left of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "find me all blocks left of 3 inch blocks"}
{"canonical": "block whose length is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "block whose length is at most height of block 1"}
{"canonical": "block that is below the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks below the smallest numbers of blocks"}
{"canonical": "block that block that is left of block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block to the left of block 1"}
{"canonical": "block that block 1 is below and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "above and to the right of block 1"}
{"canonical": "block that is left of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "what block is two blocks to the left of block 1"}
{"canonical": "block that is above block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "what block is above and to the left of block 1 "}
{"canonical": "block that is below the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is below the least number of block"}
{"canonical": "block that block that block 1 is above is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "select the block above the right one"}
{"canonical": "block that is left of block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find me all blocks left of pyramid blocks"}
{"canonical": "block whose width is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks as wide or wider than block 1"}
{"canonical": "block whose length is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "locate a block that is shorter than 3 inches or 6 inches"}
{"canonical": "block that block 1 is below and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all blocks that block 1 is below and above"}
{"canonical": "block that block that block 1 is right of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "left and below of block 1"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "find me all the blocks with at most 2 shapes"}
{"canonical": "block that is right of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "block at the right of a special block"}
{"canonical": "block whose width is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "select the 3 inch wide block left of block 1"}
{"canonical": "block that block 1 is left of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch tall blocks that block 1 is left of"}
{"canonical": "block that block 1 is left of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "what block is to the right of block 1 and has a length of 3 inches"}
{"canonical": "block whose height is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find me all 3 inch tall blocks which block 1 is left of"}
{"canonical": "block that block 1 is right of and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "what block has block 1 on the right"}
{"canonical": "block that has more than two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))", "natural": "dual colored block"}
{"canonical": "block that is right of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me all pyramid blocks right of block 1"}
{"canonical": "block whose height is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "3 inch tall block right from block 1"}
{"canonical": "block that is special and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all special blocks  below block 1"}
{"canonical": "block that the least number of block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is left of the least number of blocks"}
{"canonical": "total height of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))", "natural": "what is the blocks height"}
{"canonical": "block that is right of block 1 and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "is there a block on the right side of block 1"}
{"canonical": "block whose height is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "find a block that is 3 inches tall"}
{"canonical": "block that is below more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks underneath at least 2 blocks"}
{"canonical": "block whose height is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what block is 3 or less inches tall"}
{"canonical": "block that block 1 is left of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "block which has block 1 at left and above"}
{"canonical": "block that is below block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "block that is below block that is left of block 1"}
{"canonical": "block that block 1 or block 2 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "what block is block 1 or 2 to the right of"}
{"canonical": "block whose shape is a pyramid and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "natural": "pyramid right of block 1"}
{"canonical": "block that not is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "natural": "which brick is not to the left of brick 1"}
{"canonical": "block that block that is above block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "find the block that is above block 1"}
{"canonical": "block that is above block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "is there a block piled on top of either block 1 or block 2"}
{"canonical": "block that block that block 1 is left of is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "select the block that block 1 is to the left and above"}
{"canonical": "block that is right of block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "is there a block to the right of the block that is underneath block 1"}
{"canonical": "block that is right of at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that is to the right of two blocks"}
{"canonical": "block whose shape is a pyramid and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "natural": "find me a special pyramidshaped block"}
{"canonical": "block whose length is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "select brick whose length is more than the width of block 1"}
{"canonical": "block that block that is special is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "block below special block"}
{"canonical": "block that block 1 is left of and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "select the block that is one to the left of another block"}
{"canonical": "block that the least number of block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block above the least blocks"}
{"canonical": "block that is left of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find the block to the left of the largest number of blocks"}
{"canonical": "block that is left of block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "block to the left of a block that block 1 is left of"}
{"canonical": "block that is above block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "choose a block to the left of block 1"}
{"canonical": "block that block 1 is right of and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string is_special)))", "natural": "special block left of block 1"}
{"canonical": "block that block 1 is left of and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "find me all blocks that is left of block 1"}
{"canonical": "block that is above block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "block above a block which is 3 inches wide"}
{"canonical": "block whose length is 3 inches and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "natural": "find a block with a length and width of 3 inches each side"}
{"canonical": "block whose height is 3 inches and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "3 inch tall block at the left of block 1"}
{"canonical": "block that is below block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "which brick is below the brick that is above brick 1"}
{"canonical": "block that is below block 1 and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "block below and to left of block 1"}
{"canonical": "block that is left of two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks left of 2 blocks"}
{"canonical": "block whose height is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick is at least as high as brick 1 is long"}
{"canonical": "block that is right of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "which brick is to the right of the special brick"}
{"canonical": "block whose color is color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))", "natural": "block with same color as of block 1"}
{"canonical": "block whose length is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all the bricks  longer than the width of block 1"}
{"canonical": "block that is below at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block has at most two blocks above it"}
{"canonical": "block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "natural": "find me all blocks above block 1"}
{"canonical": "block that is left of block 1 and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "what blocks are left of block 1"}
{"canonical": "block that is below block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "what brick is below a brick that is 3 inches long"}
{"canonical": "block that is right of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block above block one and to the right"}
{"canonical": "block that is above two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is above two blocks"}
{"canonical": "block that block 1 is left of and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "3 inches long block which has block 1 at left"}
{"canonical": "block that is above block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "what pyramidshaped block is above block 1"}
{"canonical": "block whose shape is a pyramid or a cube", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))", "natural": "find me a pyramid or cube shaped block"}
{"canonical": "block whose width is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all blocks wider than the height of block 1"}
{"canonical": "block that is left of block that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "find the block below and to the left of block 1"}
{"canonical": "block that is right of block that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "the third block to the right"}
{"canonical": "block whose height is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which brick is shorter than brick 1 is high"}
{"canonical": "block that is above block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "find me all the blocks above block 1 or 2"}
{"canonical": "block whose height is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "natural": "which special block is 3 inches high"}
{"canonical": "block that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "block that has the smallest height"}
{"canonical": "block that is above block 1 and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "select the block on the left"}
{"canonical": "block that is left of block 1 and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find a block left of and below block 1"}
{"canonical": "3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))", "natural": "choose a block between 3 or 6 inches"}
{"canonical": "block that block 1 is above and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find a block under and to the right of block 1"}
{"canonical": "block that is right of at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me the block that is to the right of two or more blocks"}
{"canonical": "block that is below block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "find me all blocks below 3 inch wide blocks"}
{"canonical": "block whose height is not 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "natural": "find me all blocks not 3 inches high"}
{"canonical": "block that block that is left of block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "select the block that is on the right side of the block on the left side of block 1"}
{"canonical": "block that block 1 is right of and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "select the block above block 1 and on the left side"}
{"canonical": "block whose width is at least 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "find blocks that are at least 3 inches wide or 6 inches wide"}
{"canonical": "total width of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))", "natural": "total width of blocks"}
{"canonical": "block that block 1 or block 2 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "right of block 1 and block 2"}
{"canonical": "block that block that is above block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "which block is above and to the right of block 1"}
{"canonical": "block that less than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is below less than two blocks"}
{"canonical": "block that is left of block 1 and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "natural": "find me the block that is to the left of block 1 whose shape is a pyramid"}
{"canonical": "block whose width is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "select the 3 or 6 inch wide block"}
{"canonical": "block whose height is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "find me all blocks as tall as block 1 is wide"}
{"canonical": "block that block 1 is right of and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "block left of block one"}
{"canonical": "block that less than two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with less than 2 blocks below it"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "is there a block no wider than 3 or 6 inches"}
{"canonical": "number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what is the number of blocks"}
{"canonical": "block that block 1 is left of and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "find me the block that is to the left of the block that is to the right of block 1"}
{"canonical": "block that is below block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find the block below the block under block 1"}
{"canonical": "block whose height is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "choose a brick that is no higher than brick 1"}
{"canonical": "block whose width is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "3 inches wide block at the right of block 1"}
{"canonical": "block that is above block that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "block two up from block 1"}
{"canonical": "block that has at most two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "natural": "which brick has at most two shapes"}
{"canonical": "block that has at most two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "natural": "find me all blocks with at most 2 colors"}
{"canonical": "block that is below block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "which brick is below the brick shaped like a pyramid"}
{"canonical": "block that is special and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "what block is special and has block 1 on its right"}
{"canonical": "block that not is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "natural": "which brick is below brick 1"}
{"canonical": "block whose shape is a pyramid and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "natural": "what block is in the shape of a pyramid and is above block 1"}
{"canonical": "block that two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick has two bricks below it"}
{"canonical": "block whose height is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find a block with height equal to block 1s length"}
{"canonical": "block whose height is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what block is shorter than block 1"}
{"canonical": "block that is left of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find the block located on the left side of the special block"}
{"canonical": "block that is left of block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find the block that is to the left of block 1"}
{"canonical": "block that is special and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "natural": "which special brick is above brick 1"}
{"canonical": "block that is right of more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block to right of two or more blocks"}
{"canonical": "block whose shape is a pyramid and whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "natural": "block whose shape is a pyramid and whose shape is a pyramid"}
{"canonical": "block whose shape is a pyramid and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "natural": "choose block with pyramid shape under block 1"}
{"canonical": "block that is above block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me the block above the special block"}
{"canonical": "block that block whose length is 3 inches is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "select the blocks that are 3 inches long"}
{"canonical": "block whose width is 3 inches and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "natural": "select a block that has width and height of 3 inches each"}
{"canonical": "block that block whose height is 3 inches is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me all blocks that is above 3 inch tall blocks"}
{"canonical": "block that is below at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick is below no more than two bricks"}
{"canonical": "block that has the smallest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "choose the brick with the smallest width"}
{"canonical": "block that is right of two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "select the block right of block 2"}
{"canonical": "block that is left of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "which brick is to the left of the 3 inch brick"}
{"canonical": "block that is left of block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "which block is to the left of the block that block 1 is below"}
{"canonical": "block that is left of block 1 and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "find a block to the left of block 1"}
{"canonical": "block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "natural": "locate a 3inch lwide block"}
{"canonical": "block that block 1 is above and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "select the block that block 1 is above with a width of 3 inches"}
{"canonical": "block that is left of block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "choose a 3 inch block that is left of block 1"}
{"canonical": "block that block whose shape is a pyramid is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "select all blocks that are in the shape of a pyramid"}
{"canonical": "block that less than two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks with less than 2 blocks above it"}
{"canonical": "block that is below block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "select the lower block that is 3 inches tall"}
{"canonical": "block whose width is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "block whose width is smaller than 3 inches"}
{"canonical": "block that has two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "natural": "find me all blocks with 2 shapes"}
{"canonical": "block whose width is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "choose a block that is the same width as block 1s length"}
{"canonical": "block that is above block 1 and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))", "natural": "left and above block 1"}
{"canonical": "block that block that is below block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "natural": "select the brick that is below and to the left of block 1"}
{"canonical": "block whose length is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "choose a 3 inch block to the right of block 1"}
{"canonical": "block whose shape is a pyramid and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "natural": "find me all the 3 inch tall pyramid bricks"}
{"canonical": "block that more than two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose the block beneath the 2 block"}
{"canonical": "block whose height is 3 inches and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "natural": "3 inches tall block at the right of block 1"}
{"canonical": "block whose height is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "choose a block that is taller than 3 or 6 inches"}
{"canonical": "block that is right of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block left and above block 1"}
{"canonical": "block that block that is left of block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "find the blocks that are to the left of block 1 "}
{"canonical": "block that block whose shape is a pyramid is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block above pyramid"}
{"canonical": "block whose height is smaller than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "select a block with height less than block 1"}
{"canonical": "block that block 1 is above and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch wide blocks that block 1 is above"}
{"canonical": "block that is left of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block that is left of block whose height is 3 inches"}
{"canonical": "block that has the smallest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "what block is not longer than any other"}
{"canonical": "block whose height is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "get the block that is 3 inches tall found left of block 1"}
{"canonical": "block that block 1 is above and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "select a block above block one that is 3 inches long"}
{"canonical": "block whose width is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find me all blocks at most as wide as block 1"}
{"canonical": "block that is below block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find the block below the special block"}
{"canonical": "block that less than two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block less than two blocks below"}
{"canonical": "block that has the least number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))", "natural": "which brick has the least number of shapes"}
{"canonical": "block whose height is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "3 inches high block below block 1"}
{"canonical": "block that block that is left of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "select the block above the block to the right block 1"}
{"canonical": "block whose length is 3 inches and that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "natural": "a three inches block at the left of block 1"}
{"canonical": "block that is above block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "what block is above the 3 inch wide block"}
{"canonical": "block whose height is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "what block has height less than or equal to the length of block 1"}
{"canonical": "block that block whose shape is a pyramid is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "block above pyramid block"}
{"canonical": "block that is below block whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "natural": "block that is below block whose width is 3 inches"}
{"canonical": "block that the most number of block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is to the left of the most blocks"}
{"canonical": "length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))", "natural": "what is the length of block 1"}
{"canonical": "block that is left of block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "second left of block 1"}
{"canonical": "block that is right of the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks that is to the right of the least number of blocks"}
{"canonical": "block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "natural": "block that is above block 1"}
{"canonical": "block that the most number of block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which block is closest to the bottom"}
{"canonical": "block that block that block 1 is above is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "which block is below the block below block 1"}
{"canonical": "block that is left of at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that has at most two blocks to its left"}
{"canonical": "block that has at most two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "natural": "find me a block with two or less colors"}
{"canonical": "block that has the largest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "select the block with the biggest width"}
{"canonical": "block that at least two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block that is right of at least two blocks"}
{"canonical": "block that is special and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "look right of block 1 and get the special block"}
{"canonical": "block that is special and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "natural": "find me all the special blocks right of block 1"}
{"canonical": "block that block 1 is right of and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find me the block that block 1 is to the right of"}
{"canonical": "block that at most two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block that is the right of block 2"}
{"canonical": "block that is right of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "find me all blocks to the right and above block 1"}
{"canonical": "block that is above block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "which brick is above brick 1 or 2"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "choose a block between 3 and 6 inches wide"}
{"canonical": "block that is below at least two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks at least 2 blocks below"}
{"canonical": "block that is right of block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "natural": "find all special blocks to the right of block 1 "}
{"canonical": "block that is right of at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the blocks that has at most 2 blocks to the left"}
{"canonical": "block that is below block 1 and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "find me all blocks below and to the right of block 1"}
{"canonical": "block whose width is length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))", "natural": "find me all the blocks with the same width as the length of block 1"}
{"canonical": "block that has the most number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))", "natural": "block that has the most number of shape"}
{"canonical": "block whose width is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what blocks width is less than or equal to block 1s height"}
{"canonical": "block that is above the least number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block above the least populated bricks"}
{"canonical": "block whose length is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block whose length is at most width of block 1"}
{"canonical": "block that is left of block 1 and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "left of block 1"}
{"canonical": "block that is left of two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me the block that is left of two blocks"}
{"canonical": "block whose length is larger than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "block whose length is larger than 3 inches or 6 inches"}
{"canonical": "block whose shape is a pyramid and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "natural": "a 3 inch brick that is shaped like a pyramid"}
{"canonical": "block that is right of block 1 or block 2", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))", "natural": "which brick is to the right of brick 1 or 2"}
{"canonical": "block that is above block that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "natural": "get the second block above block 1"}
{"canonical": "block that is left of more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is to the left of more than two blocks"}
{"canonical": "block that block 1 not is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string !=) en.block.block1))", "natural": "find me all blocks that block 1 is not right of"}
{"canonical": "block whose width is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "choose a block no bigger than 3 inches"}
{"canonical": "block whose length is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "is there a block with a length whose measurement is equivalent to that of  block 1s height"}
{"canonical": "block that is left of block 1 and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "what block is left and below block 1"}
{"canonical": "block that is above block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "find a block with a 3 inch long block below it"}
{"canonical": "block whose length is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find a block with a length greater than block 1 is tall"}
{"canonical": "block whose height is larger than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block whose height is larger than width of block 1"}
{"canonical": "block that block that block 1 is above is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))", "natural": "find the block that block 1 is above and below"}
{"canonical": "block whose length is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "which brick has a length shorter than the length of brick 1"}
{"canonical": "block whose width is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me a block wider than 3 inches"}
{"canonical": "block that at most two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me a block that is below at most two blocks"}
{"canonical": "block whose width is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick has a width smaller than 3 inches"}
{"canonical": "block whose height is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find me all the blocks taller than block 1"}
{"canonical": "block whose color is color of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))", "natural": "is there a block with the same color as block 1"}
{"canonical": "block whose width is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all the bricks with a smaller width than block 1"}
{"canonical": "block that two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with 2 blocks left of it"}
{"canonical": "block that is right of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "block that is right of block whose height is 3 inches"}
{"canonical": "block that block that is right of block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "natural": "find me all blocks right and below block 1"}
{"canonical": "block whose width is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "select a brick that is at least 3 inches wide"}
{"canonical": "block whose length is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "find me all the blocks at most as long as the width of block 1"}
{"canonical": "block that block 1 is above and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string is_special)))", "natural": "select the block that is special and that block 1 is above"}
{"canonical": "block that is below at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the bricks below at most 2 blocks"}
{"canonical": "block that is below two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "what block is below two blocks "}
{"canonical": "block that has the most number of shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))", "natural": "which type of block has the most shapes"}
{"canonical": "block that block 1 is right of and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "what block is to the right of block 1"}
{"canonical": "block whose length is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "what block is left of block 1 and 3 inches in length"}
{"canonical": "block whose length is 3 inches and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "3 inch block to right of block 1"}
{"canonical": "block that is right of the most number of block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "block that is at the right of most number of blocks"}
{"canonical": "block whose width is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block whose width is smaller than length of block 1"}
{"canonical": "block that at most two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block with two or less blocks to the right of it"}
{"canonical": "block whose height is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "choose a block that is taller than 3 inches"}
{"canonical": "block that block whose height is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find the block of 3 inches height and placed in left "}
{"canonical": "block whose width is 3 inches and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "natural": "find the block located beneath block 1 that has a 3 inch diameter"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "choose a block that is at most 2 block to the left"}
{"canonical": "block whose length is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "get a 3inch long block below block 1"}
{"canonical": "block that is above block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "what block is above the 3 inch high block"}
{"canonical": "block whose height is smaller than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find a block shorter than 3 inches"}
{"canonical": "block that block that is special is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "find me all the blocks that are special"}
{"canonical": "block whose height is height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))", "natural": "find me all the blocks as tall as block 1"}
{"canonical": "block whose width is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "natural": "find the special block that is 3 inches"}
{"canonical": "block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "natural": "find a block that has block 1 to its right"}
{"canonical": "block whose height is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what brick is at least as high as brick 1"}
{"canonical": "block that has at most two color", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "natural": "which brick has no more than 2 colors"}
{"canonical": "block that is special and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "natural": "find me a 3 inch long special block"}
{"canonical": "block that block whose length is 3 inches is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "what block is at right of 3 inches long block"}
{"canonical": "block whose width is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is wider than 3 inches"}
{"canonical": "block that is right of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "choose the brick to the right of the 3 inch block"}
{"canonical": "block that has the smallest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "find me the block with the smallest width"}
{"canonical": "block that has the smallest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "find the block that has the smallest length"}
{"canonical": "block whose width is at least height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "select a block who has width greater than or equal to block 1s height"}
{"canonical": "block whose length is at most length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "block whose length is at most length of block 1"}
{"canonical": "block whose height is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "block of height not more than width of block 1"}
{"canonical": "block whose length is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "what block is as long as block 1 is wide"}
{"canonical": "block that block 1 is above and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "what block is above block 1 and has a height of 3 inches"}
{"canonical": "block that block 1 is left of and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "3 inch block right of block 1"}
{"canonical": "block whose height is smaller than length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find a block whose height is smaller than the length of block 1"}
{"canonical": "block that is special and whose width is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "natural": "find all special blocks that are 3 inches wide"}
{"canonical": "block that block 1 not is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string !=) en.block.block1))", "natural": "select the block that block 1 is not to the left of"}
{"canonical": "block whose height is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find me all the blocks at most as tall as 3 inches"}
{"canonical": "block that less than two block is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which block has less than two blocks to its right"}
{"canonical": "block that is left of block that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))", "natural": "which brick is to the left of the special brick"}
{"canonical": "block that has the largest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "select the longest brick"}
{"canonical": "block that is above block 1 and whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "natural": "3 inch block above block 1"}
{"canonical": "block that is left of more than two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks left of more than 2 blocks"}
{"canonical": "block that is above block whose shape is a pyramid", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find a block with a pyramidshaped block below it"}
{"canonical": "block that block 1 is below and that is below block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "natural": "find me all blocks below block 1"}
{"canonical": "block whose height is at most height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "find the block that has a height that does not surpass the height of block 1"}
{"canonical": "block whose length is larger than 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "which brick is longer than 3 inches"}
{"canonical": "block that is left of block 1 and that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))", "natural": "block above and to the left of block 1"}
{"canonical": "block that block 1 is left of and that is right of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "natural": "select the block that is on the right side of block 1"}
{"canonical": "block whose height is at most 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "what brick is no more than 3 inches high"}
{"canonical": "block that is right of at most two block", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me a block with at most two blocks to the left of it"}
{"canonical": "block that is right of block whose length is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "natural": "find me all the blocks right of 3 inch long blocks"}
{"canonical": "block whose length is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "block as long as block 1 is wide"}
{"canonical": "block that at most two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "which brick has no more than two bricks above it"}
{"canonical": "block whose height is larger than height of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))", "natural": "what block is taller than block 1"}
{"canonical": "block whose height is 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))", "natural": "which brick is 3 or 6 inches high"}
{"canonical": "block whose height is at most width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "which brick is no higher than brick 1 is wide"}
{"canonical": "block whose shape is a pyramid or a cube", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))", "natural": "choose a block that is shape like a cube or pyramid"}
{"canonical": "block whose width is 3 inches and that is above block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "natural": "select the block above block 1 that is 3 inches wide"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "which block has a width of less than 3 inches"}
{"canonical": "block whose width is 3 inches and that block 1 is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))", "natural": "find me all 3 inch wide blocks that block 1 is above"}
{"canonical": "block whose height is 3 inches and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "natural": "select the special 3 inch tall block"}
{"canonical": "block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "natural": "which brick is to the left of brick 1"}
{"canonical": "block that has the largest width", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))", "natural": "select the widest block"}
{"canonical": "block that block 1 is below and that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))", "natural": "select the blocks below and to the left of block 1"}
{"canonical": "block that has the largest length", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "natural": "what block is the longest"}
{"canonical": "block whose length is smaller than width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))", "natural": "choose a block that is less thick than block 1"}
{"canonical": "block that block whose shape is a pyramid is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "natural": "find me all pyramid blocks"}
{"canonical": "block that is above block that block 1 is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))", "natural": "find me the block that is above the block that block 1 is below"}
{"canonical": "block whose height is width of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))", "natural": "select a block that has the same width and height"}
{"canonical": "block that is below block 1 and that is special", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "natural": "choose the block below the special looking block 1"}
{"canonical": "block that block 1 is above and whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "natural": "find me all 3 inch tall blocks which block 1 is above"}
{"canonical": "block that at least two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks with at least 2 blocks below"}
{"canonical": "block that at most two block is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find a block above at most two blocks"}
{"canonical": "block that is above block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "what blocks are above the block that is to the right of block 1"}
{"canonical": "block whose height is at least 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))", "natural": "find the block that is not less than 3 inches tall"}
{"canonical": "block that block 1 is below and that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))", "natural": "select the block below the one on the right"}
{"canonical": "block that is left of block that is left of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "natural": "select the brick two bricks left of brick 1"}
{"canonical": "block that has more than two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >) (number 2)))", "natural": "find me the blocks that are more than two shapes"}
{"canonical": "block that is right of block whose height is 3 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "natural": "find me all blocks right of 3 inch high blocks"}
{"canonical": "block that is left of block that block 1 is right of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))", "natural": "block is at the second left of block 1"}
{"canonical": "block whose width is at least length of block 1", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))", "natural": "find all blocks that are as long as or longer than block 1"}
{"canonical": "block that at most two block is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all blocks  with at most two blocks left of it"}
{"canonical": "block whose width is smaller than 3 inches or 6 inches", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))", "natural": "block whose width is smaller than 3 inches or 6 inches"}
{"canonical": "block that two block is above", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))", "natural": "find me all the bricks with 2 blocks above it"}
{"canonical": "block that block that block 1 is left of is below", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "what block is to the left of and below block 1"}
{"canonical": "block that is below block that block 1 is left of", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))", "natural": "block below and to right of block 1"}
{"canonical": "block that has less than two shape", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <) (number 2)))", "natural": "block with one shape"}
