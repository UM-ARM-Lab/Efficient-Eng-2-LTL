{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who left after alice started"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with end dates that are no greater than employee alice"}
{"canonical": "employer of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "natural": "who is alices employer since 2004"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what city has a birthplace of a person who is at least 180 cm"}
{"canonical": "person whose birthdate is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "people born on or after the date alice started working"}
{"canonical": "person whose relationship status is single and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find all single people born in 2004"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose last day is before alice"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students whose last day is before 2004"}
{"canonical": "person whose birthdate is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "people born before alice"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees start date is the same as alice"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employeess last day was no earlier than alices first day"}
{"canonical": "end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))", "natural": "what is alices end date when she was a student"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with students who start date is 2004"}
{"canonical": "gender that is gender of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender is the employee who started in 2004"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the people that started working after 2004 born"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a end date that is before the end date of alice"}
{"canonical": "mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))", "natural": "people who work at mckinsey or google"}
{"canonical": "city that is birthplace of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which city were at least two people born in"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the friends of the employee who started before 2004"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee whose start date is not 2004"}
{"canonical": "start date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "natural": "when did alice join at brown university"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the birthplace city of students who have a start date later than 2004"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "find people with a height of 180 cm who are the same gender as alice"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "alices friends who are singles"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before 2004"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "2004 graduates friends"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending before or when alice ends"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose end date is not after 2004"}
{"canonical": "person whose birthplace is city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "natural": "people who were born in the same city as alice"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that work for less than two employers"}
{"canonical": "person whose birthplace is city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "natural": "who is born in a city where alice is born"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "who has more than two genders"}
{"canonical": "person that alice is friends with and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "friends of alice"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who did not graduate before 2004"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birthplaces of students whose last day was in 2004 or later"}
{"canonical": "person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)))", "natural": "all people currently online"}
{"canonical": "gender that is gender of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "gender which is gender of less than three persons"}
{"canonical": "person whose height is 180 cm and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "natural": "what person is a 180 cm tall male"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is the same as student alice"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who have friends and started working after 2004"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who isnt a software engineer"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were working people that did not stop in 2004 born"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "males that alice is friends with"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who started before 2004 or 2010"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended earlier than 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me all the relationship statuses of employees who started job after 2004"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplaces of people who quit their jobs after 2004"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose end date is later than alices start date"}
{"canonical": "gender that is gender of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender has the most people"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which city were people who are 180 cm tall born in"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who quit before alice was born"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what sex are the employees who did not start in 2004"}
{"canonical": "start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))", "natural": "when did alice start attending school"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting on or after alices last day"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started before the day alice graduated"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "list the relationship status of people who quit their jobs before 2005"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "what people have an end date of 2004 and height of 180 cm"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the same birthday as alice"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date that is at least the same as employee alices end date"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school after alice started working"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that started working in or before 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose start date is not after 2004"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose end date is at least 2004"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose last day was before or on alices last day"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the students relationship status who ended earlier than 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who did not start in 2004"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "find friends of people who were born in 2004"}
{"canonical": "person that is friends with the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "person with the most friends"}
{"canonical": "person whose birthdate is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "person born after alice graduated"}
{"canonical": "person that is logged in and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "natural": "find all of alices friends who are currently online"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee was hired last"}
{"canonical": "person that is logged in and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "natural": "online male member"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who finishes before 2004 or 2010"}
{"canonical": "person that alice is friends with and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "name a person born in 2004 who is friends with alice"}
{"canonical": "relationship status that is relationship status of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "is the person single"}
{"canonical": "person that has the least number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "natural": "people that have the least number of relationship statuses"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date that is the same as the end date of alice"}
{"canonical": "relationship status that is relationship status of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what are the relationship statuses of people that are currently online"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start day at the same time as alices birthdate"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employees who strated before 2004"}
{"canonical": "person whose birthdate is 2004 and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "natural": "the person logged in who is born in 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the employees relationship status who ended in 2004"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "all 180 cm tall people who studied computer science"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "people who went to brown university and are single"}
{"canonical": "city that is birthplace of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birthplaces of students starting in 2004 and later"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the gender of students who did not attend brown university"}
{"canonical": "field of study of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "natural": "what did alice study when she graduated in 2004"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started on the same date as alice"}
{"canonical": "person whose birthdate is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "person who has a birthday before alice graduates"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person who is friends with students who joined in and after 2004"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who was hired after alice quit"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend of someone emplyed after 2004"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped work after 2004 or after 2010"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose last day is after alices first day"}
{"canonical": "start date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "when did alice start the job she left in 2004"}
{"canonical": "gender that is gender of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what gender is the online person"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student who left school before alice started"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the students of any field but computer science born"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting before or contemporaneous to alice"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started no later than alices graduation day"}
{"canonical": "person whose birthdate is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "who is born before 2004"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school in or before 2004 or in or before 2010"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before alice stopped working"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice stopped school or before"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is later than either 2004 or 2010"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were people that stopped working after 2004 born"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of employees before 2004"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what are the start and end employment dates of alice"}
{"canonical": "relationship status that is relationship status of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of person not employed by mckinsey"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the most job titles"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birthplace of student not studying computer science"}
{"canonical": "gender that is gender of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender do at least two people have"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that will begin after 2004 and no later than 2010"}
{"canonical": "person whose relationship status is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))", "natural": "what person has a relationship status the same as alice"}
{"canonical": "person whose height is 180 cm and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "natural": "which men are 180 cm tall"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees that are not employed by mckinsey"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working before 2004"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who graduated no earlier than 2004"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate after 2004"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose university of not brown university"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friend with a last day in 2004 or before"}
{"canonical": "person that is friends with alice and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which people that alice is friends with are friends with alice"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "what person born in 2004 is 180 cm tall"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students completed school the same year alice began"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees finishing in or after 2004"}
{"canonical": "person that employee whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee who started no later than 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the relationship status of employees whom have an end date that is bigger than 2004"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school on or before the day alice started school"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has at least 2 university to go to"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "friends of alice who are 180 cm tall"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "which people are friends with alice and is 180 cm tall"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that started working in or after 2004"}
{"canonical": "gender that is gender of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of the employee who started after 2004"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who start before or when alice finishes"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that started school in or after 2004"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "where was the person born who is 180 cm tall"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who left on or after alice joinde"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose start date is before or on alices end date"}
{"canonical": "person whose birthdate is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "who was born in 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the employees relationship status who started no later than 2004"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a end date that is no greater than the start date of student alice"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of students who started school before 2004"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "fine me employees that are leaving before alices birthday"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees leaving the company no earlier than alices start date"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with somebody who did not start in 2004"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the university of a person whose height is 180 cm"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit after alice quit school"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started school on the same day as or before alive started"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is on alices end date or later"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before alice stopped"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students go to brown university or ucla"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who was the first person to start working"}
{"canonical": "student whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose start date is no later than alices"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "in what city was the employee who is not a software engineer born"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the birthplace of an employee not ending in 2004"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "genders of employees starting in or after 2004"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student graduated the same day as alice"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on the day that alice graduated"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing on alices birthday"}
{"canonical": "person that is friends with alice and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "which of alices friends were born in new york"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "which people are friends with alices friends"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started the same day as alices birthday"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students who do not graudate in 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student whose start date is before 2004"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birthdplaces of new employees we have starting by 2004"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who stopped working after 2004  and has connections to me"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find people with a height of 180 cm who also have a birthdate of 2004"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find people who are friends with alice and are single"}
{"canonical": "person whose birthdate is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "find someone who was born before alice"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date of either 2004 or 2010"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "birth city of alices friend"}
{"canonical": "employee whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started right when alice quit her job"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees whose last day was no earlier than 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of all students whos end date is 2004 on"}
{"canonical": "student whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students graduated in 2004 or 2010"}
{"canonical": "field that is field of study of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the field of study of all persons with a height of 180 cm"}
{"canonical": "person that is friends with alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "people that are friends with either alice or bob"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left on the day alice did or before"}
{"canonical": "person whose birthdate is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "person who was born before alice start date"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees who are not software engineers"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "what people have a birthplace of new york who are also friends with alice"}
{"canonical": "person that not is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "natural": "people who is not friend with alice"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people with friends that started school before 2004"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "what people have a height of 180 cm and field of study that is computer science"}
{"canonical": "gender that is gender of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what gender is the person who 180 cm tall"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduate no sooner than the day alice started"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "birthplaces of alices friends"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the city where an employee was born who started no later than 2004"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is before alices start date"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student that doesnt attend brown university"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing before or in 2004"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what students have a start date that is 2004 or later and who are their friends"}
{"canonical": "person whose birthplace is city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "natural": "people born in the same city as alice"}
{"canonical": "student whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose last day was 2004 or later"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who began working before alice finished school"}
{"canonical": "city that is birthplace of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "what cities were the single people born in"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit their job the same day or after alice started school"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what cities are the birthplace of students later than 2004"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "which of alices friends are male"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name all students who quit before alice"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the relationship statuses of students with a start date later than 2004"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "birthplace of only one person"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find all the relationship statuses of the students that started in 2004 and before"}
{"canonical": "person that has at least two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "natural": "find people who have at least two genders"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending before 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that started school after 2004"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "who is a person whose field of study is computer science and whose height is 180 cm"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "people who are friends with alice whose height is 180 cm"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee was terminated after alice started working"}
{"canonical": "number of city", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))", "natural": "number of cities people are from"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of people who did not start school in 2004"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduated no later than alices last day of work"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school after alice started working"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees strated after 2004 or 2010"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started working in or before 2010"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started working after alice quit her job"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "name a single person who is friends with alice"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who did not start in 2004"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birth city of employees with a start date later than 2004"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit first"}
{"canonical": "person that is friends with alice and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "find one of alices friends who was born in new york"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students before 2004"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of an employee starting before 2004"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "find people who have the same birthplace as alice"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has fewer than two fields of study"}
{"canonical": "person whose birthdate is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "who was born before alices last day of employment"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of the student who is not studying computer science"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after birth date of alice"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that have a friend that stopped school in or after 2004"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before alice stopped school"}
{"canonical": "person whose relationship status is single and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find singlestatus people who are alices friend"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with student that didnt end in 2004"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working after 2004"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "which people were born in the same place as alice"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of students who are not brown university students"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "find alices friend who is logged in"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit as late as alice"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "person who is a friend of an employee that has worked since 2004"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee that is leaving the company by 2004"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find the names of all students who graduated between 2004 and 2010"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who did not start in 2004"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which person is friends with a student who started earlier than 2004"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city is the birthplace of the student who ended school before 2004"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "find people that have two relationship statuses"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who joined on or before the day alice left"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees whose last day was not in 2004"}
{"canonical": "start date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "natural": "when did alice start working for mckinsey"}
{"canonical": "university of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "natural": "person named alice who studies computer science at a university"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of an employee who quit in 2004 or later"}
{"canonical": "city that is birthplace of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace city of student that was enrolled by 2004"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit recently"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who share a workplace with alive"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students are part of two universities"}
{"canonical": "end date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "natural": "find me all people named alice who quit during 2004"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have the earliest start date"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find birthplaces of nonmckinsey employees"}
{"canonical": "city that is birthplace of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "city where the least number of people were born"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose employer is not mckinsey"}
{"canonical": "gender that is gender of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "find me all people with the same gender as alice or bob"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees who left before 2004"}
{"canonical": "person whose gender is male and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who is born is 2004 and is a male"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "who is friends with alice and is male"}
{"canonical": "employee whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who started working on the day alice quit her job"}
{"canonical": "person that the least number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has least number of friends"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit after alice started her job"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees not starting in 2004"}
{"canonical": "person whose birthdate is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "which people were born after alice left her job"}
{"canonical": "gender that is gender of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the gender that is the gender of at most two people"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "who is friends with the single person"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting on or after alices birthdate"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students with an end date that is not 2004"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is earlier than the start date of alice"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student is in the same field of study as alice"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people with friends who started university in 2004 or later"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose start date is before 2004"}
{"canonical": "person that not is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "natural": "people that are not friends with alice"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students starting contemporaneous to or before 2004"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people who are employees with an end date no later than 2004 and their friends"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after alice started school"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees who start before or in 2004"}
{"canonical": "person whose height is 180 cm and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "people who are 180 cm tall and are single"}
{"canonical": "person whose birthdate is 2004 and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "anyone single born in 2004"}
{"canonical": "student whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me all students that will start at the same time or after alice starts"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find university of people who are 180cm tall"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "person who works at mckinsey or google"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended after 2004"}
{"canonical": "employee whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish when or before alice starts"}
{"canonical": "relationship status that is relationship status of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who is in the most relationships"}
{"canonical": "gender that is gender of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees who started after 2004"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is the employee whose start date was at least 2004 friends with"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with a start date earlier than the end date of student alice"}
{"canonical": "person whose birthdate is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))", "natural": "people who were born the same day alice started school"}
{"canonical": "city that is birthplace of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the birth cities of students who have a start date in 2004 or greater"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is a person whose university is not brown university friends with"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of employees who started work before 2004"}
{"canonical": "person whose birthdate is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "people who were born after 2004"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friends with last day after 2004"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "who has over two genders"}
{"canonical": "employer of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "natural": "is alice employed by mckinsey"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose end date is the same as that of student alice"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are the relationships statuses of students who started school before 2004"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "students friend whose university is not brown university"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which friends stopped working in 2004"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with someone that did not start in 2004"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is later than that of employee alice"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of a student not attending brown university"}
{"canonical": "gender that is gender of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "gender that has less than two people"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students who are not studying at brown university"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose start date is not 2004"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with start date not after end date of student alice"}
{"canonical": "single or married", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married))", "natural": "is the person single or married"}
{"canonical": "end date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "natural": "when did alice stop working for mckinsey"}
{"canonical": "person that has two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "natural": "find everybody who has two genders"}
{"canonical": "end date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "natural": "what is the alices 2004 end date"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who are people who are employees with a start date not of 2004 friends with"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a end date that is after the start date of student alice"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees that do not work as software engineers"}
{"canonical": "start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))", "natural": "when did alice begin as an employee"}
{"canonical": "person whose height is smaller than height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "who is shorter than alice"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that started school before 2004"}
{"canonical": "number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type))))", "natural": "how many job titles are there"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student is not from brown university"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who works for someone other than mckinsey"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started before or on alices last day"}
{"canonical": "person whose birthdate is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "who was born on or after alices last day of school"}
{"canonical": "person that is friends with less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with less than two friends"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with the same last day as student alice"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started after alice did"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who start before alice finishes"}
{"canonical": "person whose birthdate is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))", "natural": "people that were born on the day alice started work"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city was the student born in that has 2004 as end date"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which person is friends with an employee who was here in 2004"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students whose end date is before 2004"}
{"canonical": "person whose height is 180 cm and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "natural": "which people are 180 cm tall"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me students whose start date is either 2004 or 2010"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student who started before alice"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended no later than 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of an employee whose start date is later than 2004"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date no earlier than 2004"}
{"canonical": "height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))", "natural": "how tall is alice"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who started before alice quit"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "which of alices friends is 180 cm tall"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not after 2004"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is the same as student alice or later"}
{"canonical": "city that is birthplace of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where is the birthplace of the student who started before 2004"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have no more than two majors"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with students who started before 2004"}
{"canonical": "relationship status that is relationship status of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with relationship status of at least two people"}
{"canonical": "student whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate no later than 2004 or 2010"}
{"canonical": "person whose birthdate is 2004 and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find all people who are not in a relationship and were born in 2004"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have fewer than two field of study"}
{"canonical": "city that is birthplace of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what cities in new york were people born in"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students who began earlier than 2004"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who has 2004 as a date"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "sex of students who didnt start school in 2004"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose job title is not software engineer"}
{"canonical": "person that is friends with person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "people who have friends that are currently online"}
{"canonical": "person whose birthdate is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "natural": "find me a person born in either 2004 or 2010"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students who are not studying computer science"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date that is earlier than the birthdate of alice"}
{"canonical": "person whose birthdate is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "what person was born earlier than that of alice"}
{"canonical": "person whose birthdate is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "people born before 2004"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate before alice does"}
{"canonical": "relationship status that is relationship status of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what is the relationship status of people born in new york"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who are friends with connection who started school before 2004"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee whose end date is before 2004"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which employees start date is not 2004"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee starting the soonest"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have no more than two fields of study"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that study or studied anywhere but brown university"}
{"canonical": "person that is friends with person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "whose friend is logged in"}
{"canonical": "person whose gender is male and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "natural": "any male who is logged in"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with the employee that was hired before 2004"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish before alice"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is relationship status of employees with start dates other than 2004"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "a friend of alice that is logged in"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "list the birthplaces of people who completed their studies before 2004"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "studens with the fewest fields of study"}
{"canonical": "person whose birthdate is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "persons born before 2004"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was after alices last day"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who shares same employer with employee alice"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who doesnt work for mckinsey"}
{"canonical": "person whose gender is male and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people who are male and born in 2004"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees that start on the same day as alice"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what people are friends with students that have a start date of 2004 or later"}
{"canonical": "city that is birthplace of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what are the birthplaces of people logged in"}
{"canonical": "person that less than two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has less than two friends"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of nonsoftware engineers"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "who is alice friends with that also have relationship statuses of single"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "people who work at mckinsey and are 180 cm tall"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "which software engineer is 180 cm tall"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate after alice starts her new job"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find people who are logged in who are alices friends"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students major in computer science or history"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing after alice"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit their job first"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee finishing contemporaneous to or after 2004"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is the student whose start date is at least 2004 friends with"}
{"canonical": "gender that is gender of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "gender of only one person"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with two job titles at most"}
{"canonical": "average height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the average height of everyone"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is gender of employees with last days other than 2004"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting the latest"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit their job before alice started working"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whom have a start date of 2004 or later"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student that starts before alice finishes"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the people that started work in or after 2004 born"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who started their job before 2004"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of everyone who is not a software engineer"}
{"canonical": "person whose birthplace is not new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "natural": "people born anywhere but new york"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who is the person that is 180 cm friends with"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose end date is the start date of student alice or later"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace city of a student who started during or before 2004"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started earlier than alices birthdate"}
{"canonical": "person whose birthdate is 2004 and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "singles who were born in 2004"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who started working after the student alice did"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students end date is greater than alices start date"}
{"canonical": "person that has at most two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "natural": "people that have two or less birthplaces"}
{"canonical": "person whose birthplace is new york and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "natural": "what person was born in new york and is friends with alice"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "one worker who is a software engineer or program manager"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "can not parapharase"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with not more than two employers"}
{"canonical": "person whose relationship status is single and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find all single people that are friends with alice"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated on or after alices birthdate"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what sex are the employees who did not quit in 2004"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of an employee who is not a software engineer"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with one job title"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who have an end date that is from 2004 or greater"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "find the friends of people who are currently online"}
{"canonical": "person that is friends with alice and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "who is friend of alice"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees whose end date is no earlier than 2004"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of someone who quit before 2004"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the birthplace of a student not starting in 2004"}
{"canonical": "person whose birthplace is new york and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who was born in new york in 2004"}
{"canonical": "person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find me people born in 2004"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the relation status of people who are 180 cm tall"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with one or two fields of study"}
{"canonical": "person that is friends with less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with only one friend"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started no greater than alices"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended at most on alices birthdate"}
{"canonical": "relationship status that is relationship status of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status as most of the persons"}
{"canonical": "number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))", "natural": "how many genders are there"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is software engineer or program manager"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what cities are the birthplace of students who did not start in 2004"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing contemporaneous to alice"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working the same time or after alice did"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the people who quit their job before alice joined her study"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what employees have an end date of 2004 or later and who are their friends"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who works as a software engineer or manager"}
{"canonical": "student whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students ended school in 2004 and 2010"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what gender is the student that graduated by 2004"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who left on the same day or later as alice"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with largest end date"}
{"canonical": "alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob))", "natural": "either alice or bob"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended on the same date as alice"}
{"canonical": "person that is logged in and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "natural": "persons presently logged in who were born in new york"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started the job before alice quit"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a end date that is the same as the start date of employee alice"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student that has no less than one field of study"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is after 2004"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date the same as employee alices end date"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the relationship statuses of employees who have an end date that is no more that 2004"}
{"canonical": "gender that is gender of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find people who are male"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting before alices last day"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not before start date of employee alice"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students with an end date earlier than 2004"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees that are not software engineers"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is greater than that of student alice"}
{"canonical": "number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is number of a person"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the identifying gender of the transgendered person"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students who joined in years except 2004"}
{"canonical": "person whose birthdate is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "people born between 2004 and 2010"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "what online person is alice friends with"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of students who did not graduate in 2004"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date no later than 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that finished school before 2004"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "genders of students not finishing in 2004"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting the same day as alice"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is relationship status of students starting in 2003 or before"}
{"canonical": "person whose birthplace is new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))", "natural": "people born in new york or beijing"}
{"canonical": "relationship status that is relationship status of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what relationship status is listed by the least number of people"}
{"canonical": "city that is birthplace of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "where were the people online born"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working the same day alice started school"}
{"canonical": "gender that is gender of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the gender of a student ending before 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find relationship statuses of students who have a start date no later than 2004"}
{"canonical": "person whose gender is male and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is male and is friends with alice"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is before start date of student alice"}
{"canonical": "single or married", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married))", "natural": "is this person single or married"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the same job title as alice"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started at the same time as alice"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is no sooner than alcies birthday"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the student who graduates in 2004 or later"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birth city of all employees who have an end date less than 2004"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with at most two jobs"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started school on the last day alice worked"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has worked for the fewest employers"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me friends of students graduating before 2004"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is no greater than employee alices start date"}
{"canonical": "person whose relationship status is single and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "natural": "what male is single"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee who does not work for mckinsey"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is no later than the birthdate of alice"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with an end date the same as employee alices start date"}
{"canonical": "person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "which person has a relationship status of single"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day is no earlier than 2004"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of people that started school before 2004"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is before the birthdate of alice"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what genders are the people that started school in or before 2004"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "find people who are 180 cm tall and attend brown university"}
{"canonical": "start date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "start date of alices employment which ended in 2004"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "locate the gender of employees whom are not employeed by mickinsey"}
{"canonical": "gender that is gender of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "gender of alices friend"}
{"canonical": "student whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student whose last day is after alices birthday"}
{"canonical": "person whose birthdate is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the birthdate of people who are 180 cm tall"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee started the earliest"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find alices friends born in 2004"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find company employing those who are 180 cm tall"}
{"canonical": "person whose birthdate is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "find all people who were born before alice started"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with a working person that isnt a software engineer"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student studied computer science or history"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the student who is not studying computer science"}
{"canonical": "person whose gender is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "gender of people whose height is 180cm"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined study after 2003"}
{"canonical": "person whose birthdate is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "persons who were born on or after start date of alices study"}
{"canonical": "person whose height is larger than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "people that are taller than 200 cm"}
{"canonical": "person whose birthplace is new york and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "natural": "people born in new york and currently online"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "show me all students that will leave in 2004 or oe 2010"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting in 2004 and later"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that stopped working after 2004"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who start with or after alice"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees who have an end date later than 2004 and their friends"}
{"canonical": "gender that is gender of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what is alice and bobs gender"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who started no earlier than 2004"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who did not start in 2004"}
{"canonical": "gender that is gender of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the gender of an individual"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "where do my friends who are 180 cm stud for university"}
{"canonical": "relationship status that is relationship status of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what are alice and bobs relationship statuses"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school in 2004 or 2010"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who dont finish in 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of the employee that did not start in 2004"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the same or bigger end date of employee alice"}
{"canonical": "number of company", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type))))", "natural": "what is the phone number of a company"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me an employee who has worked at two or less jobs"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school in or after 2004"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "person whose birthplace is same as person 180 cm tall"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which student has the same relationship as the student who started after 2004"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date after the start date of employee alice"}
{"canonical": "gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender)))", "natural": "what is alices gender"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is birthplace of students who started after 2004"}
{"canonical": "person that is friends with person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "what people are friends with those who are friends with alice"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "who was born in two places"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "people who were born in the same place as alice"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "when is the end date of alice"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of a student who did not begin in 2004"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what university do those that are 180 cm tall go to"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find relationship status of students not studying computer science field"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is before start date of employee alice"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "who is friends with the person from new york"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the working people that are not software engineers born"}
{"canonical": "end date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "natural": "what is the last date of alice who is a student of brown university"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "working person with the least job titles"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed education before alice joined work"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student who started first"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have an employer different from that of alice"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people alice is friends with that were also born in 2004"}
{"canonical": "gender that is gender of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender has the fewest people"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "what people have a height of 180 cm and the same relationship status as alice"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the people that started working in or before 2004 born"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of all employees who did not quit in 2004"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is a person whose field of study is not computer science friends with"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending after alice starts"}
{"canonical": "job title of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "natural": "is alices job title software engineer"}
{"canonical": "relationship status that is relationship status of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "people who are single and currently online"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee who left before 2005"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "find people who are 180 cm tall who are alices gender"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status of two or less persons"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who left with or after alice"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose last day was also alices last day"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a friend of a student that starts in 2004 or before"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started earliest"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "alices friends who are logged in"}
{"canonical": "person whose height is 180 cm and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "singles who are 180 cm tall"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before 2004 or before 2010"}
{"canonical": "person that is logged in and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "natural": "people born in new york that are currently online"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started before 2004 or 2010"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who has friends with a start date after 2004"}
{"canonical": "person that has the most number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string gender)))", "natural": "the person who has the most genders"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was no later than 2004 or 2010"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting before alices birthday"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "person who first quit hisher job"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started after alices end date"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "who is not friends with alice"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who left before 2004 or in 2010"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee quit their job the same day or after alice"}
{"canonical": "gender that is gender of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the gender of employees who have an end date that is 2004 or later"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with same start date as that of employee alice"}
{"canonical": "total height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "find the height of a person"}
{"canonical": "person that is friends with the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has lowest number of friends"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees whore start date is either 2004 or 2010"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what person is friends with a student that has an end date of 2004 or later"}
{"canonical": "person whose height is at least 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "people who are at least 180 cm tall"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose job title is not software engineer"}
{"canonical": "person whose birthdate is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))", "natural": "people who have the same birthday as alice"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what people are logged in and whom are they friends with"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is birth date of alice"}
{"canonical": "university of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "natural": "what university did alice graduate from in 2004"}
{"canonical": "relationship status that is relationship status of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "whose relationship status is unique"}
{"canonical": "person that employee whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who started working in 2004"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with three or more friends"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "this student who finishes school at al most the same time as alice"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who started their studies in an year other than 2004"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are genders of students not studying computer science field"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students who did not graduate in 2004"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who finished school the earliest"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended no greater than alices start date"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "find people with a start date of 2004 and height of 180 cm"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees who will have starte by alices birthday"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the 180 cm tall persons job title"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who quit their job before alice joined"}
{"canonical": "employee whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which emloyees had their last no earlier than 2004 or 2010"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students starte before 2004 or 2010"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the friend of an employee who did not quit in 2004"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "what people are friends with alice and have a height of 180 cm"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "who measures 180 cm and quit in 2004"}
{"canonical": "person whose height is 180 cm and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "natural": "find people 180 cm tall"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees who started in 2004 or 2010"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the student who began school no later than 2004"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students joining before 2004"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "this employee has an ending date that is almost the same as alices"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the gender of a student that isnt in computer science"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is relationship status of employees starting after 2004"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day in 2004 or 2010"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find friends that have friends that are 180 cm tall"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish after 2004"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "one employee who left in 2004 or before"}
{"canonical": "relationship status that is relationship status of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who strated before 2004"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started on or before alices birthdate"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me all students with a single major"}
{"canonical": "person whose birthplace is new york and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "natural": "find people born in new york that are friends with alice"}
{"canonical": "person that is friends with person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find me all people who has a friend born in new york"}
{"canonical": "person that alice is friends with and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "name a person who is friends with alice"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not before end date of employee alice"}
{"canonical": "person whose birthdate is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "who was born on or before alices final day of employment"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who stated working in 2004 or after"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees whose start date is earlier than 2004"}
{"canonical": "employee whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish on alices birthday"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of a person who started before 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of the student leaving prior to 2004"}
{"canonical": "person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "natural": "name someone who is 180 cm tall"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date later than the end date of alice"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work after alice stopped school"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that didnt finish in 2004"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "people who are 180 cm tall and are software engineers"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated before alices birthday"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who did not stop working before alice was born"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee whos end date is 2004"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date that is before the end date of alice"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students who started in 2004 and after"}
{"canonical": "number of city", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))", "natural": "what is the citys number"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employees who started working after 2004"}
{"canonical": "person that is friends with the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has most friends"}
{"canonical": "employee whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day is the same as alices birth date"}
{"canonical": "person that the most number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find the person with the most friends"}
{"canonical": "employee whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended their job on the same day as alices brithday"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "show me the students starting at the same time or after alice"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "name a person 180 cm tall who started working in 2004"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of people who graduated school but not in 2004"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with an employee who has a start date no later than 2004"}
{"canonical": "person that at most two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has maximum 2 friends"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find people with a gender of male and their friends"}
{"canonical": "person that is friends with at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people who do not have more than two friends"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students finishing after 2004"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not after start date of student alice"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who quit their job before 2004"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date earlier than the start date of alice"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what status is the relationship status of less than two people"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students began school either after 2004 or 2010"}
{"canonical": "start date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "natural": "when did alice start studying computer science"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school the same day alice quit her job"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has an end date earlier than alice"}
{"canonical": "gender that is gender of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find the gender of no more than two people"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who joined their jobs in years other than 2004"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "alices friends who were born in new york"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work before alice started school"}
{"canonical": "person that is friends with alice and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find alices friends"}
{"canonical": "number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the persons number"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "whos 180 cm tall and in the same sort of relationship situaiton as alice"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after the employee alice"}
{"canonical": "person whose gender is male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))", "natural": "find someone of any gender"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with students starting before on in 2004"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has the fewest fields of study"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "one student who started in or after 2004"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "find the person that is 180 cm tall and was born in new york"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "who has the same relationship status as alice and is 180 cm tall"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with the employees leaving the company after 2004"}
{"canonical": "employee whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the employee whose last day was on alices birthdate"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students starting on or after 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is thre relationship status of students who graduated after 2004"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who started after alice quit her job"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student with an end date of 2004 or later"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name the friend of a student who began prior to 2004"}
{"canonical": "person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "natural": "what person is 180 cm tall"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birth city of employees whose start date is less than 2004"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what sex are the students who did not start in 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "180 cm tall people joined in 2004"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting on alices last day"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the job title of people who are 180 cm tall"}
{"canonical": "person whose birthdate is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people born after alices first day of school"}
{"canonical": "gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender)))", "natural": "is alice male or female"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find all people with friends that finished school in 2004"}
{"canonical": "person whose relationship status is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))", "natural": "people with relationship status as alice"}
{"canonical": "end date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "natural": "when did alice stop working as a software engineer"}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "180 cm tall persons who share birthdate with alice"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "who has friends that are online"}
{"canonical": "person that two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has only two friends"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city was the student that started after 2004 born in"}
{"canonical": "city that is birthplace of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "place of birth for the fewest people"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find me people who have the same relationship status of people who are 180 cm tall"}
{"canonical": "gender that is gender of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the gender of most"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the relationship statuses of employees who do not have the job title of software engineer"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the graduates of 2004 born"}
{"canonical": "gender that is gender of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender is more than two people"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting before 2004 or 2010"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employer has the least number of employees"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started school after 2004 or 2010"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "who is the person whose birthplace is new york and whose height is 180 cm"}
{"canonical": "person whose height is larger than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "find me all people are are taller than 180 cm"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose end date is not 2004"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of a student whose end date is not 2004"}
{"canonical": "person that has the largest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "who is the oldest person"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "people from new york that are friends with alice"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is lower than the start date of alice"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who started no later than 2004 or 2010"}
{"canonical": "city that is birthplace of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "what city was the male born"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who quit their jobs in 2004"}
{"canonical": "city that is birthplace of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were at least two people born in"}
{"canonical": "person whose height is 180 cm and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "natural": "who is alice friends with thats 180 cm tall"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who started work before 2004"}
{"canonical": "person whose birthdate is 2004 and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "natural": "who is born in 2004 at new york"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "person who is friends with an employee who retired at least 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "find me all people whose height is 180 cm and born in 2004"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student whose start date is on alices birthday"}
{"canonical": "person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "natural": "find people with a height of 180 cm"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the fewest jobs"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the relationship statuses of students whom do not study computer science"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working the same day as alice"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student stopped before student alice started"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started on birthdate of alice"}
{"canonical": "gender that is gender of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees with an end date greater than 2004"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what people are friens with students that have a start date not equal to 2004"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "people who are th gender of alices friends"}
{"canonical": "employee whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice stopped working"}
{"canonical": "relationship status that is relationship status of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who are not employed by mckinsey"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has no more than two employers"}
{"canonical": "person whose relationship status is single and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "natural": "people who are single and born in new york"}
{"canonical": "person whose birthdate is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "find a person born before alice started working"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "who is in the same type of relationship as alice and is 180 cm tall"}
{"canonical": "person whose birthdate is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "find people born before the employment end date of alice"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find cities that are the birthplaces of employees with an end date no later than 2004"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left before student alice did"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of the student leaving his job by 2004"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the status of the two peoples relationship"}
{"canonical": "person that is friends with at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has maximum two friends"}
{"canonical": "student that has less than two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who studied at only one university"}
{"canonical": "person that has less than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "natural": "find people with less than two genders"}
{"canonical": "person whose height is smaller than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "find someone shorter than 200 cm"}
{"canonical": "student whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with end date in 2004 or 2010"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which relationship status do less than two people have"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "where were two people both born"}
{"canonical": "end date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "what was alices last day of her job from 2004"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the friend of an employee who quit after 2004"}
{"canonical": "end date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "natural": "when did alice finish studying computer science"}
{"canonical": "person that is friends with alice and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "what male is friends with alice"}
{"canonical": "person that is friends with alice and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which people are mutual friends of alice"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with the employee thats leaving before 2004"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day on or after alices first day"}
{"canonical": "end date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "what date did alice leave her job in 2004"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day is no later than alices birthdate"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school after 2004"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person who is friend of a student who starts at most by 2004"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting other than in 2004"}
{"canonical": "person whose birthdate is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "find people born after the employment of alice"}
{"canonical": "person whose birthdate is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "person born on or after end of alices employment"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees has the least recent start date"}
{"canonical": "person that is friends with the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which person has the fewest number of friends"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people with friends that finished school in 2004 at the latest"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "find all people born in 2004 that are friends with alice"}
{"canonical": "person whose birthdate is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "people who were born the same day as or after alice"}
{"canonical": "city that is birthplace of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "birthplace of two or less persons"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "what person who ended in 2004 is 180 cm tall"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date later than 2004"}
{"canonical": "person that student whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is the student whose start date was at least 2004 friends with"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working after alice stopped working"}
{"canonical": "person that is friends with student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which person is friends with someone who goes to somewhere besides brown university"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose last day was before 2010"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "find me friends of single people"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person who is friends with someone whose end date is after 2004"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend of an employee that ends after 2004"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees finishing contemporaneous to or before alice"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "what person is 180 cm tall and is currently online"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started no earlier than alices end date"}
{"canonical": "person whose birthdate is 2004 and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find alices friends that were born in 2004"}
{"canonical": "person that at most two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people with only one or two friends"}
{"canonical": "number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "how many people are there"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit their job after 2004"}
{"canonical": "person whose height is 180 cm and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "natural": "180 cm tall friends of alice"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not after start date of employee alice"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before 2004 or 2010"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "who are alices friends from her hometown"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "a friend of alice or bob"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a person whose employee friend didnt leave in 2004"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee that started before 2004"}
{"canonical": "employer of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "natural": "who is alices boss at her software engineer job"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find an employee who left after 2010"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of students who have a start date after 2004"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the genders of employees who have an end date no later than 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which employee has the same relationship status as the employee who started earlier than 2004"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the genders of students with end dates later than 2004"}
{"canonical": "relationship status that is relationship status of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "relationship status of people that are friends with alice"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the relationships status of an employee who started no later than 2004"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school after the day alice ended school"}
{"canonical": "person whose birthdate is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "who was born before alice left"}
{"canonical": "180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))", "natural": "find people who are between 180 cm and 200 cm tall"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "180 cm tall person who is logged in"}
{"canonical": "180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))", "natural": "either 180cm or 200cm"}
{"canonical": "relationship status that is relationship status of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "what is the relationship status of a male"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started earlier than 2004"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing before 2004"}
{"canonical": "number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type))))", "natural": "how many relationship statuses are there"}
{"canonical": "person whose birthplace is new york and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "natural": "what person was born in new york and single"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people born in 2004 who are 180 cm"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "a friend of alice who is 180 cm tall"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is later than the start date of student alice"}
{"canonical": "person that is friends with two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has two friends"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplaces of employees who started after 2004"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students who started in or after 2004"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting the same day as student alice"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "who is friends with someone born in new york"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date that is the same or greater than student alice"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birthplaces of students whose last day was 2004 or before"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "find people born in 2004 who are 180 cm tall"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that started school before 2004"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student starting after alice was born"}
{"canonical": "relationship status that is relationship status of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "relationship status that is the same as a person born in 2004"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "birth city of person whose height is 180 cm"}
{"canonical": "person that employee whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who started work in 2004 at the earliest"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not after end date of student alice"}
{"canonical": "person that the most number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has the most friends"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birthplace of employees whose last day is not in 2004"}
{"canonical": "person that is friends with alice and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "what single person is friends with alice"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed their study before alice was born"}
{"canonical": "person whose birthdate is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "find people who were born after alice quit her job"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student goes to the same university as student alice"}
{"canonical": "person that has the least number of birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string birthplace)))", "natural": "find people with no birthplaces"}
{"canonical": "start date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "what day in 2004 did alice start working"}
{"canonical": "relationship status that is relationship status of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what is the relationship status of a person born in 2004"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who quit their jobs after 2003"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name the employees who quit the job when alice was born "}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of students who joined after 2004"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date later than the start date of alice"}
{"canonical": "person that has two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "natural": "what is a person who has two genders called"}
{"canonical": "student whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is same as that of employee alice"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who quit the job after 2004 "}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is before the end date of employee alice"}
{"canonical": "end date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "find people with employment end date as 2004"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "people who are born in new york and are 180cm tall"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of student whose start date is after 2004"}
{"canonical": "student whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date that is greater than alices birthday"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started after alices end date"}
{"canonical": "field of study of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "natural": "did alice study computer science"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school before alice started working"}
{"canonical": "person that has less than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "natural": "which people have less than two relationship statuses"}
{"canonical": "person whose birthdate is 2004 and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "what persons birthday is in 2004"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "gender of alices friends"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person that is a friend of student who will graduate by 2004"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who start with alice"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who quit their jobs before 2005"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find the people who are friends with males"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose start date is less than that of student alice"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is either 2004 or 2010"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with an employee who had an end date no later than 2004"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started at or after the end date of alice"}
{"canonical": "end date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "natural": "what is the end date of alices job as software engineer"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of fewer than two of the people"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which person is friends with the employee whos end date isnt 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who are not employed by mckinsey"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "name a persons friend who was born in 2004"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that finished school in any year but 2004"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "who is friends with bob or alice"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the students birthplace city who started at the most in 2004"}
{"canonical": "student that has the most number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person that went to the most universities"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who is a software engineer or program manager"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "a 180 cm tall person born in same place as alice"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who joined study on the day alice was born"}
{"canonical": "student that has less than two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "someone who has studied at less than two universities"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working before alice started school"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with the most fields of study"}
{"canonical": "person whose height is smaller than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "what persons height is shorter than 180 to 200 cm"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are genders of students starting after 2004"}
{"canonical": "person that has the most number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string relationship_status)))", "natural": "who has the most relationship statuses"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "find single people who are friends with alice"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after alice started school"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started the day alice left her job"}
{"canonical": "person that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "find the tallest person"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "birth place of two persons"}
{"canonical": "job title of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "natural": "is alices job title software engineer"}
{"canonical": "city that is birthplace of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the birth city of no more than two people"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student whose end date is no later than 2004"}
{"canonical": "person that is logged in and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "natural": "males who are online"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "who was born in 2004 and is 180 cm tall"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice started working or before"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit after alices birthday"}
{"canonical": "person whose gender is male and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "natural": "which guys are also 180 cm tall"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee with latest last day"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the birthplaces of people who are 180 cm tall"}
{"canonical": "person that is logged in and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "natural": "find me all males that are currently online"}
{"canonical": "person that employee whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees who have a start date of 2004 or later and their friends"}
{"canonical": "person that is friends with two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which person has two friends"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after alice did"}
{"canonical": "person that has at least two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "natural": "who has two or more genders"}
{"canonical": "alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob))", "natural": "person whose name is alive or bob"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that started school after 2004 born"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose start date is at most 2004"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who started school before alice"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started their job on alices birthday"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with same field of study as that of student alice"}
{"canonical": "person whose birthdate is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))", "natural": "people born on the same day as alice"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students quit outside of 2004"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "find people with a height of 180 cm and the same birthplace as alice"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose end date is not after 2004"}
{"canonical": "person whose gender is male and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "natural": "people who are male and born in new york"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of student whose start date is before 2004"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started before alices start date"}
{"canonical": "relationship status that is relationship status of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "what relationship statuses are claimed by alices friends"}
{"canonical": "person that is friends with person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "who is friends with a person that is friends with alice"}
{"canonical": "person that is friends with at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "person with more then two people"}
{"canonical": "person that is friends with person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "friend of someone born in 2004"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who have the same end date as the start date of student alice"}
{"canonical": "field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "natural": "what did alice study"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "whats the birthplace of alice"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of student who joined before 2004"}
{"canonical": "person whose birthplace is city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "natural": "find someone born in the same city as alice"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender are the two people"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of emmployee whose end date is after 2004"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee ending before or when alice was born"}
{"canonical": "person whose birthdate is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "people born after alice"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who are some of my noncomputer science major connections friends with"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started school before alice started school"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what genders are the people that finished school after 2004"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "who is friends with the male"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date that is later than the start date of alice"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date the same as employee alice"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what company employs an 180 cm tall person"}
{"canonical": "relationship status that is relationship status of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has the same relationship status as that of the majority"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending after or when alice starts"}
{"canonical": "person whose height is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find all people who are 180 cm tall"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "what people have two relationship statuses"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find students friends with last days other than 2004"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is after start date of employee alice"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee who left before alice was born"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of people that started school after 2004"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees dont have the job title software engineer"}
{"canonical": "software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))", "natural": "people that are software engineers or program managers"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who joined before 2004"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name the student who was born after alice "}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after alices birthdate"}
{"canonical": "gender that is gender of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "gender of someone who is single"}
{"canonical": "start date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "natural": "start date of alices study which ended in 2004"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who started working in or before 2004"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people who are students with a field of study that is not computer science and their friends"}
{"canonical": "person whose birthdate is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "person born after alice started school"}
{"canonical": "person whose height is smaller than height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "find people shorter than alice"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "alices male friends"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the gender of one worker who left in 2004 or before"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students studying either computer science or history"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of one employee whos not a software engineer"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has friends that are students whos start date before 2004"}
{"canonical": "total height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the combined height of everyone in my network"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student who began at 2004 or before"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have the same birthrate and start date of alice"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students with end dates other than 2004"}
{"canonical": "university of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "natural": "which is the university of studen alice who finished in 2004"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees whose job title is not software engineer"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of working people that did not start in 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose end date is before 2004"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the birth city for students whom have a start date other than 2004"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "which people are 180 cm at brown university"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of student whose end date is not before 2004"}
{"canonical": "person that has more than two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "natural": "find people that have more than two birthplaces"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name a friend of alice who was born in new york"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student left most recently"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed the study after 2004"}
{"canonical": "person whose birthdate is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))", "natural": "what person has the same birthdate as alice"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the relationship status of the person who is 180 cm tall"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "people who are 180 cm tall and quit in 2004"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "relationship status of people whose height is 180cm"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date that is earlier than student alice"}
{"canonical": "person whose relationship status is single or married", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married)))", "natural": "all single or married persons"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "find me all people who are not alices friends"}
{"canonical": "employer of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "natural": "who is alices employer"}
{"canonical": "person that has the largest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "find the oldest person"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with end date after alices start date"}
{"canonical": "person that is friends with alice and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "what single person is friends with alice"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before 2004"}
{"canonical": "person that alice is friends with and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "friend of alice"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student that ends the same time alice starts"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice did or before"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "people with friends who are single"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school after alice was born"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of student whose start date is before 2004"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which relationship status is of at most two person"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "who is alices male friend"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender are the employees who left the company before 2004"}
{"canonical": "person whose height is 180 cm and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find people with a relationship status of single and a total height of 180 cm"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "which people are friends with the person currently logged in"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the most previous employers"}
{"canonical": "brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))", "natural": "ulca or brown univercity"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whos last day was between 2004 and 2010"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name the employee who quit the job on the same date as employee alice"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "birthplaces of all 180 cm tall people"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school before alice did"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started before alice"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people who stopped school in 2004 or later"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing contemporaneous or before alice"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date that is later than that of student alice"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of a student starting before or during 2004"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who started before 2004"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who studied in most fields"}
{"canonical": "employee whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting after 2004"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "someone not friends with alice"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employe that has a smaller start date than alice"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with earliest last day"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is a student that started after 2004"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what company emplys a 180 cm tall person"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting before alice finishes"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending before alice starts"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting after alice"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish with or after alice"}
{"canonical": "gender that is gender of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "is there a gender less than two people have"}
{"canonical": "person whose relationship status is single and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "natural": "people born in new york that are single"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "people who started in 2004 and are 180 cm tall"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after alice was born"}
{"canonical": "student that has the most number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who attended college the longest"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "name a person who is online who is 180 cm tall"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started working when alice was born or before"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee start after alice leaves"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what is the birthplace of those who are friends with alice"}
{"canonical": "person whose birthplace is new york and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "natural": "people who are friends with alice and born in new york"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is after alices birth date"}
{"canonical": "gender that is gender of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what gender does the person born in 2004 have"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with one job title"}
{"canonical": "person whose height is at least 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "what person has a height of at least 180 cm"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "find me all of alices guy friends"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "who stopped working in 2004 and is 180 cm tall"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee quit their job on the day alice started"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date that is before the end date of alice"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is bigger than 2004 or 2010"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birth city of a student who didnt stop in 2004"}
{"canonical": "person that is friends with student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of student whose end date is after 2004"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "who is friends with alice and is 180 cm tall"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friends with last day other than 2004"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees whose job title isnt software engineer"}
{"canonical": "relationship status that is relationship status of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what is the person born in new yorks relationship status"}
{"canonical": "person whose birthdate is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people who were born before alice started school"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where was the employee born who does not work for mckinsey"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of the employee with an end date no later than 2004"}
{"canonical": "person that has at least two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "natural": "find someone who lists 2 birthplaces"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before after end date of employee alice"}
{"canonical": "person that is logged in and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "natural": "who is from new york and logged in"}
{"canonical": "employer of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "natural": "which software engineer has employed alice"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees whose last day was in or before 2004"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the fewest employers"}
{"canonical": "person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "natural": "a 180 cm tall person"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people with friends who started work in 2004 at the latest"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is studying computer science or history"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with someone who graduated after 2004"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee with last day same as or before alices"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after alice did"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who have friends who are not software engineers"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee starting on alices first day or later"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student goes to another university besides brown"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which of alices friends is online"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees that will start at the company before alice leaves"}
{"canonical": "person that is logged in and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "single people that are currently online"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people going to any university but brown"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has the most majors"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who are people who are students with an end date no greater than 2004 friends with"}
{"canonical": "person that is friends with alice and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "friend of alice who was born in new york"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find all males who have friends"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the student that started after 2004"}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who joined after alice was born"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of all students except those from brown university"}
{"canonical": "person whose height is 180 cm and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "which singles are 180 cm tall"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who joined before 2004"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the friends of employees that quit in 2004 or later"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees with last day in 2004 or before"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees that are starting their new job on alices birthday"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who left before 2004"}
{"canonical": "student whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice did or before"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employeess last day was least recently"}
{"canonical": "average height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the average height of all the people in my network"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who started in 2004 but before 2011"}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started after alices birthdate"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of the student who started in 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of an employee that stopped working on or before 2004"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students who dont major in computer sience"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who stopped school before alice stopped working"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "which people with an end date of 2004 are 180 cm tall"}
{"canonical": "number of field", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))", "natural": "how many fields are there"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "find people with the same height as alice or 180 cm"}
{"canonical": "gender that is gender of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees who finish after or in 2004"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student starting when alice ends"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date before 2004"}
{"canonical": "person that is friends with the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with the most friends"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school in 2004 or 2010"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students sharing alices field of study"}
{"canonical": "person whose birthdate is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "people who were born after alice graduated school"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who studied in two or less fields"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees left prior to 2004"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "what friend of alice was born in new york"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last days on or after alices birthday"}
{"canonical": "start date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "natural": "which date did alice start who finished in 2004"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students start date is on or before alices end date"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started no later than the start date of alice"}
{"canonical": "relationship status that is relationship status of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what is the relationship status of alice or bob"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not before end date of student alice"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with a student that started no earlier than 2004"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with an employee whose end date is no later than 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is relationship status of student with last day before 2004"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "friend of alices friend who is from new york"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose end date is after 2004"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with employees that have an end date of 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of working people that did not stop in 2004"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school the day alice was born"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the job title of the person that is 180 cm"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is no later than alices birthday"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started on alices end date"}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "who shares a birthday with alice and is 180 cm tall"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "fine me all employees who start by 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is thre relationship status of students who started no sooner than 2004"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what is the most end date of student 2004 or 2010"}
{"canonical": "start date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "natural": "when did mckinseys employe alice start"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have the fewest job titles"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee left their job after alice started"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting before alice"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before 2004"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who is friends with over two people"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of people who joined their study after 2004"}
{"canonical": "birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace)))", "natural": "what is alices birthplace"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee that ends before alice starts"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has no more than two employers"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that finished school in or before 2004"}
{"canonical": "relationship status that is relationship status of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "least common relationship status"}
{"canonical": "person whose gender is male and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find all male singles"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students start no sooner than alices graduation day"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where are the birth cities of employees who have a start date of no earlier than 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is thre relationship status of students who started no later than 2004"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started earlier than 2004 or 2010"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that work for mckinsey or google"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that finished school before 2004 born"}
{"canonical": "person that has more than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "natural": "someone with multiple relationship statuses"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who is the employer of the person whose height is 180 cm"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started in 2004 or before"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice stopped school"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with someone who didnt go to brown university"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "who is 180 cm and from the same place as alice"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "who is alices friend that is from new york"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended no later than alice"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee whose end date is similar to that of alice"}
{"canonical": "person whose birthdate is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "which person has the birthdate of alice"}
{"canonical": "person whose birthdate is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "natural": "find people born after alices last day of work"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender are the two people"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day before or the same as alices"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of the student that did not attend brown university"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date that is the same as employee alice"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find students friends not studying computer science field"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose field of study is not computer science"}
{"canonical": "person whose birthdate is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "natural": "person who was born in 2004 or 2010"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "people that have friends that alice is friends with"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting before alice finishes"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who joined their job after 2004"}
{"canonical": "end date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "natural": "what was the graduation date of alice in 2004"}
{"canonical": "gender that is gender of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is gender of the student whose end date is before 2004"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me students whose  end date is no later than 2004"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who joined after alice"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what relationship statuses are meant for less than two people"}
{"canonical": "student whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate in 2004 or 2010 or before"}
{"canonical": "person that is friends with student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with a student who started before 2004"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school in or after 2004"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working on or after alice was born"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the latest start date"}
{"canonical": "gender that is gender of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what genders are the people that stopped working after 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "name a person who is 180 cm who started working in 2004"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what genders are the people whom alice is friends with"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "person who is friends with someone whose start date is no later than 2004"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "who is 180 cm tall and born in the same city as alice"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what is the start date of a student who started before alice"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who started school on or before the day alice finished school"}
{"canonical": "start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))", "natural": "when did employee alice started"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has the greatest end date"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that stopped working before 2004"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "alices friends born in 2004"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student graduates the earliest"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have a start date before either 2004 or 2010"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose job title is same job title as of employee alice"}
{"canonical": "city that is birthplace of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what city was alice or bob born in"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "the job title of a 180 cm tall person"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employee who ended after 2004"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplaces of students who ended school in or after 2004"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish before alice"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose end date is not 2004"}
{"canonical": "person whose birthdate is 2004 and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is friends with alice and was born on 2004"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date before the birthdate of alice"}
{"canonical": "person that has less than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "natural": "find me all people who belong to one gender"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with someone who started working during or before 2004"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was most recently"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is gender of students who started in 2004 and later"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "find people who are 180 cm tall with 2004 start dates"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is alices birthday or later"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "name a person 180 cm tall who was born in 2004"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "person from same birth place as that of alice"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before alice stopped working"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students who started before 2004"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the relationship status of the person that is 180 cm tall"}
{"canonical": "person that has less than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "natural": "relationship history of a person"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who studied in universities other than brown university"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose university is not brown university"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the birth city of students with an end date later than 2004"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee who left after alice was born"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before start date of student alice"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find a student who left on alices birthday"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who quit their job in or after 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the relationship status of an employee who has an end date of 2004"}
{"canonical": "person that has more than two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "natural": "which person was born in more than 2 places"}
{"canonical": "gender that is gender of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of the student that leaves before 2004"}
{"canonical": "person that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "what person is the tallest"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after alice left"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who are the friends of the new students that are starting by 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship statuses of students who began school in or after 2004"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting before 2004"}
{"canonical": "person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "natural": "who is 180 cm tall"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who quit working most recently"}
{"canonical": "person whose birthdate is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "people born before alice finished school"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school the same day that alice ended school"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the latest start date"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is after start date of student alice"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate no sooner than alices first day of work"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "one person whose friend started studies before 2004"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who was a student before or on 2004"}
{"canonical": "field that is field of study of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "field of study of someone 180 cm tall"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with fewer than two job titles"}
{"canonical": "employee whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working in or after 2004 or in or after 2010"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "someone 180 cm tall and same gender as alice"}
{"canonical": "end date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "natural": "when did software engineer alice left"}
{"canonical": "job title of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what was alices job title from 2004"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employees how started after 2004"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting contemporaneous to or before alice"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me students end date equal to student alice"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "who is online and is 180 cm tall"}
{"canonical": "person that at most two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has two or less friends"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name the friend of alice whose birthplace is new york"}
{"canonical": "person whose gender is male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))", "natural": "people who are male or female"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "friends of alice born in 2004"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what people are employees of a employer that is not mckinsey friends with"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on or after alices last day"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of students who were born after 2004"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "a friend of alice born in 2004"}
{"canonical": "person that is friends with student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with a student whose end date is after 2004"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is the same as the end date of alice"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee who quit later than 2004"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of the student who left by 2004"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what genders are the people that stopped school in any year but 2004"}
{"canonical": "person whose gender is male and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "natural": "a 180 cm tall male"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that finished school in or before 2004 born"}
{"canonical": "person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "natural": "what person was born in new york"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students who did not graduate before 2004"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name a person 180 cm in height who is friends with alice"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is before 2004"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who stopped working before 2004"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who quit their jobs after 2004"}
{"canonical": "field that is field of study of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the field of study for people who are 180 cm tall"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees whose last day was before 2004"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose start date is 2004 or later"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees starting after 2004"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who did not begin school before 2004"}
{"canonical": "field of study of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "natural": "what is alice studying at brown university"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of students whose end date is no later than 2004"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after alice started working"}
{"canonical": "person that has at least two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "natural": "transgendered people"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting on or after alices last day"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated no later than the day alice did"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit before alice quit her job"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee that has the lowest job status"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day before or on alices last day"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person graduating in 2004 or earlier"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting before alices last day at work"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is before the birthday of alice"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the latest start date"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who stopped working at the same time as alice"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people with friends who are not software engineers"}
{"canonical": "person whose height is at least 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "people who are 180 cm or taller"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "which student from brown university is 180 cm tall"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee starting in 2004"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no later than alices birthdate"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what people are friends with a person whose height is 180 cm"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the people who joined their job before alice joined her studies"}
{"canonical": "city that is birthplace of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were more than two people in my social network born in"}
{"canonical": "person that has the most number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string gender)))", "natural": "which person claims the most genders"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined study on the day alice completed"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "person that stopped working before alice stopped school"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "alices friends who are single"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people who are friends with employees who have an end date no later than 2004"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting when alice finishes"}
{"canonical": "person whose birthdate is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))", "natural": "find people born the same day alice ended school"}
{"canonical": "field of study of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "natural": "what did alice stop studying in 2004"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "employers of all people who are 180 cm tall"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is minimum the end date of employee alice"}
{"canonical": "person whose gender is not male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "natural": "find someone who is female"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of students who graduated before 2004"}
{"canonical": "gender that is gender of alice and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "what is alices gender"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not after alices end date"}
{"canonical": "person whose gender is male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))", "natural": "people that are male or female"}
{"canonical": "person whose height is larger than height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "people taller than alice"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender are people that started working in or after 2004"}
{"canonical": "person whose gender is male and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "natural": "males who are online"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student graduated before alice quit her job"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "who was born in the same place as alice"}
{"canonical": "employee whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employed until 2004 or 2010"}
{"canonical": "person that has the least number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "natural": "which person has the least number of relationship statuses"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "people born in new york and 180 cm tall"}
{"canonical": "person whose height is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find people who are 180 cm tall"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended school right when alice started her job"}
{"canonical": "relationship status that is relationship status of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "find people who are single"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees start the day alice starts"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student who started before alices departure"}
{"canonical": "start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))", "natural": "when did alice start school"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "friends of males"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that have two or fewer employers listed"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working before alice was born"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the students relationship status who ended greater than 2004"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender are employees whose job title isnt software engineer"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who quit their jobs after alice born"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who joined work after alice"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender is the gender of two people"}
{"canonical": "person whose birthdate is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "people born on or before the date alice stopped attending school"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "name a person friends with a person that is 180 cm tall"}
{"canonical": "person whose birthplace is not new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "natural": "person not born in new york"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "people who were born in the same place as alice"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth  city of employee whose start date is not 2004"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is the person who is friends with a nonmckinsey employee"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "genders of employees not finishing in 2004"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "a unique relationship status"}
{"canonical": "person whose birthdate is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "find someone born after alices last day of work"}
{"canonical": "person whose birthdate is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "people born in 2004 or later"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with an employee who started after 2004"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "people who are friends with alice and born in 2004"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what employee has a start date of 2004"}
{"canonical": "person whose gender is male and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "all males who were born in 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who did not start in 2004"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "which people have more than genders"}
{"canonical": "student whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date that is no greater than student alices start date"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with an end date that is not 2004"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of an employee not starting in 2004"}
{"canonical": "field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "natural": "what was alices field of study as a student"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people with friends who graduated school after 2004"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated on or before alices birthday"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "friends of people who are taller than 180 cm"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who studied the same field as alice"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees who dont finish in 2004"}
{"canonical": "gender that is gender of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what is the gender of alice or bob"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which gender is the student who ended after 2004"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is before end date of student alice"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is at least either 2004 or 2010"}
{"canonical": "person that has at most two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "natural": "person that has two genders"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employee with end date not in 2004"}
{"canonical": "city that is birthplace of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "city where person whose relationship status is single born"}
{"canonical": "person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "a friend of alice"}
{"canonical": "city that is birthplace of alice and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "where was alice born"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that started school in or before 2004"}
{"canonical": "person whose birthdate is 2004 and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "natural": "find a person logged in that was born in 2004"}
{"canonical": "start date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "natural": "when did alice start at mckinsey"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of student whose start date is not before 2004"}
{"canonical": "gender that is gender of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "gender that is shared by two persons"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who graduated no sooner than 2004"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending when alice starts"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before alice started working"}
{"canonical": "employer of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "natural": "find who alice worked for in 2004"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who were hired either in 2004 or 2010"}
{"canonical": "job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "natural": "what is alices job title"}
{"canonical": "university of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "natural": "alice who is a student of computer science is a student of which university"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of the student whose start date is before 204"}
{"canonical": "student whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who died before alice was born"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of student whose end date is not 2004"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started earliest"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is studying the most things"}
{"canonical": "person whose birthdate is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "what person has a birthdate no later than 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the bithplace of an employee who did not start in 2004"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were employees who are not software engineers born"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit before birthdate of alice"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that finished school after 2004 born"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "locate students who have an end date that is no greater than employee alices"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school when alice started working"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "people who are 180 cm tall and study computer science"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who began working either by 2004 or 2010"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is later than 2004"}
{"canonical": "person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find all people born in 2004"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose start date is not after 2004"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend is someone not employed by mckinsey"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school in 2004 or later"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students graduate when alice was hired"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with only one field of study"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee that ends before alice"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting contemporaneous to or after alice finishes"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish after alice starts"}
{"canonical": "person whose gender is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "person with same gender as that of person 180 cm tall"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the birthplaces of employees starting after 2004"}
{"canonical": "start date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "natural": "when did alice start attending brown university"}
{"canonical": "student that has the most number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who attended the most universities"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which is the university alice studied"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last days on or before alices first day"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date that is the birthdate of alice"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate no sooner than alices first work day"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the job title of people who have a height of 180 cm"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees other than software engineers"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee who start date is not 2004"}
{"canonical": "person that is friends with person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "what person is friends with males"}
{"canonical": "relationship status that is relationship status of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what relationship statuses are claimed by people born in 2004"}
{"canonical": "university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "natural": "what is the university of alice"}
{"canonical": "person whose height is at most height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "who is either shorter than alice or same"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who start after 2004"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was more recent than alices graduation day"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on alices start date or later"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have had no more than employers"}
{"canonical": "job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "natural": "what is job title of employee alice"}
{"canonical": "student whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student stopped at the same time employee alice did"}
{"canonical": "relationship status that is relationship status of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "whats the relationship status of people who are male"}
{"canonical": "person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)))", "natural": "what person is logged in"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started work before alice started school"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees had a quit date that was not in 2004"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who left the day alice joined"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have the fewest number of job titles"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who graduates before alice starts"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me a list of students whose start date was in 2004 or 2010"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before alice stopped being a student"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date less than that of the start date of employee alice"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees that started working after 2004 or 2010"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose end date is before 2004"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "find friends of alice or bob"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have the same job title as alice"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students starting before 2004"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who is friends with the person who is 180 cm tall"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "name a person who is friends with more than two other people"}
{"canonical": "relationship status that is relationship status of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "find people who have the same relationship status of someone alice is friends with"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the relationship status of a student not starting in 2004"}
{"canonical": "start date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "alices 2004 employment start date"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting before 2010"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name the relationship of thie student who started before 2004"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "who is online and friends with alice"}
{"canonical": "person whose relationship status is not single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "natural": "people who are in a relationship"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what was the gender of employees who left before 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of the employee starting after 2004"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student that is enrolled in brown or ucla university"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with not more than two job titles"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "find the person that is 180 cm tall and is also female"}
{"canonical": "person whose birthdate is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "people who were born after alice"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employess whose job title isnt softare engineer"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name a friend of the student who graduated after 2004"}
{"canonical": "gender that is not gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string !=) en.person.alice))", "natural": "people who are not the same gender as alice"}
{"canonical": "job title of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what is alices job title from company she left in 2004"}
{"canonical": "person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)))", "natural": "people that are currently online"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was the same day alice started school"}
{"canonical": "person that has at least two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "natural": "what people have at least two relationship statuses"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person that stopped school most recently"}
{"canonical": "city that is birthplace of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "where was alices friend born in"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "find friends of person born in 2004"}
{"canonical": "person that alice is friends with and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "find all people who are friends of alice"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of current or former students excluding those that started in 2004"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "show me all employees that leave the company before alice starts"}
{"canonical": "person that student whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of people who started school after 2004"}
{"canonical": "person that is friends with alice and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "find people who are friends with alice and born in new york"}
{"canonical": "person that has two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "natural": "who has two genders"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with last day other than 2004"}
{"canonical": "person whose gender is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which gender are most people who are 180 cm tall"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "students who started no later than alices birthdate"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person who graduated during or before 2004"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before 2010"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students whose end date is later than 2004"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "find people with two birthplaces"}
{"canonical": "person that has at most two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "natural": "who has maximum two relationship status"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name a friend of alice who is online"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "find people with two relationship statuses"}
{"canonical": "field of study of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "natural": "alices field of study is computer science"}
{"canonical": "person that student whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name a friend of the student who started no later than 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "who started in 2004 and is 180 cm tall"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with employees other than software engineers"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "find people who are logged in with a height of 180 cm"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working in or after 2004"}
{"canonical": "number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))", "natural": "university number"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "who has two birthplaces"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date less than 2004"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find all employees whose start date matches alices"}
{"canonical": "gender that is gender of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of people that started working after 2004"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who graduated after 2004"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduated any year but 2004"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "whats the relationship status of two people"}
{"canonical": "gender that is gender of alice and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "gender which is same as alice"}
{"canonical": "employee whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who finished working when alice started or before"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date of employee alice or greater"}
{"canonical": "person that is logged in and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "natural": "alices friend who is logged in"}
{"canonical": "person that is friends with student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with a student who does not attend brown university"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is the friend of the student who quit in or after 2004"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "find people with a height of 180 and an end date of 2004"}
{"canonical": "employee whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started when alice quit her job"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which city is the birthplace of two of the people"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with the least job titles"}
{"canonical": "city that is birthplace of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find the birthplaces of people who are male"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started on or before alices birthdate"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what people are friens with alice"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting after 2004"}
{"canonical": "person whose birthdate is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "which people were born after 2004"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of students who graduated no later than 2004"}
{"canonical": "start date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "natural": "start date of alice at mckinsey"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started after alices birthdate"}
{"canonical": "person whose birthdate is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "natural": "find people whose birthday is the same as alices end date"}
{"canonical": "person whose gender is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the gender of all people logged in with a height of 180 cm"}
{"canonical": "person whose birthplace is city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))", "natural": "find people who has the same birthplace as alice"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not 2004"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "who is the same height as alice at 180 cm"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me friends of people who joined their jobs before 2004"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is same as start date of employee alice"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "who is online that is 180 cm tall"}
{"canonical": "field of study of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "natural": "what is the field of study of student alice whose university is brown university"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person is quit no later than 2004"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started before 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that stopped working after 2004"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with not more than two universities"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the birthplace of a student starting after 2004"}
{"canonical": "person whose birthdate is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "people born after alice started working"}
{"canonical": "city that is birthplace of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "what city were people who are single born in"}
{"canonical": "person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "natural": "people born in new york"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people who have more than two friends"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who began in 2004 or later"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name a student who started in 2004 or 2010"}
{"canonical": "relationship status that is not relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "natural": "people who have a different relationship status than alice"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing on alices starting day"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who stopped working in 2004"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with smallest end date"}
{"canonical": "relationship status that is relationship status of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "what is the males relationship status"}
{"canonical": "average height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the average height of a person"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "find males that alice is friends with"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "find the male friends of alice"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended on alices start date"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of the employee who didnt start in 2004"}
{"canonical": "start date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "natural": "what date did alice quit studying in 2004"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student stopped before alice was born"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student left school before alice left school"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "people that have two birthplaces"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date greater than the start date of employee alice"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with a student whose start date is before 2004"}
{"canonical": "gender that is gender of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what is the gender of person who is born in 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose employer is not mckinsey"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with an end date that is the same or later than student alice"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with least number of job titles"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of the employee who started earlier than 2004"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is that employee who isnt a software engineer friends with"}
{"canonical": "city that is birthplace of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what city were alice or bob born in"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is before birth date of alice"}
{"canonical": "start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))", "natural": "what is schooling start date of alice"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who graduated before 2003"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose end date is not after 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of working people that did not start in 2004"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting before alice"}
{"canonical": "person that is friends with person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "who is friends with alices friend"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students who started no later than 2004"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have the fewest majors"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people who are friends with employees who have a start date of no later than 2004"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students who started school in 2005 or later"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students started before alice"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students with a start date no later than 2004"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who has friends that are not employees at mckinsey"}
{"canonical": "person whose birthplace is new york and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find single people born in new york"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with an employee who does not have the job title of software engineer"}
{"canonical": "city that is birthplace of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "where were alices friends born"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduated before alices birthdate"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends connections who graduated after 2004"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "which of alices friends were born in 2004"}
{"canonical": "relationship status that is relationship status of alice and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "what is the relationship status of alice"}
{"canonical": "person whose birthdate is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "find people who were born in 2004 or later"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have the same major as alice"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit most recently"}
{"canonical": "person that has the most number of birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string birthplace)))", "natural": "who has the most birthplaces listed"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "who was born in 2004 and is 180 cm tall"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "find people  born in 2004 whose height is 180 cm"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is after end date of employee alice"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who quit after alices birthday"}
{"canonical": "person whose birthdate is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "what person has a birthdate sooner than alice"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what genders are people that stopped working in or before 2004"}
{"canonical": "employee whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit their job in or after 2004"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school on or after the day alice was born"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day before or on alices birthday"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who started after 2004"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is so later than alices"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the friend of a person not employed by mckinsey"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find people whose height is 180 cm that are also friends with alice"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who is 180 cm tall and born in 2004"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish before alices birthday"}
{"canonical": "person whose relationship status is single and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "natural": "what person has their status as single"}
{"canonical": "person whose birthplace is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))", "natural": "find people with same birthplace as alice"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees with a start date no later than 2004 and their friends"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is the same as student alice"}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "a person 180 cm tall and has same birthdate as alice"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employees who quit the job after 2004 "}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school on or after the day alice stopped working"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who did not graduate before alice enrolled"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend of someone who quit after 2004"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birth city of a worker who started in 2004 or after"}
{"canonical": "person that has the smallest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "who is youngest"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who share alices field of study"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "the university of someone 180 cm tall"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me all students who graduated after 2004"}
{"canonical": "person whose birthdate is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "who is born after student alice started"}
{"canonical": "relationship status that is relationship status of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what is the relationship status of friend of alice"}
{"canonical": "person that has at least two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "natural": "what people have two or more genders"}
{"canonical": "person whose relationship status is single and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "natural": "which male has a relationship status of single"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplaces of students that started school after 2004"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no later than the day alice started work"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working after alice did"}
{"canonical": "person that alice is friends with and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "find people whom are friends with alice"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "what people with a birthdate of 2004 are also friends with alice"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "name a friend of the person who is online"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not before end date of employee alice"}
{"canonical": "city that is birthplace of alice and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "who is born in a city that alice was born in"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date close to the start date of alice"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started not after 2004"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is on the date student alice started"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students at brown or ucla"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the earliest start date"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the birth city of all students whoes end date is 2004 or later"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is the newest employee"}
{"canonical": "person whose birthplace is not new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "natural": "people not born in new york"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the employee who who left after alice started"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students do not attend brown university"}
{"canonical": "end date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "natural": "when did alice graduate after studying computer science"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date that is no greater than student alice"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "where was alices friend born"}
{"canonical": "university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "natural": "alice is a student at which university"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with people who got their current job before 2005"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the place of birth for all employees starting before 2004"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting after 2004"}
{"canonical": "person that has at most two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "natural": "what person has two relationship statuses"}
{"canonical": "university of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "natural": "what university did alice attend in 2004"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who left their job the longest time ago"}
{"canonical": "field of study of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "natural": "what did alice study in 2004"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who completed the education first"}
{"canonical": "average height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the average height of people"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of the student who finished before 2004"}
{"canonical": "person whose birthdate is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "people born before alice quit her job"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of the employee who started in 2004"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with a student whose start date is 2004 or later"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student was the last to finish"}
{"canonical": "university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "natural": "find alice a student at university"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees stared the same day alice started school"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "cities of employees who were hired after 2004"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who started after student alice"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started on the same day as alice"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date no earlier than alices end date"}
{"canonical": "gender that is gender of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which gender is claimed by at least two people"}
{"canonical": "employee whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who was born when alice quit the job"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose end date is before 2004"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students finishing in or after 2004"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date before student alice"}
{"canonical": "employee whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day on or before alices first day"}
{"canonical": "person whose gender is male and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "natural": "find people who are male and 180 cm tall"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is either 2004 or 2010"}
{"canonical": "number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))", "natural": "what is the total number of genders"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with a student who started before 2004"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students who do not go to brown university"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit before alice graduated"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what people are friends with employees who have an end date before 2004"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students whose last day is 2004 or later"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "which 180 cm tall people have a start date of 2004"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city were students born in that started before 2004"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee is starting by the time alice leaves the company"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee with a start date after alices"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who did not start in 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students not starting in 2004"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "places of birth of employees who quit their job in 2004 or later"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after 2004 or 2010"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find those that are friends with students who have start dates earlier than 2004"}
{"canonical": "person whose height is smaller than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "what person is shorter than 180 cm"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "who is 180 cm tall and has a start date in 2004"}
{"canonical": "person whose height is larger than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "name people whose height is greater than 180 cm"}
{"canonical": "person that has at most two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "natural": "find people with one or two birthplaces"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students with the same field of study as alice"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students began school before alice began working"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before alice did"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students attended between 2004 and 2010"}
{"canonical": "person that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "what person is the shortest"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who stopped school before alice started"}
{"canonical": "person whose gender is male and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "natural": "what male was born in new york"}
{"canonical": "gender that is gender of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees terminated on or after 2004"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left on or after alices birthday"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students graduating in 2004 or later"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what employee has an end date before 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of people who did not start in 2004"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what birthplace has at least two people in it"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees who are not software engineers"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who have no more than two fields of study"}
{"canonical": "mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))", "natural": "either mckinsey or google"}
{"canonical": "student whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student left school after alice quit her job"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date the same as alices end date"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started in 2004 or 2010"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school the same day as alice"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose start date is not 2004"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students not finishing in 2004"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what worker has the most job titles"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started the same day alice did"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me friends of people studying somewhere other than brown university"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working in or before 2004"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "people who is taller then 180 cm logged in"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who strated before 2004"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "what people are logged in with a height of 180 cm"}
{"canonical": "person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "natural": "persons born in new york"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "find the people who are 180 cm tall"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "find people who are logged in who are also friends with alice"}
{"canonical": "person whose gender is male and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "natural": "find males who are 180cm tall"}
{"canonical": "field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "natural": "what is alices field of study"}
{"canonical": "number of city", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))", "natural": "what is the number of city"}
{"canonical": "person whose birthdate is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))", "natural": "who was born on the date alice left"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "find alices friends who are 180 cm tall"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person who is graduating in 2004 at the earliest"}
{"canonical": "person whose birthplace is new york and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "natural": "find people who are logged in and has the birth place as newyork"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have the earliest start date"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender are people that started working before 2004"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find me the two people born in the same city"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "who has the same gender as alice and is 180 cm tall"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who left after alice started"}
{"canonical": "person that has the smallest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "find the youngest person"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is the smallest"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the relationship status of students who graduated since 2004"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all employees who quit before 2004"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people who are students of a university that is not brown and their friends"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "what people have a height of 180 cm and the height of alice"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "find people who are not alices friends"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees finishing before 2004"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who started to work before alices enrollment in school"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing contemporaneous to or after alice starts"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "one student who didnt stop in 2004"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who finish before 2004"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is the same as employee alices end date or later"}
{"canonical": "person that is friends with two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people that have two friends"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students start school the same day alice starts work"}
{"canonical": "gender that is gender of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what are the genders of people born in new york"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose employer is either mckinsey or google"}
{"canonical": "person that has less than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "natural": "people with only one relationship status"}
{"canonical": "person whose relationship status is single and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people who are single and were born in 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of the student that graduated after 2004"}
{"canonical": "job title of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "natural": "what is alices job title at mckinsey"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has an end date smaller than the start date of alice"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that started school after 2004"}
{"canonical": "person that has the least number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "natural": "find people who have only 1 relationship status"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is after end date of student alice"}
{"canonical": "start date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "natural": "when did alice start going to the school that she graduated in 2004"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice stopped school or before"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "locate the gender of students who have an end date of 2004 or later"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student whose field of study is not computer science"}
{"canonical": "gender that is gender of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of an employee with an end date later than 2004"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who quit their job before 2004"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "who is 180 cm tall and has the same birthplace as alice"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whom have an end date that is equal or greater to the birthday of alice"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that started working before 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find relationship statuses for employees with a start date later than 2004"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started on alices birthday"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have start dates later than 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not 2004"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the students of the same gender who were born in at least 2004 "}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of an employee whose end date is not in 2004"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with the latest end dates"}
{"canonical": "person that has less than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "natural": "people that have less than two genders listed"}
{"canonical": "person that is logged in and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "natural": "people that are currently online and friends with alice"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "someone with over two friends"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student whose last day matches alices start date"}
{"canonical": "person that has at least two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "natural": "people that have two or more relationship stutuses"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of the new student starting before 2004"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend of an employee that isnt a software engineer"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "who was born in 2004 and is friends with alice"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with someone who started working before 2005"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that did not stop working in 2004"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose end date is less than 2004 or 2010"}
{"canonical": "start date of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "natural": "who started school when alice graduated in 2004"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the friends of people who joined their studies after 2004"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "sex of students that started school in 2004 or earlier"}
{"canonical": "person whose birthdate is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "who was born before alices last day of school"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with last day on 2004 or earlier"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is the employee with the most job titles"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me all relationship statuses for employees whose start date is no later than 2004"}
{"canonical": "person that is friends with alice and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "natural": "any friend of alice that is logged in"}
{"canonical": "relationship status that is relationship status of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "find the relationship status of people born in 2004"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with one or two job titles"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of working people that dont work for mckinsey"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who ended last"}
{"canonical": "person whose birthdate is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "person who is older then alice"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the gender of employees starting before 2004"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find people with a height of 180 cm and their relationship status"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students start date is closest to alices birthday"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the longest employment"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose end date is the same as alices"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who have friends who left their jobs in or after 2004"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person who is friends with student that did not graduate in 2004"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who quit work in 2004 at the latest"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "who is 180 cm tall and is studying computer science"}
{"canonical": "person whose birthdate is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "persons born before start date of alice"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the same end date as alice"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee whose last day was before 2010"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who has a smaller end date than 2004"}
{"canonical": "gender that is gender of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student who was a smaller date then 2004"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on the same date as alice"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "who is alice friends with that is logged in"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has friends that are students and whos end date is 2004"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing when alice starts"}
{"canonical": "person that has less than two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "natural": "find me all people with less than two birthplaces"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee started their job on the same day as alice"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "a worker whose company isnt mckinsey"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after alice stopped school"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not before end date of student alice"}
{"canonical": "person whose birthplace is new york and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "natural": "which people were born in new york"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose start date is less than 2004"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who will have their last day before alice quits her job"}
{"canonical": "person whose height is at least height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "find people at least as tall as alice"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who started with alice"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the working people that do not work for mckinsey born"}
{"canonical": "student whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day before alices"}
{"canonical": "person that is friends with person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "people that have a friend born in 2004"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is after end date of student alice"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who didnt lose employment in 2004"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "city of birth for all non software engineers"}
{"canonical": "number of city", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))", "natural": "what is the number of the city"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "students who started before 2004 or 2010"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what employees have a start date later than 2004 and who are they friends with"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find a student who started no later than 2004"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who joined after  alice joined"}
{"canonical": "relationship status that is not relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "natural": "who has different relationship status to alice"}
{"canonical": "student whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish after alice"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student that ends before alice"}
{"canonical": "person that the least number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has the fewest friends"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people whom are friends with employees who have an end date that is not 2004"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who share the same job titles as alice"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of two people with the same status"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who left before alice started"}
{"canonical": "person whose birthdate is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "people who were born in 2004 or earlier"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with someone who didnt stop working in 2004"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with the largest number of employers"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student who graduated on alices birthdate"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with an end date after 2004"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started last"}
{"canonical": "gender that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "whats the gender of alice"}
{"canonical": "person that is friends with alice and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name a person that alice is friends with"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees not finishing in 2004"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student not taking computer science"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the gender of students who did not begin school in 2004"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started the day alice quit"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees who did not start in 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the people that started working in any year but 2004 born"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees started after 2004"}
{"canonical": "person that is friends with alice and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "natural": "what person that is online is friends with alice"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which company employees the person who is 180 cm tall"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is employees gender who started in 2004 or earlier"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "a friend of a single person"}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "who is 180 cm tall and has the same birthdate as alice"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit before alices birthday"}
{"canonical": "person whose birthplace is new york and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "natural": "males who were born in new york"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose end date is after 2004"}
{"canonical": "student that has less than two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with less than two universities"}
{"canonical": "relationship status that is relationship status of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what is the relationship status of alice and bob"}
{"canonical": "field of study of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "natural": "what did alice study at brown university"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "which people are 180 cm tall and have a birthdate of 2004"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with a person who didnt stop working in 2004"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "where are people born who are 180 cm in height"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the relationship status of employees with an end date earlier than 2004"}
{"canonical": "male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female))", "natural": "what is the gender"}
{"canonical": "person that is friends with alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "people that are friends with alice or bob"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "genders of employees who arent software engineers"}
{"canonical": "person that is friends with alice and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find single friends of alice"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is no greater than employee alice"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees whose last day was no later than 2004"}
{"canonical": "employee that has the least number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the fewest job titles"}
{"canonical": "person that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "shortest person"}
{"canonical": "person whose height is at most 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "people shorter than 200 cm"}
{"canonical": "person that has at most two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "natural": "person who has been in less then 3 relationships"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "find people who are 180 cm tall with last day in 2004"}
{"canonical": "university of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "natural": "is alice going to brown university"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "who are some of alices friends connections"}
{"canonical": "person whose relationship status is single and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "natural": "people who are single"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students born before 2004"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city is the birthplace of less than two people"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the job title of the person who is 180 cm tall"}
{"canonical": "person whose birthdate is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "natural": "find people with birth date not in 2004"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have larger end dates than alice"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what people are friends of employees that have a start date before 2004"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "find people who are 180 cm tall and logged in"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that are starting before alices last day"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which working people have less than two job titles"}
{"canonical": "person that has two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "natural": "find all people that have two genders"}
{"canonical": "person whose birthdate is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what people have the same birthdate as those whose height is 180 cm"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who joined before 2005"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "all 180 cm tall people who quit in 2004"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what gender is the student who started in 2004"}
{"canonical": "end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))", "natural": "which date did student alice left"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a person with a friend whos not a computer science major"}
{"canonical": "person that has at least two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "natural": "people with two or more birthplaces"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose end date is the same as the start date for student alice"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the students relationship status who didnt start in 2004"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who stopped school on or after the date alice started school"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting when or before alice ends"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has a start date on alices birthdate"}
{"canonical": "person that is logged in and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "natural": "find all people that are currently online"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee ended at least on alices birthdate"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who go to the same university as alice"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is no later than the end date of employee alice"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of no more than two people"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whos end date is equal to alices birthday"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were the people that stopped working before 2004 born"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with the employee who is not a software engineer"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees started on or before alices start date"}
{"canonical": "person that is friends with person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "find all people who is friend with people born in 2004"}
{"canonical": "birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))", "natural": "when was alice born"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have two or fewer job titles"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of employee who quit their job after 2004"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees started work after 2004"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "name the person with a height of 180 cm who is logged in"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "find employees called software engineers who are 180 cm tall"}
{"canonical": "person that is friends with student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friend of student whose end date is not after 2004"}
{"canonical": "gender that is gender of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "what is the gender of the single people"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who graduated before 2004"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school after alice stopped school"}
{"canonical": "relationship status that is relationship status of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people with a relationship status that more than two people have"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth places of employees other than software engineers"}
{"canonical": "person that at most two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people that have two or less friends"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of the students who are not studying computer science"}
{"canonical": "person whose height is not 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "natural": "who is not 180cm tall"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees starting in 2004 or later"}
{"canonical": "person that is logged in and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "presently logged in persons whose relationship status is single"}
{"canonical": "end date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "natural": "when did alice quit working for mckinsey"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "name the single persons friends"}
{"canonical": "city that is birthplace of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "find birthplace of males"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who goes to brown university or ucla"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed their studies before alice joined"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is no later than 2004"}
{"canonical": "person that is friends with more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people who are friends with no more than two people"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "find friends who are 180 cm tall like alice"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "show me all employees leaving before alices last day"}
{"canonical": "gender that is gender of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people of the least common gender"}
{"canonical": "person that has at most two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "natural": "find someone with two or less birthplaces"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who have friends who did not begin working in 2004"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is no earlier than the start date of alice"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the birthplace of a student starting before or during 2004"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "name a male who is friends with alice"}
{"canonical": "person that is friends with at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "person who has two or more friends"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work in or before 2004 or in or before 2010"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who started in 2004 or before"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birth city of a student who didnt start in 2004"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birth cities for students who have a start date no later than 2004"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "name a friend of the person who is 180 cm tall"}
{"canonical": "employee whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whom have a end date that is no later than the start date of employee alice"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who joined after 2004"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit before alice"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting before alice was born"}
{"canonical": "person whose birthplace is new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))", "natural": "who is born in new york or beijing"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of people attending any university but brown"}
{"canonical": "employee whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was the same day as alices graduation day"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "who has two different relationship statuses"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that started school in or before 2004 born"}
{"canonical": "employer of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "natural": "who did alice work for when she quit her job in 2004"}
{"canonical": "relationship status that is relationship status of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what relationship status is claimed by more than two people"}
{"canonical": "person whose height is at least height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "people who are at least as tall as alice"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of those two people"}
{"canonical": "person whose birthdate is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "natural": "find people with birth date same as employment end date of alice"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who quit their jobs after 2004"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started after alice"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a friend of a noncomputer science student"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who has friends who are 180 cm tall"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is relationship status of students starting in 2004 and after"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "find me all the people that are 180 cm tall and were born in the same place as alice"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "which city were alices friends born in"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with students that have an end date of 2004"}
{"canonical": "city that is not birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))", "natural": "where was alice not born"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started after 2004"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students started after or at the same time as alice"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students ending date is greater than 2010"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee left the day alice started"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "alices friend born in new york"}
{"canonical": "student whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students started between 2004 and 2010"}
{"canonical": "person that is logged in and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "natural": "what person is online"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student left first"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were people that started work before 2004 born"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what gender are people that started school in or after 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the the relationship status of the employee who started in 2004"}
{"canonical": "person that two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has two friends"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students starting in or after 2004"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students who are not studying at brown university"}
{"canonical": "person whose gender is male and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "people who are friends with alice and male"}
{"canonical": "city that is birthplace of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were most people born"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the same job title as alice"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose job title is not software engineer"}
{"canonical": "job title of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "natural": "what was alices job title while working for mckinsey"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose last day is the same or later than alices"}
{"canonical": "end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))", "natural": "what is alices termination date"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were less than two people born in"}
{"canonical": "job title of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what job did alice leave in 2004"}
{"canonical": "person whose birthdate is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "person with same birthdate of person with 180 cm height"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends who are not in computer science"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what people are friends with students who have a start date no later than 2004"}
{"canonical": "person whose height is at least height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "person alices height or taller"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which worker left on or before the day student alice started"}
{"canonical": "person whose birthdate is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "who is born on or after start date of employee alice"}
{"canonical": "city that is birthplace of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "birth city of no more than two people"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find all people with relationship status that is the same as the person that is 180 cm tall"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish when alice starts"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "one student who started on the same day as employee alice"}
{"canonical": "person whose height is 180 cm and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "natural": "find me all people who are 180 cm tall and currently online"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is the friend of the employee whose start date is at least 2005"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the employees relationship status who did not end in 2004"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees are not employed by mckinsey"}
{"canonical": "2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))", "natural": "either 2004 or 2010"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees that have the greatest amount of employers"}
{"canonical": "person that less than two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people who have less than two friends"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed studies with or before alice"}
{"canonical": "person that employee whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name a friend of the employee who started working no later than 2004"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started after alice was born"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with the latest starting date"}
{"canonical": "person whose birthdate is 2004 and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "natural": "person born in new york in 2004"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "who is a software engineer that is 180 cm"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "people who arent alices friend"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated before alice was born"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student began before student alice did"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "person that has an employee friend who starts to work by 2004"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender is the employee whose end date is not 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of an employee who has worked since 2004"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "who is alice friends with who is 180 cm tall"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who completed their studies after 2003"}
{"canonical": "student whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me the student who started on the same day as alices departure"}
{"canonical": "city that is birthplace of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "city that most number of persons born"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose field of study is not computer science"}
{"canonical": "person whose birthplace is new york and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "natural": "find me all people that were born in new york that are currently online"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that started working after 2004"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who are the students studying computer science or history"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who graduated before alice started her job"}
{"canonical": "person that less than two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find a person with less than two friends"}
{"canonical": "number of company", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type))))", "natural": "how many companies are there"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who are the employees who quit before 2004"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of students that did not study computer science"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "people who are friends of bob or alice"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school when alice was born or before"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of people studying something other than computer science"}
{"canonical": "employee whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was in 2004 or 2010"}
{"canonical": "city that is birthplace of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplaces of employees not finishing in 2004"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice stopped school or after"}
{"canonical": "relationship status that is relationship status of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what are the relationship statuses of people born in new york"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who finishes before alice"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people that are friends with employees whose start date is later than 2004"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "who is friends with alice and is 180 cm tall"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students with a start date that is not the same as 2004"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with one employer"}
{"canonical": "end date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "natural": "alice whose field of study is computer science ended on what date"}
{"canonical": "gender that is gender of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of an employee that ends during or before 2004"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a job title other than software engineer"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have an end date the same as alice"}
{"canonical": "relationship status that is relationship status of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status of at least two people"}
{"canonical": "person whose birthdate is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "natural": "what person was born on the last day of alices employment"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who started in or after 2004"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before alice did"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students who graduate after 2004"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who quit at the same time or after alice did"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what is the gender of alices friend"}
{"canonical": "person whose birthplace is new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))", "natural": "find people born in new york or beijing"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student whose end date is before 2004"}
{"canonical": "university of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "natural": "what university will alice finish in 2004"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "alices friend who is 180 cm tall"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who started working before alice quit her job"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated after alices first work day"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is relationship status of students with end dates other than 2004"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose start date is after 2004"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not after start date of employee alice"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student hast the earliest start date"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplaces of people who studied in fields other than computer science"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birth city of students whose end date is less than 2004"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find birthplaces of students not attending brown university"}
{"canonical": "person whose birthdate is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))", "natural": "people who are born the same day alice started her job"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of the employee who left after 2004"}
{"canonical": "person that two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with only two friends"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find the student who graduated on alices birthday"}
{"canonical": "person that is friends with person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "any friend of anyone born in new york"}
{"canonical": "start date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "natural": "when did alice start working for mckinsey"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship statuses of students that dont go to brown university"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "how many employees share alices job title"}
{"canonical": "person whose birthdate is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))", "natural": "who was born on alices first day of school"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students with start dates other than 2004"}
{"canonical": "person that is friends with person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what person is friends with the person logged in"}
{"canonical": "person whose birthplace is not new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "natural": "what person was not born in new york"}
{"canonical": "person whose relationship status is single or married", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married)))", "natural": "find everyone who is either single or married"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find people who have a birthplace of new york and their friends"}
{"canonical": "person whose gender is male and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who are alices male friends"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with smallest job history"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who has maximum 2 job titles"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who quit before 2004"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school when alice stopped working or after"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an employer that is either mckinsey or google"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was not n 2004"}
{"canonical": "person that is friends with alice and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "who is alice friend born in new york"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined their studies after alice quit her job"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started earliest"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "people who are 180 cm tall and left their job in 2004"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not before start date of student alice"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student does not attend brown university"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended no greater than alices"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending before alice was born"}
{"canonical": "person whose height is at most 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "what person is 200 cm or shorter"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have a start date equal to student alices end date"}
{"canonical": "number of field", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))", "natural": "either number of field"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students who start before 2004"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of all students who started earlier than 2004"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who are software engineers or program managers"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school after alice stopped working"}
{"canonical": "employer of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "natural": "who employees alice as a software engineer"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students that have the latest start date"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have a start date the same as employee alice"}
{"canonical": "relationship status that is relationship status of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "relationship status of alices friends"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school the day alice started working"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee who began later than 2004"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date later than the end date of alice"}
{"canonical": "person that is friends with student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students not attending brown university"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplaces of people joined studies before 2004"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee started on or after alices birthdate"}
{"canonical": "employee whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after alice"}
{"canonical": "start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))", "natural": "when did alice start her job"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employees whose last day was before 2004"}
{"canonical": "person that is friends with person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "who is friends with someone whos birthdate is 2004"}
{"canonical": "student whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing with alice"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting in or after 2004"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose university is either brown university or ucla"}
{"canonical": "gender that is gender of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who is the same gender as the 180 cm person"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting on alices birthday"}
{"canonical": "new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing))", "natural": "either new york or beijing"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have an end date earlier than employee alices start date"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "name a person who is 180 cm tall the same height as alice"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is the employee"}
{"canonical": "job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "natural": "what is alices job title"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice stopped working or after"}
{"canonical": "city that is not birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))", "natural": "cities that alice was not born in"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees left when alice started"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who was born in the same place as the 180 cm tall person"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have start dates greater than those of the end date of student alice"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "connections from friends who dont work at mckinsey"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who went to school but did not start in 2004"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee who joined before 2005"}
{"canonical": "relationship status that is relationship status of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "whose relationship status is not a unique"}
{"canonical": "number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type))))", "natural": "how many relationship status options are there"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "180 cm tall people worked at mckinsey"}
{"canonical": "job title of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "natural": "what is the job title of alice who works for mckinsey"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find friends of people born in new york"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending before or during 2004"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting in 2004 or 2010"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees who did not start in 2004"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "friends of people with 180 cm height"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is birthplace of employees starting in 2004 and after"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have the least amount of employers"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the birthplace of someone not employed by mckinsey"}
{"canonical": "gender that is gender of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people of the most numerous gender"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who joined before alice quit the job"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has friends whos end date is before 2004"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started before alices last day"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "software engineers whose height is 180cm"}
{"canonical": "person whose gender is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the gender of people 180 cm tall"}
{"canonical": "person whose height is smaller than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "persons whose height is 180 cm or more"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplaces of employees who started working in 2004 or earlier"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "which of my friends connections are online now"}
{"canonical": "person that is friends with alice and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find all people who have alices as a mutual friend"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees that started before 2004"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name a person that is friends with an employee who started no later than 2004"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is after student alices start date"}
{"canonical": "relationship status that is relationship status of at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which relationship status is claimed by at least two people"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended between 2004 and 2010"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has no more than two employers"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice did"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees not starting in 2004"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school at the same time as alice"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started at the same time the employee alice did"}
{"canonical": "city that is birthplace of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "what cities were the males in my social network born in"}
{"canonical": "employee whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who joined their job after alice joined her study"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with a person who graduated before 2004"}
{"canonical": "city that is birthplace of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city was two people born in"}
{"canonical": "person whose relationship status is single and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "natural": "who is single from new york"}
{"canonical": "person whose birthdate is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "who is younger than alice"}
{"canonical": "person whose birthdate is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "people who were born on or after alices first day of work"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people who are friends with empoyees whose last day was not in 2004"}
{"canonical": "student that has less than two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student of only one university"}
{"canonical": "start date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "when did alice start the job that she quit in 2004"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice started school or after"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after start date of employee alice"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started after alice graduated"}
{"canonical": "gender that is gender of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the genders of employees who started after 2004"}
{"canonical": "person that is friends with person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "people who have single friends"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students field of study is computer science of history"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what relationship status do two people share"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the gender of a worker who didnt start in 2004"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is gender of students with last day in 2004 or later"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "find people with a height of 180 cm and micknsey as their employer"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employee whose start date is at most 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of studetns who started after 2004"}
{"canonical": "person whose birthdate is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "people who were born on or after the day alice quit her job"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "one worker who began in 2004 or before"}
{"canonical": "person that has more than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "natural": "what people have more than two relationship status"}
{"canonical": "student whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after alice stopped working"}
{"canonical": "university of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "natural": "which university did alice study computer science at"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that finished school at the same time as or before alice did"}
{"canonical": "person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice))", "natural": "who is alices friend"}
{"canonical": "person whose height is at most height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "people that are the same height as or shorter than alice"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finished by the time alice finished"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is after 2004"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are the birth cities of students with a start date before 2004"}
{"canonical": "software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))", "natural": "find me a program manager or a software engineer"}
{"canonical": "person that has the least number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string gender)))", "natural": "find the people with the only one gender"}
{"canonical": "person that student whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a friend of a student who started at least 2004"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with one field of study"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "friends of all the people born in 2004"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with an employee who does not work for mckinsey"}
{"canonical": "person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people born in 2004"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finished school by 2004"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has less than two previous job titles"}
{"canonical": "person whose relationship status is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))", "natural": "people with the same relationship status as alice"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what people are friends with employees who have an end date later than 2004"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on or after alices birthdate"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the relationship status of a person whose height is 180 cm"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who started in 2004 or in 2010"}
{"canonical": "person whose birthdate is 2004 and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people that were born in 2004"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me employees who were no longer employed after alices start date"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "show me which cities the people starting before or after 2004 were born in"}
{"canonical": "person that is friends with student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with a student who started"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students not starting in 2004"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name the students of brown university "}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "find people who share the same birthday as alice and are 180 cm tall"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student had an end date that is later than the birthdate of alice"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before 2004"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after alice started working"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of a student whom has the end date not equal to 2004"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has fewer than two job titles"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit before alice was hired"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friends not employed at mckinsey"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students go to the same university as student alice"}
{"canonical": "person that has the most number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string relationship_status)))", "natural": "what person hast the most number of relationship statuses"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city is the students birthplace who ended at least in 2004"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date other than 2004"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting after alice was born"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit their job on the same day alice started her job"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee is not the software engineer"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "a friend of someone who started before 2004"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what sex are the students who ended from 2004 on"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice stopped school"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date that is the same as alice"}
{"canonical": "relationship status that is relationship status of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees whose start date is before 2004"}
{"canonical": "person that the most number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people that have the most friends"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what gender are the people that finished school in or before 2004"}
{"canonical": "end date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "natural": "when did alice graduate from brown university"}
{"canonical": "city that is birthplace of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of the student who started in 2004"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with an end date that is less than alices birthday"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "person that has the most job titles"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who started before start date of employee alice"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find friends of people who were born in new york"}
{"canonical": "gender that is gender of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find the gender that more than two people share"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is no earlier than the end date of alice"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started on alices birthdate"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students who strated before alice"}
{"canonical": "employee whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has a start date that is no earlier than the birthdate of alice"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students finished after 2004"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what gender is the student whose end date is 2004 or later"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who started working before 2004"}
{"canonical": "relationship status that is relationship status of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "anyone has similar relationship as of anyone logged in"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is studying less than two things"}
{"canonical": "start date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "when did alice start being an employee"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "which people have more than two genders"}
{"canonical": "person that is friends with alice and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "name a person who is 180 cm who is friends with alice"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no earlier than alices last day of work"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose field of study is either computer science or history"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that finished school after 2004"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee who left on or before the day student alice started"}
{"canonical": "relationship status that is not relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "natural": "what relationship statuses are not claimed by alice"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "people who were born in 2004 and are 180 cm tall"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee ending after alice ends"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "find me one of alices male friends"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee from at least 2004"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship of the student who did not attend brown university"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who are the friends of those not employed by mckinsey"}
{"canonical": "person that employee whose start date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "fine me friends of people who joined their jobs after 2003"}
{"canonical": "city that is birthplace of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees starting in or before 2004"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee whose start date is at least 2004"}
{"canonical": "employer of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "natural": "who did alice quit working for in 2004"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last days before alices first day"}
{"canonical": "person whose relationship status is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))", "natural": "who has same relationship status as that of alice"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "who is 180 cm tall and has an end date of 2004"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee whose job title is not software engineer"}
{"canonical": "relationship status that is not relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "natural": "find me all people who are not in a relationship with alice"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that have a friend that started school in a year other than 2004"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "find everyone born in new york who is 180 cm"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the employee that was hired closest to the date alice was hired"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employees who started in 2004 or after"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students go to the same university as alice"}
{"canonical": "employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started after 2004"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "who studying computer science is 180 cm tall"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is the birthplace of students not majoring in computer science"}
{"canonical": "software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))", "natural": "people who are software engineers or project managers"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who stopped working after 2004"}
{"canonical": "student whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after alice was born"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees quit after 2004 or after 2010"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of the student who started in 2004 or earlier"}
{"canonical": "student whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find the people who joined their studies before alice was born"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started school the earliest"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who started before the student named alice"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending before 2004"}
{"canonical": "person whose gender is not male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "natural": "people that are not male"}
{"canonical": "person whose birthdate is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "what person is younger than alice"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who was a smaller start date than alice"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is the largest"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who starts at least before alice finishes"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not before start date of employee alice"}
{"canonical": "start date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "natural": "find the date that alice started studying computer science"}
{"canonical": "person that student whose field of study is not computer science is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who studied the fields other than computer science"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "who was born in 2004 and is friends with alice"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is same as that of student alice"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "what person is 180 cm tall and is alices friend"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employee without title of software engineer"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "what people have a birthdate that is 2004 and whose height is 180 cm"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has a relationship that started after 2004"}
{"canonical": "employee whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working in 2004 or 2010"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who quit their jobs before 2004"}
{"canonical": "person that student whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who completed their studies before 2004"}
{"canonical": "person whose birthdate is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "what person has a birthdate between 2004 and 2010"}
{"canonical": "180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))", "natural": "find people with height either 180 or 200 cm"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "working people that did not start in 2004"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school after 2004 or after 2010"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of the student not in computer science"}
{"canonical": "person whose height is smaller than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "people shorter than 180 cm"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "find me 2 people in a relationship"}
{"canonical": "person whose birthdate is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "person whos birthday is before alice graduates"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started school when alice quit her job"}
{"canonical": "person that has less than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "natural": "person who hasnt been in 3 relationships"}
{"canonical": "gender that is gender of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "find people of the same gender as the person logged in"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "people who are single and friends with alice"}
{"canonical": "person that has the smallest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "who is the oldest person in my network"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "what people have a birthplace of new york and a height of 180 cm"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing contemporaneous to or after alice"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of students finishing after 2004"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "find people 180 cm tall who were born in new york"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students with the fewest fields of study"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "which friend of alice is online"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose fields of study are smallest"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that ended school on the day alice was born"}
{"canonical": "person whose relationship status is single and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find friends of alice that are single"}
{"canonical": "employee whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit before alice was born"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student not ending in 2004"}
{"canonical": "person that is friends with student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me friends of the student that is is leaving before 2004"}
{"canonical": "person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "anyone who is alices friend"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with start dates after 2004"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice stopped"}
{"canonical": "person that is friends with person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "people who have friends that were born in new york"}
{"canonical": "end date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "natural": "when did alice quit job at mckinsey"}
{"canonical": "birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace)))", "natural": "alices birthplace"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find all friends that are not software engineers"}
{"canonical": "job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "natural": "what is the job title of alice"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees who did not start in 2004"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of students not attending brown university"}
{"canonical": "person whose birthdate is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people that were born before alice started school"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date earlier than the end date of the employee alice"}
{"canonical": "person whose height is 180 cm and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "natural": "name a person 180 cm tall who is friends with alice"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of an employee whose end date is earlier than 2004"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student with most number of field of studies"}
{"canonical": "person that has at least two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "natural": "person with minimum two relationship statuses"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "name a person 180 cm tall who quit in 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employee whose start date is not 2004"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "people with two birthplaces"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students end date happends the same time as  alice"}
{"canonical": "person whose gender is male and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find males that are single"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has no more than two job titles"}
{"canonical": "employee that has at most two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have no more than 2 job titles"}
{"canonical": "person that is friends with person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "people that are friends with someone that is single"}
{"canonical": "relationship status that is relationship status of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who started after 2004"}
{"canonical": "person that has less than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "natural": "single gendered people"}
{"canonical": "city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "where was alice born"}
{"canonical": "gender that is gender of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "find people with the same gender as alice or bob"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of students whose field of study is not computer science "}
{"canonical": "person that is logged in and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "natural": "find me all of alices friends who are currently online"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that have a friend that started school in or after 2004"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit in 2003 or earlier"}
{"canonical": "person that is friends with person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what person is friends with the online person"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who start on alices birthday"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the birthplace of a person whose height is 180 cm"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees who started no later than 2004"}
{"canonical": "person whose height is at most height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "find people who are not bigger than alice in height"}
{"canonical": "person that is friends with person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "a friend of alices friend"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name a friend of a student who did not study at brown university"}
{"canonical": "person that has the least number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "natural": "who has the least number of relationship statuses"}
{"canonical": "employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is minimum 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status for students with a start date not equal to 2004"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students who finish contemporaneous to or before 2004"}
{"canonical": "student whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date that is at least either 2004 or 2010"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who did not graduate in 2004"}
{"canonical": "city that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "where was alice born"}
{"canonical": "person that is friends with student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that stopped school after 2004"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who start after alice"}
{"canonical": "city that is birthplace of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose start date is after 2004"}
{"canonical": "student that has the least number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has attended the fewest universities"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "relationship status of 180 cm tall person"}
{"canonical": "person that has the smallest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "find the shortest person"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employees with last day in 2004 or before"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find people that are friends with employees who have an end date no later than 2004"}
{"canonical": "person whose birthdate is 2004 and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "natural": "people who were born in 2004 and born in new york"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who quit theri job before 2004 or 2010"}
{"canonical": "gender that is gender of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "gender of persons who are 180 cm tall"}
{"canonical": "student whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have end date names that are either 2004 or 2010"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee started the same day as alice"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of the student starting on or before 2004"}
{"canonical": "person whose birthdate is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "what person has a birthdate with at most that of alices"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees working for the most employers"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit the same day as alice"}
{"canonical": "person whose relationship status is single and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who is single and born in 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with start dates other than 2004"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school after alice was born"}
{"canonical": "person that is friends with person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "anyone friend of a male"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no earlier than 2004"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who strated in or after 2004"}
{"canonical": "job title of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "natural": "what is the job title of alice whose employer is mckinsey"}
{"canonical": "gender that is gender of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find the gender of people born in new york"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "find me friends of people logged in"}
{"canonical": "person that is friends with person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "friends of people that are currently online"}
{"canonical": "university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "natural": "what university did alice attend"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which persons are friends with employees that started before 2004"}
{"canonical": "person whose height is not 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "natural": "what person doesnt have the height of 180 cm"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee who started in 2004 or later"}
{"canonical": "person that has at least two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "natural": "find people that have at least two birthplaces"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee with largest start date"}
{"canonical": "person whose height is at most height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "find someone who is as tall or shorter than alice"}
{"canonical": "person whose height is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height))))", "natural": "people that are the same height as alice"}
{"canonical": "person that the least number of person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find me the person with the least friends"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is born in new york and friends with alice"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting before or on same day as alice"}
{"canonical": "person that has at most two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "natural": "what person has two genders"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is before start date of student alice"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee had a start date as early as or later than alice"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who are starting before alices last day"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the relationship status of the person who is 180 cm tall"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with the employee that will be leaving by 2004"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school before alices birthdate"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started in 2004 or 2010"}
{"canonical": "person whose birthdate is 2004 and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "natural": "find males born in 2004"}
{"canonical": "person that employee whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with employees whos end date is larger than 2004"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not before 2004"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before end date of employee alice"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whom have the earliest end date"}
{"canonical": "employee whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started no sooner than 2004 or 2010"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started earlier than 2004"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "find people who are friends with alice or bob"}
{"canonical": "relationship status that is relationship status of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student whose start date is after 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of all students who started after 2004"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "alices friends who are 180 cm tall"}
{"canonical": "person whose birthdate is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "people who were born after alice started working"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started employment before alice"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student whose start date is not in 2004"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "people who are 180 cm tall before 2004"}
{"canonical": "person that has the largest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "who was born most recently"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before alice started school"}
{"canonical": "person whose birthplace is new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))", "natural": "people born in new york or beijing"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before alice was born"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friend with start date after 2004"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "working people that are not software engineers"}
{"canonical": "employee whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee finished the same time alice started"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the friends of employees with an end date no later than 2004"}
{"canonical": "person whose relationship status is single and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "natural": "find me all the online singles"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that stopped working in or before 2004"}
{"canonical": "employee whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whose last day is after student alices first day"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the relationship statues of a student ending in 2004"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where is the birthplace of the student who left school before 2004"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of students starting after 2004"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the gender of a student starting before 2004"}
{"canonical": "person whose birthdate is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people born on or before the day alice started school"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who are not studying computer science"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of a student with an end date later than 2004"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with the new emplyee starting before2994"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started after alice stopped going to school"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship statuses of employees who started working in or before 2004"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with an end date earlier than that of employee alice"}
{"canonical": "end date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "when did alice leave in 2004"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the city of birth for all employees that quit in 2004"}
{"canonical": "end date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "alice started her job in 2004 when did she leave it"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace cities of students who started before 2004"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "180 cm tall person with birthdate in 2004"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school on the same day alice started working"}
{"canonical": "person that at least two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people with at least two friends"}
{"canonical": "person whose relationship status is not single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "natural": "people that are not single"}
{"canonical": "city that is birthplace of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "name cities when shared with more than two persons as their birthplace"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have jobs whose title is the same as employee alice"}
{"canonical": "gender that is gender of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "what genders are alices friends"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with people who dont work for mckinsey"}
{"canonical": "person whose birthplace is new york and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find me everyone born in new york who is single"}
{"canonical": "employee whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit on alices birthdate"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date before alices birthday"}
{"canonical": "person whose birthdate is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "what persons birthdate is at most the same as alices start date"}
{"canonical": "relationship status that is relationship status of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the relationship statuses of employees that do not work at mckinsey"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of employees who have an end date no later than 2004"}
{"canonical": "person whose height is 180 cm and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "natural": "find males who are 180 cm tall"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which people are friends with employees who did not start in 2004"}
{"canonical": "person that is friends with student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find students friends who ended in 2004 or before"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees has the largest amount of job titles"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice stopped working"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which students am i friends with who didnt start in 2004"}
{"canonical": "person that is logged in and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "natural": "any male who has logged in"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with job title not software engineer"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find all the students that started in 2004 and after"}
{"canonical": "student whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date  is before alices"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate no later than alices first day of work"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which university did people who are 180 cm tall attend"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "a friend of someone 180 cm tall"}
{"canonical": "start date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "natural": "find the date that alice started her software engineer job"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit after 2004"}
{"canonical": "student whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who graduated before alice started work"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending in 2004 or 2010"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is the friend of the employee who employment end date is at least 2004"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find all  friends with student with end date other than 2004"}
{"canonical": "height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))", "natural": "how tall is alice"}
{"canonical": "employee whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who has a smaller date than 2004 and 2010"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice started school"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the employees that were hired before alice quit her job"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a person whose friend started on or before 2004"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started after alices last day at the job"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "who is 180 cm tall working at mckinsey"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "person who is 180 cm tall with computer science as field of study"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of people that stopped school in or after 2004"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student graduated after alice graduated"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting before 2010"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find birthplaces of employees who started before 2004"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice started work or after"}
{"canonical": "relationship status that is relationship status of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that started working before 2004"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee started after employee alice did"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "which employee of mckinsey is 180 cm tall"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students finishing on or after 2004"}
{"canonical": "start date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "natural": "what is alices first day as a software engineer"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who start after alice leaves"}
{"canonical": "person whose height is larger than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "find a person who is taller than 180 cm"}
{"canonical": "person that is friends with at least two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has minimum two friends"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who are studying the same field as alice"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who are not part of brown university"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find relationship statuses for employees who dont have an end date of 2004"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the gender of employees who have an end date that is not 2004"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice started working"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date that is greater than or equal to student alice"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with an end date that is equal to or greater than the birthdate of alice"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "find people who have more than two genders"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ending date is earlier than 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birth city of a worker who didnt start in 2004"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school when alice was born"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people with friends who did not start work in 2004"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working in 2004 or before"}
{"canonical": "city that is birthplace of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "which cities were alices friends born in"}
{"canonical": "person that is logged in and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find all people that are single and currently online"}
{"canonical": "student whose end date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish before alices birthday"}
{"canonical": "city that is birthplace of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what city was alice or bob born in"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with an employee that started later than 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where are all employees born who are not employed by mckinsey"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school when alice was born or after"}
{"canonical": "birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))", "natural": "what is alices birthdate"}
{"canonical": "person whose relationship status is single and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "single people born in 2004"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees who didnt start in 2004"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after end date of student alice"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting on or before alices last day"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "which computer science students are 180 cm tall"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is studying something other than computer science"}
{"canonical": "number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))", "natural": "how many males or females are there"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is the friend of an employee whose end date is before 2004"}
{"canonical": "person that is logged in and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "natural": "what person is logged in and was born in new york"}
{"canonical": "person that person that is logged in is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "who is friends with the online person"}
{"canonical": "job title of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what job did alice start in 2004"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting before 2004"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with employees who have an end date that is not 2004"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "friends of male people"}
{"canonical": "gender that is gender of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the gender of one or two individuals"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the employee that was hired closest to the day alice quit her job"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the genders of students whom have start dates earlier than 2004"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people who are friend with students that have an end date not of 2004"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the relationship status for people with a height of 180 cm"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day after 2004"}
{"canonical": "gender that is gender of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which gender had more employees start after 2004"}
{"canonical": "end date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "natural": "when did student of computer science alice finish"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is the same of later than student alice"}
{"canonical": "person whose relationship status is single and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "natural": "who is single male"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started no later than the day alice started school"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting on or after alices first day"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school at the same time or before alice did"}
{"canonical": "person whose height is smaller than height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "people shorter than alice"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "a worker who began on or before the day student alice started"}
{"canonical": "person whose gender is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender))))", "natural": "what person has the same gender as alice"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is the start date of employee alice or later"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "who works at mckinsey and is 180 cm tall"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended no later than alices start date"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined their study with or after alice"}
{"canonical": "student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student not studying at brown"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started before 2004"}
{"canonical": "relationship status that is relationship status of person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "alices friends relationship status"}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working after alice was born"}
{"canonical": "relationship status that is relationship status of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the relationship statuses of employees whose start date is earlier than 2004"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending before alice starts"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students last day was the around the same day as alices last day"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees started on alices birthday"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees starting in or after 2004"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who are the friends of employees who did not quit in 2004"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of the employee who ended working before 2004"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who started working on alices birthdate"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees had an end date before alice started school"}
{"canonical": "person whose gender is gender that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice)))", "natural": "people whose gender is same as alice"}
{"canonical": "person whose birthdate is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people who were born after alice started school"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students whose end date is before 2004"}
{"canonical": "person whose birthdate is 2004 and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "natural": "what person is logged in and has a birthdate in 2004"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student whose last day is before or the same day as alices first day"}
{"canonical": "employee whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who start after alice"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which cities were people 180 cm tall born in"}
{"canonical": "student whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day is on or after alices last day"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees finishing before 2004"}
{"canonical": "person whose relationship status is single and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "natural": "people that are currently online that are single"}
{"canonical": "person whose birthdate is 2004 and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "natural": "find me a person born in 2004 in new york"}
{"canonical": "person whose birthdate is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))", "natural": "who was born on alices start date"}
{"canonical": "employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day in 2004 or before"}
{"canonical": "employee whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started working the same day alice was born"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started later than 2004"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school before 2004 or before 2010"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "what is the birthdate of the person with a height of 180 cm"}
{"canonical": "employee whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees starting on or after alice finishes"}
{"canonical": "person that is friends with person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "a mutual friend of alice"}
{"canonical": "person whose birthdate is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "persons born in or before 2004"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who has friends with an end date that is before 2004"}
{"canonical": "person that is friends with at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with two or less friends"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who first joined his study"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth  city of student whose end date is not 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the birth cities of employees who are not employed by mickinsey"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the relationship statuses of people who quit their job in or after 2004"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who enrolled on or after the date on which alice completed her studies"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth places of employees who quit in 2004 or before"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended after 2004"}
{"canonical": "computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))", "natural": "history or computer science"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees finishing contemporaneous to or after 2004"}
{"canonical": "person whose relationship status is single and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is alice friends with that is single"}
{"canonical": "gender that is gender of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "genders of people that are currently online"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students not finishing in 2004"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "people who are 180 cm tall and in a relationship with ailce"}
{"canonical": "person whose relationship status is single and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "natural": "single people who was born in new york"}
{"canonical": "person that alice is friends with and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find people who are friends with alice"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined their study before alice completed"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started on alices birthday"}
{"canonical": "city that is birthplace of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "in what cities were students who started before or in 2004 born"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work when alice started school  or before"}
{"canonical": "city that is birthplace of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "most popular birthplace"}
{"canonical": "person that employee whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employees with 2004 end dates or later"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find all the employees that had no more than two jobs"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have been here less time then alice"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the same boss as alice"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have fewer than 2 majors"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school on or before the day alice stopped working"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth place of people who completed education after 2004"}
{"canonical": "person that is friends with student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what person has a friend who is a student at a university other than brown university"}
{"canonical": "gender that is gender of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "which genders are alice and bob"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date earlier than 2004"}
{"canonical": "person whose height is 180 cm and that is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))", "natural": "find people with alices birthday who are 180 cm tall"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with the new employee that will be starting before before or after 2004"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee is leaving the company on the same date that alice starts her job"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is end date of student alice"}
{"canonical": "employee whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is either 2004 or 2010"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "in what city was the 180cm tall person born"}
{"canonical": "number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type))))", "natural": "number of jobs held"}
{"canonical": "student whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose start date is smaller than 2004 and 2010"}
{"canonical": "birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace)))", "natural": "place where alice was born"}
{"canonical": "person whose height is at least height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "find me everyone at least as tall as alice"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what is the end date of employee alice"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students completed school by the time alice began"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who have a start date smaller than that of the end date for employee alice"}
{"canonical": "male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female))", "natural": "is this person male or female"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started at or before 2004"}
{"canonical": "student that has the least number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who studied at the least number of universities"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started on alices last day"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people born in 2004 and who are 180 cm tall"}
{"canonical": "employee whose job title is software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees are either software engineers or program managers"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find relationship statuses for students who have an end date that is not 2004"}
{"canonical": "student whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who leave after alices birthday"}
{"canonical": "start date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "what day did alice start her job in 2004"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started school latest"}
{"canonical": "person whose gender is male and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find people with a gender of male whom alice is friends with"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people studying anything but computer science"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status of only one person"}
{"canonical": "person that is friends with student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with those who completed studies before 2004"}
{"canonical": "brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))", "natural": "either brown university or ucla"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "find the person that is 180 cm tall and is a software engineer"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started after alice"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people with friends who have jobs but not software engineers"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was no earlier than alices first day"}
{"canonical": "person whose height is at most 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "who is shorter than 181cm"}
{"canonical": "gender that is gender of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "find the gender of people who are single"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name a student who will graduate no later than alice"}
{"canonical": "student that has the least number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students that have the fewest universities"}
{"canonical": "person whose birthdate is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "what people have birthdates between 2004 and 2010"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "name a person born in 2004 who is 180 cm tall"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date no later than that of student alice"}
{"canonical": "relationship status that is relationship status of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the most common relationship status"}
{"canonical": "gender that is gender of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees starting before 2004"}
{"canonical": "person whose relationship status is single and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which of alices friend is single"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that are friends with someone that started working after 2004"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who started before 2004"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee starting after alice ends"}
{"canonical": "person that person whose height is 180 cm is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find people with a height of 180 cm and their friends"}
{"canonical": "person that student whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people who are students with a start date later than 2004 and their friends"}
{"canonical": "student whose field of study is computer science or history", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have their field of study in computer science of history"}
{"canonical": "student whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish before or contemporaneous to alices start"}
{"canonical": "employee whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is one worker who left on or before the day employee alice left"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find people who have a birthplace the same as those with a height of 180 cm"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "who is alices single friend"}
{"canonical": "person that has at least two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "natural": "who has two or more relationship status"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of the student that befins after 2004"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employer with at least two employees"}
{"canonical": "student whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student began on the same day as student alice"}
{"canonical": "field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "natural": "what was alices field of study"}
{"canonical": "student that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has the earliest start date"}
{"canonical": "relationship status that is relationship status of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the realtionship status of employees who are not employed by mickinsey"}
{"canonical": "student whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student quit at the same time the employee alice did"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the friends of people who joined their studies before 2004"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with fewer than two employers"}
{"canonical": "person whose birthplace is new york and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "persons born in new york in 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birthplace cities of employees whom have a start date not equal to 2004"}
{"canonical": "number of field", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))", "natural": "how many students in this field"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after alice was hired"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people not studying computer science"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who has the same job as alice"}
{"canonical": "field of study of student alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "natural": "field of study of alice ended in 2004"}
{"canonical": "start date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "natural": "which date did computer science student alice start"}
{"canonical": "employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee that isnt a software engineer"}
{"canonical": "gender that is gender of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender is claimed by more than two people"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who did not start in 2004"}
{"canonical": "person that is friends with alice and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "who is the friend of alice"}
{"canonical": "person whose gender is not male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "natural": "find people who are not male"}
{"canonical": "company that is employer of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what companies employ people with a height of 180 cm"}
{"canonical": "person whose relationship status is single and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people who are single and born in 2004"}
{"canonical": "person whose relationship status is single and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "natural": "who is logged in as well as logged in"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who didnt start working in 2004"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting on or after 2004"}
{"canonical": "gender that is gender of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find people with a gender that less than two people have"}
{"canonical": "person whose height is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "people that are 180 cm tall"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person who last joined the study"}
{"canonical": "person whose relationship status is single and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "natural": "find people who have a height of 180 cm and a relationship status of single"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students not at brown"}
{"canonical": "person whose relationship status is single and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "natural": "find males who are single"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after end date of employee alice"}
{"canonical": "person that alice is friends with and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "natural": "who is a friend exclusively to alice"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school on or after alices birthdate"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who quit their job in 2005 or later"}
{"canonical": "person whose birthplace is new york and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "natural": "any male who is born in new york"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended in 2004 or later"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the relationship status of students whose university is not that of brown"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employees who didnt start in 2004"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working before alice started working"}
{"canonical": "person that alice is friends with and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "natural": "find friends of alice that are 180 cm tall"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me an employee whose end date is later than the end date of student alice"}
{"canonical": "person whose birthplace is new york and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find alices friends who were born in new york"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started in years other than 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people who stopped working in 2004 or later"}
{"canonical": "person whose birthdate is 2004 and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "alices friends who were born in 2004"}
{"canonical": "person whose height is at least 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "who is 180cm or higher"}
{"canonical": "job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))", "natural": "what is alices job title"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose first day is after alices birthday"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who are the students starting at the same time or before alice starts"}
{"canonical": "employee whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting in 2010 or earlier"}
{"canonical": "person that less than two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which people have less than two friends"}
{"canonical": "employee whose job title is job title of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee with same job title as alices"}
{"canonical": "person whose birthdate is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "natural": "people born in 2004 or 2010"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who ended school in 2003 or earlier"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student with two or less universities"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students whose end date is either greater than 2004 or 2010"}
{"canonical": "gender that is gender of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the most common gender"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the relationship status of student who was born in at most 2004 "}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "which people are alice not friends with"}
{"canonical": "end date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "natural": "find me all end dates of all employees named alice who studied at brown university"}
{"canonical": "person whose height is at most 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "find people whos height is in between 180cm200cm"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the genders of employees who start date is no later than 2004"}
{"canonical": "person whose height is at most 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "what person has a height of at the most 180 cm"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting after alices last day"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who has the same relationship status as the 180 cm tall person"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has only one field of study"}
{"canonical": "person whose birthdate is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "person born before 2004"}
{"canonical": "person that is friends with alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "who is friend of either alice or bob"}
{"canonical": "person whose birthdate is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "who was born in 2004 or 2010"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "people those who are friends of friends of alice"}
{"canonical": "person whose birthdate is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who has the same birthday as the person who is 180 cm tall"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that stopped school when alice started"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees end date is earlier than alices start date"}
{"canonical": "person whose relationship status is single and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "natural": "all 180 cm tall singles"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose end date is at least 2004"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with the employee that does not start in 2004"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day matching alices first day at school"}
{"canonical": "person whose height is at most 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "people who are 180 cm or less in height"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employee whose employer is not mckinsey"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the employee who started before 2004"}
{"canonical": "person whose height is 180 cm and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "natural": "who is a person whose height is 180 cm and thats friends with alice"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduated in 2004 or 2010"}
{"canonical": "student whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that graduate on the same day alice starts her new job"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students not studying computer science"}
{"canonical": "university of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "natural": "find students from brown university"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started school after alice quit her job"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender of employees other than software engineers"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is after end date of student alice"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were students that did not finish in 2004 born"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the status of the 180 cm tall persons relationship"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who started no earlier than"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date that is the same as student alice or greater"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "who joined on in 2004 and is 180 cm tall"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees started at the same time as alice"}
{"canonical": "person that alice is friends with and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is friends with alice"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "find people with three genders"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no earlier than the day alice started school"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of the students that did not start in 2004"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date no later than the end date of alice"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who graduated before alice quit her job"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is before start ate of employee alice"}
{"canonical": "end date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "natural": "when did alice stop attending brown university"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people who quit their job after 2004"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee with start date on or before alices"}
{"canonical": "person that is friends with employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friends with last date of work before 2004"}
{"canonical": "student whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students starte school the same day alice graduated"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is after start date of student alice"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose end date is not after 2004"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of employees who are not software engineers"}
{"canonical": "person that has more than two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "natural": "whos got more than 2 genders down"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were people that stopped working in or after 2004 born"}
{"canonical": "student whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing on or after alices birthday"}
{"canonical": "person that is friends with employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me all people that are friends with the employee starting after 2004"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "person whos 6 feet tall and studies computer science"}
{"canonical": "person whose gender is male or female", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))", "natural": "is the person male or female"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who started working the same day alice left"}
{"canonical": "city that is birthplace of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "which city a person is born in whose year of birth is 2004"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left on or before alices birthday"}
{"canonical": "relationship status that is relationship status of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what is the relationship status of the person logged in"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that finished school before 2004 or before 2010"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left before alice started"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me the employee who has had the most previous jobs"}
{"canonical": "person whose birthdate is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "find people with same birth date as alice or later"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of employee whose end date is not before 2004"}
{"canonical": "person whose birthplace is new york and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find all people who born in new york in 2004"}
{"canonical": "city that is birthplace of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees whose end date is before 2004"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with the same last day as alice"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have mickinsey as their employer"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the student whose field of study is not computer science"}
{"canonical": "person that student whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of student who started later than 2004"}
{"canonical": "person that alice or bob is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "friends of alice or bob"}
{"canonical": "start date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "natural": "when did alice start her study in the field of computer science"}
{"canonical": "person that has at least two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "natural": "two or more gendered people"}
{"canonical": "gender that is gender of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who is same gender as of at least two persons"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "who is male and friends with alice"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is equal to alices birthday or later"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who joined their jobs after 2004"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what relationship status is that of two people at the most"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name a person who quit no later than 2004"}
{"canonical": "gender that is gender of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "which gender is the employee who ended after 2004"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish on or after alice starts"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has less than two job titles"}
{"canonical": "relationship status that is relationship status of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what are the current relationship statuses of employees who have a start date that is anything but 2004"}
{"canonical": "student whose university is university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student that attends the same university as alice"}
{"canonical": "person that is friends with person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "who has a single friend"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice started or after"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started in or before 2004 or 2010"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who left on or before alices joining"}
{"canonical": "person that is friends with alice and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "natural": "friends of alice that are currently online"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose end date is no earlier than alices end date"}
{"canonical": "start date of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "natural": "what is alices first date of studying computer science in school"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose start date is before 2004"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who didnt graduate in 2004"}
{"canonical": "person whose height is not 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "natural": "people that are not 180 cm tall"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends with employee who are born atleast before 2004"}
{"canonical": "relationship status that is relationship status of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of fewer than two people"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me the employees who quit between 2004 and 2010"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "who is the software engineer who is 180 cm tall"}
{"canonical": "end date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "natural": "when did alice stop working as a software engineer"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "find all male friends of alice"}
{"canonical": "student whose end date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who left by the time alice left"}
{"canonical": "relationship status that is relationship status of person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "which relationship statuses are claimed by the males in my network"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who started no sooner than 2004"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started earliest"}
{"canonical": "person that is friends with less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find all people who are friends with less than two other people"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "sex of people who began school in 2004 or later"}
{"canonical": "person that alice is friends with and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "find all alices friends that are male"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "alices friends who are currently online"}
{"canonical": "person whose birthdate is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "find me a person with the same or later birthday as alice"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "name the friend of alice with a height of 180cm"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what gender is the employee who is not employed by mckinsey"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school after alice graduated"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status of two persons"}
{"canonical": "person that has two gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "natural": "what people have two genders"}
{"canonical": "person that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "find the tallest person"}
{"canonical": "person whose birthdate is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "people who were born before alice started her job"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees who began working by 2004"}
{"canonical": "person whose height is 180 cm and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "natural": "people who ate 180 cm tall"}
{"canonical": "employee that has less than two job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have fewer than 2 job titles"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who completed their studies in an year other than 2004"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with a student who did not start in 2004"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with an end date that is no later than alices birthday"}
{"canonical": "person whose birthdate is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "find people born after alices graduation from school"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who has not more than two fields of study"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the student end date at least 2004"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "who is 180 cm tall and the same relationship status as alice"}
{"canonical": "person whose height is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "who is the 180 cm tall"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "who does mckinsey employ who is 180 cm tall"}
{"canonical": "person that has more than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "natural": "name a person in more than two relationships"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is online and is friends with"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student with two or fewer majors"}
{"canonical": "person that has more than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "natural": "who has three or more relationship statuses"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "who are people with a birthdate of 2004 friends with"}
{"canonical": "person whose birthdate is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "find people born after alice"}
{"canonical": "employee whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working the same time as alice"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with last day on alices birthday"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find the students whose end date is either 2004 or 2010"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who started before 2004"}
{"canonical": "student whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who started after alice left"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose job title is not software engineer"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started no earlier than alices birthdate"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date after 2004"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birth city of student whose start date is not 2004"}
{"canonical": "employee whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after the student named alice"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started on alices birthdate"}
{"canonical": "person that student whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find friends of people who started school in 2004 at the latest"}
{"canonical": "city that is not birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))", "natural": "where wa alice not born"}
{"canonical": "student whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student starting after alice"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "which 180 cm tall people started in 2004"}
{"canonical": "start date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "natural": "when did alice start working as a software engineer"}
{"canonical": "person that has two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "natural": "someone with two relationship status"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose end date is after 2004"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "find alices singlestatus friends"}
{"canonical": "relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status)))", "natural": "what is the status of alices relationship"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students had a start date of 2004 or 2010"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees sho started before 2004"}
{"canonical": "student whose start date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting 2010 or before"}
{"canonical": "person whose birthdate is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "people who were born after 2010"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of an employee who has a start date later than 2004"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has the greatest number of employers"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who start before or on 2004"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "which of alices friends are single"}
{"canonical": "person that is friends with student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "person who is friends with a student that graduated in 2004 or before"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date after either 2004 or 2010"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who works for mckinsey or google"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find alices friends who are single"}
{"canonical": "relationship status that is relationship status of two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of the two people"}
{"canonical": "city that is birthplace of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what is the birthplace of the person born in 2004"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people whose job title is not software engineers"}
{"canonical": "relationship status that is not relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))", "natural": "relationship status that is not similar to alice"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "whats the gender of students who started school after 2004"}
{"canonical": "person whose birthdate is 2004 and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which people have a birthdate of 2004 and are friends with alice"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "name a friend of a student who did not graduate in 2004"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "find people logged in who are 180 cm tall"}
{"canonical": "employee whose start date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date before that of student alice"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is gender of students starting in years other than 2004"}
{"canonical": "person that employee whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of people who quit their jobs in an year other than 2004"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with an employee that started before 2004"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person who didnt start in 2004"}
{"canonical": "end date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "natural": "when did alice stop working for mckinsey"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "person born in new york and who is 180 cm tall"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people that have employed friends that did not start working in 2004"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who are not majoring in compuer science"}
{"canonical": "employer of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "natural": "which employer of alices ended in 2004"}
{"canonical": "person that person whose gender is male is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "who are men friends with"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birth city of students who have a field of study other than computer science"}
{"canonical": "person whose birthdate is 2004 and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "natural": "who was born in 2004 and is 180 cm tall"}
{"canonical": "person whose height is 180 cm and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "180 cm tall person with same relationship status as that of alice"}
{"canonical": "job title of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what is job title of alice who is employed since 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "someone 180 cm tall who started in 2004"}
{"canonical": "city that is birthplace of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city is the birthplace of an employee that is not a software engineer"}
{"canonical": "student whose start date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has a start date the same time as the birthdate of alice"}
{"canonical": "city that is birthplace of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what cities were students born in who started after 2004"}
{"canonical": "end date of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "natural": "what is the end date of alice at mckinseys"}
{"canonical": "student that has the least number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with fewest fields of study"}
{"canonical": "person whose birthdate is 2004 and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "natural": "any male born in 2004"}
{"canonical": "person that at most two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "people with at most two friends"}
{"canonical": "number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))", "natural": "what is the universitys number"}
{"canonical": "end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))", "natural": "when did alice stop working"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me an employee whose start date is before or equal to the end date of student alice"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the birthplace of employees who quit since 2004"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate the day alice starts school"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of the students who dont graduate in 2004"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the gender of students who have a field of study in something other than computer science"}
{"canonical": "relationship status that is relationship status of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students with a start date less than 2004"}
{"canonical": "employee whose end date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day is no later than alices first day"}
{"canonical": "employee whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "mention the name of an employee whose end date is either 2004 or 2010"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find the city that is the birthplace of only one person"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started before alices birthdate"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is alices boss"}
{"canonical": "employee whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started no later than alice did"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees whose last day was after 2004"}
{"canonical": "employee whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is smaller than that of employee alice"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who joined before 2005"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students started after 2004"}
{"canonical": "employee that has the least number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employer has the least amount of employees"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "name a person who is 180 cm tall and who quit in 2004"}
{"canonical": "gender that is gender of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what genders are people that started school in any year but 2004"}
{"canonical": "person whose birthdate is 2004 and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "natural": "find people born in 2004 who are friends with alice"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who left at the same time as alice or before"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of employees whose last day was not in 2004"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of a student who was enrolled after 2004"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of students whos end date is 2004 or more"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who started earliest"}
{"canonical": "person whose height is 180 cm and that is height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))", "natural": "who is the same height as alice"}
{"canonical": "employee that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee was the first to be hired"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "name the birthplace city of the employee whose end date is larger than 2004"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with an employee who started in a year other than 2004"}
{"canonical": "student whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date that is earlier than that of fellow student alice"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that started school in or after 2004"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the people who are friends with people who quit their job before 2005"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "find people with a height of 180 cm that go to brown university"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what sex are the students who stated before 2004"}
{"canonical": "city that is birthplace of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which city is the birthplace of two or less people"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "a friend of someone born in 2004"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "find people 180 cm tall with 2004 end dates"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who is friends with alice and has a birthdate on 2004"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who are the friends of students with an end date that is not 2004"}
{"canonical": "person whose gender is male and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "natural": "who is male and 180 cm tall"}
{"canonical": "student that has less than two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me all students who have only one field of study"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is before the start date of employee alice"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "what person has two birthplaces"}
{"canonical": "employee whose start date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started after alice"}
{"canonical": "student whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is larger than 2004 and 2010"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what worker left before 2004"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "fins birthplaces of employees with last day after 2004"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date no later than student alices start date"}
{"canonical": "employee whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started earlier than alices end date"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "relationship status of max two people"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work when alice started school or after"}
{"canonical": "person that is friends with employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friends of employees who started before 2004"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose end date is after alices end date"}
{"canonical": "person whose birthdate is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "people born on or after the day alice quit working"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "find me all people who are not friends with alice"}
{"canonical": "end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))", "natural": "what was alices last day of work"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that studied at at most two universities"}
{"canonical": "employee whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date that is at least the end date for the employee alice"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "person that started working most recently"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is 2004 or earlier"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school after 2004 or after 2010"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me all students that will be leaving the company by the time alice starts"}
{"canonical": "person that is friends with the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what person has the least friends"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "who is a person whose friends with alice that is single"}
{"canonical": "person that is logged in and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "anyone single who is logged in"}
{"canonical": "student whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student who finishes at most on 2004 or 2010"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find a list of cities that students whose end date is at least 2004 were born in"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people whose end date is not in 2004"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started working at the same time as or before alice"}
{"canonical": "person that is friends with employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the friends of people who quit their job after 2004"}
{"canonical": "person whose birthplace is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the birthplace of people who are 6 feet tall"}
{"canonical": "person that has the smallest birthdate", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))", "natural": "find me the oldest person"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student ended school before 2004 or 2010"}
{"canonical": "student that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student left most recently"}
{"canonical": "person that alice is friends with and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "find all people who are mutual friends with alice"}
{"canonical": "student whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started after alice"}
{"canonical": "employee that has the most number of job title", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees with the most job titles"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "find all of alices friends that are currently online"}
{"canonical": "student whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who completed study before alice joined the job"}
{"canonical": "person that is friends with person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find friends of people who are 180 cm tall"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is employee alices start date or later"}
{"canonical": "number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))", "natural": "find phone number of university"}
{"canonical": "person whose relationship status is single and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "natural": "people who are single that are currently online"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are genders of students not attending brown university"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which university does the person who is 180 cm attend"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "job titles of all people who are 180 cm tall"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "find people who are 180 cm tall with 2004 start date"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are the current relationship statuses of students with a start date of 2004 or later"}
{"canonical": "person that employee whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with the person who started working after 2004"}
{"canonical": "person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "people who were born in 2004"}
{"canonical": "gender that is gender of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student who does not finish by 2004"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find a person who is a student with a start date that is not 2004 and their friends"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of a worker who left before 2004"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find student with start date before or on alices start date"}
{"canonical": "student whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting before or with alice"}
{"canonical": "gender that is gender of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students with an end date ealier than 2004"}
{"canonical": "city that is birthplace of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city is the birthplace of a student who graduated 2004 or after"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who attended one or two universites"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who have an end date that is equal or later to that of student alice"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students with last day in 2004 or before"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who started first"}
{"canonical": "person that is friends with student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what people are friends with students whom have an end date that is no greater than 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date that is anything but 2004"}
{"canonical": "person that has the least number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))", "natural": "who has minimum number of relationship statuses"}
{"canonical": "field of study of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "natural": "what field is alice studying in brown university"}
{"canonical": "person that is friends with alice and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "male friend of alice"}
{"canonical": "student whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student had a start date no earlier than alice"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the city that is the birthplace of at least two people"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who was the last employee to quit"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees who did not stop working in 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were employees at companies other than mckinsey born"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who stopped working in 2004 or later"}
{"canonical": "employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees strated before 2004"}
{"canonical": "student whose start date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students starting on or after employee alices first day"}
{"canonical": "student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students studying fields other than computer science"}
{"canonical": "person that not is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "natural": "find people who are not friends with alice"}
{"canonical": "person whose height is 180 cm and whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "natural": "a 180 cm tall mckinsey employee"}
{"canonical": "student whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is before start date of alice"}
{"canonical": "person that is friends with student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me all the people who are friends with people that did not attend brown"}
{"canonical": "new york or beijing", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing))", "natural": "select new york or beijing"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of people studied in fields other than computer science"}
{"canonical": "gender that is gender of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "gender employee whose end date is not 2004"}
{"canonical": "person whose height is at most height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))", "natural": "people who are the same height as alice or shorter"}
{"canonical": "person whose birthdate is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))", "natural": "people born after alice finished school"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of people who completed their study in an year other than 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that started work in or before 2004"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are the birth cities of students who have an end date that is not 2004"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with students hired to start on or before 2004"}
{"canonical": "person that employee whose job title is not software engineer is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends of employees who have a job titale other than software engineer"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find students friends who started in a year other than 2004"}
{"canonical": "city that is birthplace of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were two or fewer people born in"}
{"canonical": "person that employee whose end date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whos friends with someone who left a company or retired before 2004"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee who starts after alices last day"}
{"canonical": "person whose birthdate is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "person born after alice"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students who did not join in 2004"}
{"canonical": "relationship status that is relationship status of more than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the relationship status of the majority of people"}
{"canonical": "employee whose end date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee ending after alice was born"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which people are friends with students who didnt graduate in 2004"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees whose start date is no later than 2004"}
{"canonical": "person whose relationship status is single or married", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married)))", "natural": "which people are single or married"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "which person born in new york is 180 cm tall"}
{"canonical": "student that has at most two university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student that has studied at no more than 2 universities"}
{"canonical": "person whose gender is male and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "natural": "which men is alice friends with"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who started on student alices last day"}
{"canonical": "employee whose start date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before alice quit school"}
{"canonical": "person whose birthdate is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "natural": "people born in any year except 2004"}
{"canonical": "person that student whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "friends of people who completed their studies after 2004"}
{"canonical": "person that employee whose employer is not mckinsey is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of people who do not work at mckinsey"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "find all alices friends that were born in new york"}
{"canonical": "city that is not birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))", "natural": "where was alice not born"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student who does not graduate by 2004"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the people who joined their work before 2005"}
{"canonical": "number of field", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))", "natural": "what is the number of the field"}
{"canonical": "student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started in 2004 or later"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birth city of employees with an end date later than 2004"}
{"canonical": "person that person whose relationship status is single is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "who has friends who are single"}
{"canonical": "person that more than two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find all people who have more than two friends"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees finishing in or after 2004"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "people who are born in new york and are 180 cm tall"}
{"canonical": "person whose relationship status is single and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "natural": "which single people are 180 cm tall"}
{"canonical": "employee whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started no later than alice"}
{"canonical": "university of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "natural": "what university did alice study computer science at"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is after 2004"}
{"canonical": "student whose end date is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose quit date of job is same as employee alices "}
{"canonical": "relationship status that is relationship status of alice and that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))", "natural": "who has similar relationship status that of alice"}
{"canonical": "person that is friends with student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is the friend of a person whose end date is at least 2004"}
{"canonical": "person whose birthdate is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "who was born on a date before alices start date"}
{"canonical": "relationship status that is relationship status of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationships statuses of employees who dont work as software engineers"}
{"canonical": "person that is friends with alice and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "who was born in 2004 who is friends with alice"}
{"canonical": "person whose birthdate is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "what person has a birthdate earlier than 2004"}
{"canonical": "person that is friends with employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends who employees who didnt quit in 2004"}
{"canonical": "gender that is gender of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me the genders of students who attended after 2004"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what city was the employee that started after 2004 born in"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is after the end date of employee alice"}
{"canonical": "person whose birthdate is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "who has a birthdate at the end of alices employment"}
{"canonical": "gender that is gender of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of student whose field of study is not computer science"}
{"canonical": "person whose birthdate is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "people born between 2004 and 2010"}
{"canonical": "person that has two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "natural": "what people have two birthplaces"}
{"canonical": "person that is friends with employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friends who started in 2004 or before"}
{"canonical": "gender that is gender of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students not attending brown university"}
{"canonical": "person that is friends with employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who quit their job in or after 2004"}
{"canonical": "job title that is job title of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "job titles of people that are 180 cm tall"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "people who are 180 cm tall and are currently online"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "name an employee who quit after alice"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of people that stopped school in or before 2004"}
{"canonical": "field that is field of study of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what do people study who are 180 cm"}
{"canonical": "person whose birthdate is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "who was born after alice started"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have a start date no later than 2004"}
{"canonical": "end date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "when did alice leave the job she started in 2004"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students whose end date is no greater than 2004"}
{"canonical": "number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))", "natural": "what is total number of univeristies"}
{"canonical": "person that has at least two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "natural": "which people have at least two birthplaces"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student has a start date earlier than 2004"}
{"canonical": "gender that is gender of student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the gender of a student that starts after 2004"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which of alices friends are online right now"}
{"canonical": "gender that is gender of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the gender of an employee that started before 2004"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of an employee who left in 2004 or later"}
{"canonical": "person whose birthdate is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "people born on or before the day alice quit her job"}
{"canonical": "student whose end date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate before 2004 or 2010"}
{"canonical": "relationship status that is relationship status of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the relationship status of people who are 180 cm tall"}
{"canonical": "student that has the least number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student who has studied at the fewest universities"}
{"canonical": "relationship status that is relationship status of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose start ate is before 2004"}
{"canonical": "student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not 2004"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who is friends with alice and is 180 cm tall"}
{"canonical": "employer of employee alice whose employer is mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "natural": "does alice work at mckinsey"}
{"canonical": "person whose birthdate is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))", "natural": "person with the same birthday as alice"}
{"canonical": "employee whose start date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees that have a start date that is the same as student alices"}
{"canonical": "employee whose end date is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees whom have an end date bigger than the start date for employee alice"}
{"canonical": "student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with a start date no later than 2004"}
{"canonical": "person that person whose birthplace is new york is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "who is now friends with the person who was born in new york"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student started before alice was born"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who have student friends who did not graduate in 2004"}
{"canonical": "student whose university is brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose university is either brown university or ucla"}
{"canonical": "relationship status that is relationship status of student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student whose end date is after 2004"}
{"canonical": "employee whose end date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who finish after alices birthday"}
{"canonical": "person that is logged in and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "natural": "find people who are currently online and born in new york"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "find people of the same gender as alices friends"}
{"canonical": "employee that has the smallest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have the earliest end date"}
{"canonical": "person whose height is 180 cm and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "all 180 cm tall people born in 2004"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started before alice"}
{"canonical": "job title of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what is job title of employee alice whose end date is 2004"}
{"canonical": "relationship status that is relationship status of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the relationship status of an employee is one with a start date of atleast 2004"}
{"canonical": "gender that is gender of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what gender represents the least number of people"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "180 cm tall brown university student"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city is the birthplace of a student that is not studying computer science"}
{"canonical": "person whose birthdate is at least end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "who was born on or after alices last day of employment"}
{"canonical": "gender that is gender of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "the gender of a student who started before 2004"}
{"canonical": "student whose end date is birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is birth date of alice"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not before end date of student alice"}
{"canonical": "employee whose end date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have an eend date that is earlier than that of student alice"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working in or before 2004 or in or before 2010"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students whose start date is not 2004"}
{"canonical": "end date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "what date in 2004 is alices last day of work"}
{"canonical": "person that has at least two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "natural": "who has two or more relationship statuses at once"}
{"canonical": "employee whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit before alice started"}
{"canonical": "employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "a worker who didnt start in 2004"}
{"canonical": "student whose start date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find the people who joined study before alice"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people studying the same thing as alice"}
{"canonical": "employee whose start date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee started after alice started"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees who started before 2004"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what student has an end date that is no greater than the start date of alice"}
{"canonical": "number of gender", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))", "natural": "how many gender options are there"}
{"canonical": "person that has at most two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "natural": "people with two relationship statuses or less"}
{"canonical": "person whose relationship status is not single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "natural": "who is not single"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find relationship statuses of students with a start date that is 2004 or later"}
{"canonical": "person that is friends with student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people who are friends with students who have a start date of 2004 or later"}
{"canonical": "start date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "natural": "which date alice the software engineer started"}
{"canonical": "city that is birthplace of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birth city of employees whose end date is after 2004"}
{"canonical": "person whose birthplace is new york and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "natural": "find people who were born in new york who are 180 cm tall"}
{"canonical": "person that alice is friends with and that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "natural": "find all of alices friends that are currently online"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date that is 2004 or later"}
{"canonical": "person whose birthdate is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))", "natural": "who was born on the day alice left"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started before alice"}
{"canonical": "person that alice is friends with and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "who is alices single friend"}
{"canonical": "employee whose employer is employer of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who works for the same employer as ailce"}
{"canonical": "student whose end date is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students graduate after alice started school"}
{"canonical": "person whose height is 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm))))", "natural": "what person has a height of 180 to 200 cm"}
{"canonical": "city that is birthplace of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were people that started school in any year but 2004 born"}
{"canonical": "student whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students who joined after 2004"}
{"canonical": "person that has the most number of relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string relationship_status)))", "natural": "who has had the most different relationship statuses"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not before birth date of alice"}
{"canonical": "job title of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what was alices job when she started in 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who didnt start in 2004"}
{"canonical": "person whose birthdate is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "natural": "find me the people born in any year but 2004"}
{"canonical": "person whose birthdate is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "find people born between 2004 and 2010"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the gender of employees who didnt start in 2004"}
{"canonical": "student whose start date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students starting before alice finishes"}
{"canonical": "relationship status that is relationship status of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "what is the relationship status of people with the birth place as newyork"}
{"canonical": "person whose birthdate is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))", "natural": "find all people born after alice quitted"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees before working before alice"}
{"canonical": "person whose height is larger than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "find people taller than 180 cm"}
{"canonical": "city that is birthplace of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of students whose end date is not in 2004"}
{"canonical": "employee whose end date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees last day was no sooner than alices graduation day"}
{"canonical": "person whose height is smaller than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "people that are shorter than 180 cm"}
{"canonical": "person whose height is 180 cm and whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "natural": "180 cm tall persons who quit in 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the relationship status of people that stopped working in or before 2004"}
{"canonical": "person that student whose end date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person who didnt graduate in 2004"}
{"canonical": "person whose birthdate is larger than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "what person has a birthdate larger than that of alice"}
{"canonical": "employee whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who quit after student alice quit her job"}
{"canonical": "person that is friends with person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "people who are friends with males"}
{"canonical": "relationship status that is relationship status of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "whats the relationship status of employees who quit after 2004"}
{"canonical": "person that is logged in and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "natural": "people who are male and currently online"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date not after start date of student alice"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who joined before 2004 or in 2010"}
{"canonical": "person that is friends with student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone in school studying something other than computer science"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me all the people who quit during or after 2004"}
{"canonical": "student whose field of study is field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a field of study that is the same as alice"}
{"canonical": "person that employee whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find friends of employees with end date in 2004 or earlier"}
{"canonical": "student whose end date is smaller than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student ended earlier than alice"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "180 cm tall person with same birth place as that of alice"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started no earlier than alice"}
{"canonical": "person that is friends with employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find me the emplotee who started after 2004"}
{"canonical": "gender that is gender of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the least common gender"}
{"canonical": "employee whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting after student alices last day"}
{"canonical": "employee whose start date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not before start date of student alice"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has end date equal to employee alice"}
{"canonical": "gender that is gender of person whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "natural": "find gender of persons born in new york"}
{"canonical": "student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after 2004"}
{"canonical": "employee that has the largest end date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has the largest end date"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "all 180 cm tall people who joined in 2004"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "find friends of people born is 2004"}
{"canonical": "student whose end date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who finish in 2004 or 2010"}
{"canonical": "start date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "natural": "when did alice start attending brown university"}
{"canonical": "gender that is gender of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "find the gender of everyone currently online"}
{"canonical": "person that student whose start date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what student has a start date after 2004"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student who is not student of brown university"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "who started in 2004 and is 180 cm tall"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birth city of all employees who have a start date that is 2004 or later"}
{"canonical": "relationship status that is relationship status of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship statuses of employees who quit their job before 2004"}
{"canonical": "city that is birthplace of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what is the birth city of people who are friends with alice"}
{"canonical": "employee whose start date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who started in alices end date"}
{"canonical": "gender that is gender of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "gender of people who started their study before 2005"}
{"canonical": "person whose height is at least 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "whose hight is at least 180cm"}
{"canonical": "person whose relationship status is single and that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "natural": "who is single and is friends with alice"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of an employee who does not have mckinsey as an employer"}
{"canonical": "relationship status that is relationship status of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of student who ended in 2004"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "what people have a height of 180 cm and a birth city of new york"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work when alice was born or earlier"}
{"canonical": "employee whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work after 2004 or after 2010"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who shares end date with employee alice"}
{"canonical": "student whose start date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined the institution after 2004"}
{"canonical": "person whose height is 180 cm and whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "natural": "which people are 180 cm tall and started school in 2004"}
{"canonical": "student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people who joined study in years other than 2004"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "a worker who began in 2004 or 2010"}
{"canonical": "person that is friends with student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a friend of a student ending in 2004 or before"}
{"canonical": "person that is friends with person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "people who are a friend of a friend of alices"}
{"canonical": "person whose gender is male and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "what males were born in 2004"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employee whose last day at work is before alices start date"}
{"canonical": "city that is birthplace of the most number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city were the most people born in"}
{"canonical": "student whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "name the student who the quit the job with alice"}
{"canonical": "person that is friends with person whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "natural": "person who has male friends"}
{"canonical": "student whose start date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students that will begin to work on the same day alices leaves her job"}
{"canonical": "relationship status that is relationship status of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students starting after 2004"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of students who joined before 2005"}
{"canonical": "employee that has the most number of employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has been employed by the most employers"}
{"canonical": "city that is birthplace of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what city is the birthplace of students with an end date no later than 2004"}
{"canonical": "person that is friends with person that is friends with alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "natural": "find people who are friends of alices friends"}
{"canonical": "city that is birthplace of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "where were the people that go to a university other than brown born"}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started after alices birthdate"}
{"canonical": "end date of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "what date in 2004 did alice stop working"}
{"canonical": "person that alice is friends with and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "whome is alice friends with who also have a birthdate of 2004"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the person who started school before 2004"}
{"canonical": "employee that has less than two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has less than two jobs"}
{"canonical": "field of study of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))", "natural": "which is the field of study of alice"}
{"canonical": "student whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people joined their study before alice born"}
{"canonical": "person whose birthdate is larger than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people that were born after alice started school"}
{"canonical": "student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is before 2004"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that did not stop working in 2004"}
{"canonical": "city that is birthplace of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what city has the least births"}
{"canonical": "person whose birthdate is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "people who were born between 2004 and 2010"}
{"canonical": "city that is birthplace of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "birthplace of employees who dont study computer science"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "which person 180 cm tall is a software engineer"}
{"canonical": "person whose birthdate is 2004 and whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "natural": "find all people who were born in 2004"}
{"canonical": "brown university or ucla", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))", "natural": "people that studied at brown university or ucla"}
{"canonical": "student whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last day before or same as alices"}
{"canonical": "gender that is gender of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what genders are the people born in 2004"}
{"canonical": "gender that is gender of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employee who started in year other than 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find relationship status of employee with last day in 2004 or before"}
{"canonical": "person that is friends with employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "who is friends with employees before or on 2004"}
{"canonical": "person that person whose birthdate is 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "who is friends with someone born in 2004"}
{"canonical": "employee whose start date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees have a start date between 2004 and 2010"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of students who started no earlier than 2004"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of people who did not start their job in 2004"}
{"canonical": "student whose start date is at least birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who started no earlier than alices birthdate"}
{"canonical": "student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is before 2004"}
{"canonical": "employee whose start date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find the people joined work before 2010"}
{"canonical": "student that has the smallest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who started school the earliest"}
{"canonical": "person that is friends with student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find me people that are friends with students leaving before and after 2004"}
{"canonical": "gender that is gender of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of the employee who started in 2004 or later"}
{"canonical": "employee whose start date is smaller than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who started before end date of student alice"}
{"canonical": "employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee who is not employed by mckinsey"}
{"canonical": "relationship status that is relationship status of student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of student whose start date is not 2004"}
{"canonical": "employee whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees had start dates on 2004 or 2010"}
{"canonical": "employee whose start date is smaller than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working before alices birthdate"}
{"canonical": "university of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))", "natural": "what university does alice study at"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day not in 2004"}
{"canonical": "student whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students whose end date is later than the end date of alice"}
{"canonical": "person whose height is 180 cm and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "natural": "name a male who is 180 cm tall"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students who began school in 2004 or 2010"}
{"canonical": "birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))", "natural": "what is alices date of birth"}
{"canonical": "employee whose start date is at most start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started work when alice did or before"}
{"canonical": "height of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))", "natural": "what is height of alice"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees whose last day was no later than 2004"}
{"canonical": "employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees quit after 2004"}
{"canonical": "person that is logged in and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "natural": "current users who are 180 cm tall"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "person that is studying the most things at school"}
{"canonical": "person that has more than two birthplace", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "natural": "who was born in over two places"}
{"canonical": "student whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "people that started school on or after the day alice stopped school"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "in which cities were employees who started working after 2004 born"}
{"canonical": "student whose end date is end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student ending at the same time as alice"}
{"canonical": "gender that is gender of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "give me the genders of the students who graduate in 2004 or sooner"}
{"canonical": "university that is university of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "universities where all 180 cm tall people studied"}
{"canonical": "student whose end date is start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find me students whose end dates are the same as the start date of alice"}
{"canonical": "person that student whose start date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has friends with students that have a start date of 2004"}
{"canonical": "person that is friends with alice and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "natural": "find all of alices single friends"}
{"canonical": "employee whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees with last day on or after alices first day"}
{"canonical": "person that is friends with student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people who are friends with students who started after 2004"}
{"canonical": "employee whose end date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees whose last day is the same as alices first day at the job"}
{"canonical": "city that is birthplace of employee whose start date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find birthplaces of employees who started after 2004"}
{"canonical": "gender that is gender of person whose birthdate is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "natural": "what is the gender of the person whose birthdate is in 2004"}
{"canonical": "person whose height is 180 cm and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "which of alices friends is 180 cm tall"}
{"canonical": "end date of employee alice whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "natural": "when did alice quit her software engineer job"}
{"canonical": "person that is friends with student whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "a friend of a student not starting in 2004"}
{"canonical": "field of study of student alice whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "natural": "is alices field of study computer science"}
{"canonical": "gender that is gender of employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of people that started working in or before 2004"}
{"canonical": "student whose start date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started in 2004 or 2010"}
{"canonical": "student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students left after 2004"}
{"canonical": "person that employee whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "friend of employee whose start date is smaller than 2004"}
{"canonical": "end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))", "natural": "alices quit date"}
{"canonical": "employee whose end date is end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date that is the same as that of alice"}
{"canonical": "city that is birthplace of employee whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "where were employees who finish on or before 2004 born"}
{"canonical": "relationship status that is relationship status of employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the relationship status of a worker who didnt leave in 2004"}
{"canonical": "person whose birthdate is 2004 and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "who was born after 2004 that is friends with alice"}
{"canonical": "student that has the least number of university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have been at college for the least amount of time"}
{"canonical": "person whose height is 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm))))", "natural": "people that are 180 cm or 200 cm tall"}
{"canonical": "person whose birthplace is new york and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "natural": "people who were born in new york"}
{"canonical": "person that is friends with employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who are friends with employees who started working before or after 2004"}
{"canonical": "student whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which student started school after alice was born"}
{"canonical": "student whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have an end date that is either 2004 or 2010 and no greater"}
{"canonical": "city that is birthplace of employee whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of employees who started in 2004 or later"}
{"canonical": "relationship status that is relationship status of student whose field of study is not computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student studying something other than computer science"}
{"canonical": "city that is birthplace of employee whose start date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplace of employees who didnt start working in 2004"}
{"canonical": "person that is friends with employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find employees friend with title other than software engineer"}
{"canonical": "employee whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose start date is not after the end date of employee alice"}
{"canonical": "employee whose start date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date later than that of the end date of employee alice"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working when alice was born  or before"}
{"canonical": "software engineer or program manager", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))", "natural": "who is a software engineer or program manager"}
{"canonical": "student whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "what students have a start date earlier than that of employee alice"}
{"canonical": "relationship status that is relationship status of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "which relationship status represents no more than two people"}
{"canonical": "employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that stopped working after 2004"}
{"canonical": "relationship status that is relationship status of student whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students that did not finish school in 2004"}
{"canonical": "relationship status that is relationship status of the least number of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "find the least common relationship status"}
{"canonical": "gender that is gender of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "what is the gender of the person alice is friends with"}
{"canonical": "student that has at most two field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who is studying two things or less"}
{"canonical": "gender that is gender of employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees whose end date is less than 2004"}
{"canonical": "person whose height is smaller than 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "who is shorter than 180cm"}
{"canonical": "employee that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "an employee with the longest start date"}
{"canonical": "end date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "natural": "what is the last date of employee alice who started in 2004"}
{"canonical": "relationship status that is relationship status of employee whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is relationship status of employee whose last day was after 2004"}
{"canonical": "employee whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employees started no later than 2004"}
{"canonical": "person whose birthdate is 2004 and whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "natural": "people who were born in 2004 and are single"}
{"canonical": "field of study of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "natural": "what does alice study at brown university"}
{"canonical": "person that is friends with student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find people that are friends with students who have quit after 2004"}
{"canonical": "student that has the most number of field of study", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "which students have the most majors"}
{"canonical": "employee whose start date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose end date is not after birth date of alice"}
{"canonical": "person that alice not is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))", "natural": "name a person with whom alice is not friends"}
{"canonical": "gender that is gender of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find the gender of people with a height of 180 cm"}
{"canonical": "person that is friends with employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what person is friends with people that do not work for mckinsey"}
{"canonical": "person whose height is at most 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))", "natural": "people who are shorter than 181 cm"}
{"canonical": "start date of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "natural": "what is alices exact start date in 2004"}
{"canonical": "employee that has at most two employer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find me employees that have worked for no more than two employers"}
{"canonical": "city that is birthplace of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the birthplace of students who graduated before 2004"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "what person has a height of 180 cm and a job title of software engineer"}
{"canonical": "person that is logged in and that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))", "natural": "what people are logged in who are also friends with alice"}
{"canonical": "relationship status that is relationship status of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "relationship status of employee whose employer is not mckinsey"}
{"canonical": "person whose height is 180 cm and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "natural": "male 180 cm tall"}
{"canonical": "student whose end date is larger than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who stopped going to school after 2004"}
{"canonical": "employee whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee quit the day alice started"}
{"canonical": "person whose birthdate is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "people born the same day as or after alice started school"}
{"canonical": "relationship status that is relationship status of student whose end date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "relationship status of student that left school before or on 2004"}
{"canonical": "person whose birthdate is 2004 and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "natural": "males born in 2004"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "who is 180 cm tall and is female"}
{"canonical": "gender that is gender of student whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the students gender who ended at least in 2004"}
{"canonical": "employee whose employer is mckinsey or google", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who works for mckinsey or google"}
{"canonical": "relationship status that is relationship status of person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "find all single people"}
{"canonical": "student that has the largest start date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who started school most recently"}
{"canonical": "gender that is gender of student whose start date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the gender of students with a start date 2004 or later"}
{"canonical": "employee whose end date is at most 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date no later than 2004 or 2010"}
{"canonical": "person that alice is friends with and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "natural": "who is friends with alice and was born in new york"}
{"canonical": "student whose end date is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not before start date of student alice"}
{"canonical": "person whose height is 180 cm and whose birthplace is new york", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "natural": "people born in new york that are 180 cm tall"}
{"canonical": "person whose birthdate is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "people born before 2004"}
{"canonical": "person that is friends with less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has less than two friends"}
{"canonical": "person whose height is 180 cm and whose job title is software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "natural": "all 180 cm tall software engineers"}
{"canonical": "relationship status that is relationship status of student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of a student whose end date is earlier than 2004"}
{"canonical": "city that is birthplace of student whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what are the students birthplaces who started before 2004"}
{"canonical": "person whose height is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "which peolpe are exactly 180 cm tall"}
{"canonical": "student whose end date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "who graduated after alice"}
{"canonical": "person whose birthdate is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what is the birthdate of the person who is 180 cm"}
{"canonical": "employee whose end date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employee whose last date was before the day alice started"}
{"canonical": "employee whose end date is larger than end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "who is the employee leaving the company after alice leaves"}
{"canonical": "person whose birthdate is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "who was born after 2003"}
{"canonical": "person that student whose university is not brown university is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "which of my friends is at some school other than brown university"}
{"canonical": "person whose birthdate is 2004 and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "natural": "find me males born in 2004"}
{"canonical": "person whose relationship status is single and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "natural": "people 180 cm tall who are single"}
{"canonical": "person whose birthdate is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "find me all people who are older than alice"}
{"canonical": "employee whose end date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee has an end date of at least 2004"}
{"canonical": "person that student whose end date is at least 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with a student who graduated in 2004 or later"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose end date is not after atart date of student alice"}
{"canonical": "person that person that alice is friends with is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "which people are friends of alices friends"}
{"canonical": "student whose start date is at most end date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is not after end date of employee alice"}
{"canonical": "end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))", "natural": "what is alices end date"}
{"canonical": "student whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing on or before alices birthday"}
{"canonical": "person whose birthdate is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))", "natural": "find someone born on or after alices first day of employment"}
{"canonical": "employee whose end date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employee has an end date that is not in 2004"}
{"canonical": "employee whose start date is smaller than start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees who have a start date earlier than that of employee alice"}
{"canonical": "city that is birthplace of employee whose end date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "find the birth city of employees who have an end date of 2004 or later"}
{"canonical": "person whose relationship status is person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "find people having a relationship with people who are 180 cm tall"}
{"canonical": "start date of student alice whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "natural": "what is alices start date at brown university"}
{"canonical": "employee whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date before 2004"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "180 cm tall persons studied in brown university"}
{"canonical": "student whose end date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "students finishing contemporaneous to or before alice starts"}
{"canonical": "person that student whose end date is larger than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "find the friends of students whose end date is later than 2004"}
{"canonical": "student whose start date is at least start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "ppeople who joined studies after alice joined the job"}
{"canonical": "person whose birthdate is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))", "natural": "people born on or before alices birthday"}
{"canonical": "job title of employee alice whose start date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what is the job title of alice who started in 2004"}
{"canonical": "relationship status that is relationship status of person that alice is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))", "natural": "find the relationship statuses of people whom alice is friends with"}
{"canonical": "employee whose end date is at most birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended no greater than alices birthdate"}
{"canonical": "gender that is gender of at most two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "what is the gender of no more than two people"}
{"canonical": "employee whose end date is at most end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees finishing before alice"}
{"canonical": "relationship status that is relationship status of student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who stated before 2004"}
{"canonical": "student whose start date is start date of employee alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "student whose start date is start date of employee alice"}
{"canonical": "person that has the largest height", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))", "natural": "who is the tallest person"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "all 180 cm tall females"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "what employees have an end date that is before student alices start date"}
{"canonical": "city that is birthplace of person whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "natural": "what cities are the birthplaces of people who have a height of 180 cm"}
{"canonical": "person that has more than two relationship status", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "natural": "who has over two relationship status"}
{"canonical": "person whose height is 180 cm and whose field of study is computer science", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "natural": "who is 180 cm and is in the field of computer science"}
{"canonical": "person whose height is smaller than 180 cm or 200 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))", "natural": "person who is shorter than 180 cm or 200 cm"}
{"canonical": "city that is birthplace of employee whose start date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "birthplaces of employees starting before 2004"}
{"canonical": "city that is birthplace of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the birthplace of an employee who does not work for mckinsey"}
{"canonical": "employee whose end date is smaller than start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "which employee ended earlier than alices start date"}
{"canonical": "job title of employee alice whose end date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "natural": "what is job title of alice whose employment end date is in 2004"}
{"canonical": "city that is birthplace of alice or bob", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "natural": "what city was alice and bob born in"}
{"canonical": "gender that is gender of employee whose job title is not software engineer", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "the gender of an employee whos not a software engineer"}
{"canonical": "person whose birthdate is at least start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))", "natural": "whose birthdate is on or after alices start date"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "people that started working when alice stopped school or after"}
{"canonical": "student whose start date is larger than end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "a student starting after alice ends"}
{"canonical": "end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))", "natural": "when did alice finish school"}
{"canonical": "city that is birthplace of less than two person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "name a city that fewer than two of the people were born in"}
{"canonical": "person whose height is 180 cm and that is birthplace of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))", "natural": "180 cm tall persons who were born in the same place where alice was born"}
{"canonical": "person that student whose start date is smaller than 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who has friends that are students who have a start date before 2004"}
{"canonical": "student whose end date is at most start date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))", "natural": "find students with last days on or before alices first day"}
{"canonical": "average height of person", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))", "natural": "what is the average height of a person"}
{"canonical": "person whose birthplace is new york and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "natural": "find me a male born in new york"}
{"canonical": "person that is friends with student whose start date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what people are friends of students who have a start date no earlier than 2004"}
{"canonical": "employee whose end date is larger than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees finishing after 2004"}
{"canonical": "city that is birthplace of person that is logged in", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))", "natural": "what cities were people that are currently online born in"}
{"canonical": "gender that is gender of employee whose employer is not mckinsey", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "what is the gender of employees who dont work for mckinsey"}
{"canonical": "person whose height is 180 cm and that is gender of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))", "natural": "name a person of the same gender as alice who is 180 cm tall"}
{"canonical": "person that employee whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))", "natural": "people who were not friends before 2004"}
{"canonical": "employee whose start date is at least end date of student alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "employees who started working on or after the day alice ended school"}
{"canonical": "person that student whose end date is at most 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "connection to someone who will have graduated before 2004"}
{"canonical": "person whose height is 180 cm and whose university is brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "natural": "who is 180 cm tall and goes to brown university"}
{"canonical": "employee whose start date is larger than birthdate of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))", "natural": "find employees starting after alices birthday"}
{"canonical": "person whose relationship status is relationship status that is relationship status of alice", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice)))", "natural": "which person has a relationship status the same as alice"}
{"canonical": "relationship status that is relationship status of student whose university is not brown university", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "what is the relationship status of students who are not at brown"}
{"canonical": "person whose height is 180 cm and whose height is 180 cm", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "natural": "people whose height is 180 cm"}
{"canonical": "person that is friends with alice and whose gender is male", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "natural": "who are all of alices guy friends"}
{"canonical": "person that is friends with person whose relationship status is single", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "natural": "find the friends of all people who list their relationship status as single"}
{"canonical": "person that student whose start date is not 2004 is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "who is friends with the student who did not start in 2004"}
{"canonical": "person that at least two person is friends with", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "natural": "who has at least two friends"}
{"canonical": "person that is friends with student whose end date is smaller than 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))", "natural": "people that are friends with someone that finished school before 2004"}
