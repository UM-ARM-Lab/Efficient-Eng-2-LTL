{"meeting that has the largest start time": {"denotation": "(list (name en.meeting.30) (name en.meeting.33) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.42) (name en.meeting.45) (name en.meeting.47))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time))))", "paraphrases": ["show me the meeting starting latest in the day", "what meeting begins latest", "what meeting has the latest start time", "meetings with the latest start time"]}, "meeting that is important and whose end time is 10am": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.33) (name en.meeting.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["show me all important meetings that end at 10am", "show me all meetings marked important ending at 10 am"]}, "person that is attendee of more than two meeting": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["what person is an attendee of more than two meetings", "which people will attend two or more meetings", "show me all people who have attended more than two meetings", "people that attend more than two meetings", "who is the person attending  more than two meetings"]}, "location that is location of meeting whose location is greenberg cafe": {"denotation": "(list (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "paraphrases": ["what meeting is at greenberg cafe"]}, "meeting whose date is smaller than jan 2": {"denotation": "(list (name en.meeting.15) (name en.meeting.21) (name en.meeting.22) (name en.meeting.32) (name en.meeting.34) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.44) (name en.meeting.48) (name en.meeting.50) (name en.meeting.51) (name en.meeting.53) (name en.meeting.57) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["show me meetings before january 2nd", "what meeting has an earlier date than jan 2", "meetings held before january 2", "meeting before jan 2", "show me all meetings happening before january 2nd"]}, "meeting whose attendee is not alice": {"denotation": "(list (name en.meeting.10) (name en.meeting.15) (name en.meeting.20) (name en.meeting.27) (name en.meeting.3) (name en.meeting.31) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.50) (name en.meeting.52) (name en.meeting.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string !=) en.person.alice))", "paraphrases": ["show me all meetings that alice is not attending", "meetings that are not attended by alice", "show me any meetings that alice has not attended", "what meeting is alice not attending", "what meeting did alice not attend"]}, "location that is location of at most two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose location is greenberg cafe and whose end time is 10am": {"denotation": "(list (name en.meeting.25) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string end_time) (string =) (time 10 0)))", "paraphrases": ["what meeting is at greenberg cafe and ends at 10am", "meeting at greenberg cafe ends at 1000 am", "meetings in greenberg cafe that end at 10am", "show me all meetings that end at 10am in greenberg cafe", "show me all meetings at greenberg cafe ending at 10 am"]}, "person that is attendee of meeting whose end time is 10am": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0))))", "paraphrases": ["what person is attending a meeting that ends at 10am", "show me all attendees of meetings ending at 10 am", "person who attends the meeting that ends at 10 am", "who is attending the meeting that ends at 10am", "people attending meetings that end at 10am"]}, "10am or 3pm": {"denotation": "(list (time 10 0) (time 15 0))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))", "paraphrases": ["show me all meetings between 10am and 3pm", "schedule a meeting for 10am or 3pm", "is the meeting at 10am or 3pm"]}, "meeting whose start time is 10am and whose end time is 10am": {"denotation": "(list (name en.meeting.22) (name en.meeting.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["what meeting starts at 10am and ends at 10am q", "show me all meetings beginning and ending at 10 am", "show me the meeting that starts and ends at 10 am", "meeting that starts and ends at 10am"]}, "meeting whose date is jan 2 and whose end time is 10am": {"denotation": "(list (name en.meeting.30))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings on january 2nd ending at 10 am", "show all meetings that end at 10am on jan 2", "meeting on jan 2 which ends at 10 am", "meetings on january 2 that end at 10am", "create a meeting for jan 2nd until 10am"]}, "meeting whose length is at least three hours": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.27) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.hour))))", "paraphrases": ["show me all meetings at least three hours long", "meeting is at least 3 hours long", "meetings that are three hours or longer", "what meeting is at least three hours", "what meetings are scheduled to run for 3 hours"]}, "meeting whose date is jan 2 and whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.16) (name en.meeting.19) (name en.meeting.23) (name en.meeting.30) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string attendee) (string =) en.person.alice))", "paraphrases": ["jan 2nd meeting with alice as attendee", "show me any meetings alice has attended on january 2nd", "which january 2nd meetings is alice attenting", "what meeting has a date of jan 2 and has alice attending", "meetings on january 2 that alice attends"]}, "person that is attendee of the most number of meeting": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["who attends the most meetings", "what person attends most meetings", "show me the people who attend the most meetings", "who has attended the most meetings", "person attending the most meetings"]}, "meeting whose end time is larger than end time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.31) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["meetings that end later than the weekly standup meeting", "meeting ends after end time of weekly standup", "show me all meetings ending later than the weekly standup", "which meetings end later in the day than weekly standup", "what meeting has an end time no greater than the end of weekly startup"]}, "meeting whose end time is start time of weekly standup": {"denotation": "(list (name en.meeting.12) (name en.meeting.14) (name en.meeting.19) (name en.meeting.27) (name en.meeting.28) (name en.meeting.35) (name en.meeting.48) (name en.meeting.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time))))", "paraphrases": ["meetings that end at the time when the weekly standup meeting starts", "meeting that ends at start time of weekly standup", "show me all meetings which end at the same time the weekly standup begins", "which meetings end when weekly standup is scheduled to start", "what meeting ends at the start time of weekly standup"]}, "meeting whose end time is 10am and whose length is three hours": {"denotation": "(list (name en.meeting.33))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["show me all 3 hour long meetings that end at 10am", "three hour meeting that ends at 10am", "show me all meetings ending at 10 am which are scheduled to be three hours long", "meetings that are three hours long and end at 10am"]}, "meeting that has at least two location": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose start time is not 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.21) (name en.meeting.23) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.53) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "paraphrases": ["show me all meetings not beginning at 10 am", "what meeting does not start at 10am", "which meetings dont start at 10am", "meetings that do not start at 10am", "meeting does not start at 10am"]}, "meeting that is important and whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.36) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["important meeting on january 2nd", "what important meetings are scheduled for jan 2"]}, "meeting whose start time is smaller than start time of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.25) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.32) (name en.meeting.34) (name en.meeting.35) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.55) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["meeting starts before weekly standup", "meetings that start earlier than the weekly standup meeting", "show me all meetings beginning earlier than the weekly standup", "what meeting has a start time earlier than the weekly standup"]}, "meeting that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.3) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.6) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)))", "paraphrases": ["which meetings are significant", "what are some important meetings", "show me all meetings marked as important", "important meetings", "important meeting"]}, "meeting that has the most number of location": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (string location)))", "paraphrases": ["what meeting has the most amount of locations", "show me meetings with the most locations", "meeting with largest number of locations", "show me the meeting which has happened at the most locations", "meetings held in the most locations"]}, "meeting whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["what meeting is being held at the greenberg cafe", "which meetings are held at greenberg cafe"]}, "meeting whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice))", "paraphrases": ["show me all meetings with alice"]}, "meeting whose attendee is alice and whose end time is 10am": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string end_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings alice has attended which have ended at 10 am", "what meeting ending at 10am is alice attending", "what meeting ends at 10am and alice is attending", "show me all meetings ending at 10am that alice is attending"]}, "location that is location of weekly standup": {"denotation": "(list (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) en.meeting.weekly_standup))", "paraphrases": ["what is the location of the weekly standup"]}, "meeting whose attendee is alice and whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.22) (name en.meeting.24) (name en.meeting.32) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string start_time) (string =) (time 10 0)))", "paraphrases": ["what meeting has alice attending and starts at 10am", "meeting in which alice is attending which starts at 1000 am", "meetings attended by alice that start at 10am", "what meeting is alice attending at 10am", "show me all meetings attended by alice beginning at 10 am"]}, "meeting that has more than two attendee": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose end time is 10am and that is important": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.33) (name en.meeting.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string is_important)))", "paraphrases": ["what important meeting has an end time of 10am", "show me all meetings marked important which end at 10 am", "important meetings that end at 10am"]}, "attendee of weekly standup": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string attendee)))", "paraphrases": ["who has attended the weekly standup meeting", "who attends the weekly standup meeting", "weekly startup attendee", "who is attending weekly standup"]}, "meeting whose start time is at most end time of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.25) (name en.meeting.32) (name en.meeting.35) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.55) (name en.meeting.59) (name en.meeting.6) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["show me all meetings that start no earlier than when the weekly standup meeting ends", "meetings that start earlier than or at the same time as the weekly standup meeting", "meeting that starts no later than end time of weekly standup", "show me all meetings which begin at the same time or earlier than the weekly standup ends", "what meeting start time is at the end of weekly standup"]}, "meeting that has the smallest length": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.24) (name en.meeting.29) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "paraphrases": ["which meeting is the shortest", "what meetings run for the shortest length of time", "what meeting has the smallest length", "what is the shortest meeting", "shortest meeting"]}, "meeting whose length is three hours or one hour": {"denotation": "(list (name en.meeting.11) (name en.meeting.14) (name en.meeting.15) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.24) (name en.meeting.27) (name en.meeting.29) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour))))", "paraphrases": ["show me all meetings which are exactly one hour or exactly three hours long", "show me all meetings that run either three hours or one hour", "what meeting lasts from one to three hours", "meetings that are three hours long or one hour long"]}, "meeting whose date is smaller than date of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.30) (name en.meeting.32) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date)))))", "paraphrases": ["what meeting has a date earlier than weekly startup", "meeting held before the weekly standup meeting", "show me all meetings happening on days before the weekly standup", "what meeting is before weekly standup"]}, "meeting whose length is three hours and that is important": {"denotation": "(list (name en.meeting.2) (name en.meeting.33) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "paraphrases": ["what important meeting has a length of three hours", "important meetings that are three hours long", "show me all meetings three hours long which are marked as important", "three hours long important meeting", "show me all three hour meetings that are important"]}, "meeting whose start time is at most start time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.32) (name en.meeting.34) (name en.meeting.35) (name en.meeting.37) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["show me all meetings that start earlier than the weekly standup meeting", "meetings that start at or before the time of the weekly standup meeting", "what meeting starts at the weekly standup average start time", "show me all meetings that begin no later than the time the weekly standup meeting starts", "meeting starts no later than start time of weekly standup"]}, "meeting whose length is at least length of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string length)))))", "paraphrases": ["which meetings will take as much time as weekly standup", "what meeting is as long or longer than weekly standup", "what meeting has the same length as weekly startup", "show me all meetings the same length or longer than the weekly standup", "meetings that are the same length as or longer than the weekly standup meeting"]}, "meeting whose start time is start time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.16) (name en.meeting.18) (name en.meeting.23) (name en.meeting.26) (name en.meeting.40) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time))))", "paraphrases": ["what meetings have the same start time as the week startup meeting", "meeting starting at time of weekly standup", "what meeting is starting the same time as weekly standup", "show me all meetings starting at the same time as the weekly standup", "which meetings have the same start time as the weekly standup meeting"]}, "meeting whose start time is 10am and whose length is three hours": {"denotation": "(list (name en.meeting.41))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["show me all meetings that start at 10am and last three hours", "what three hour meeting starts at 10am", "show me meetings starting at 10am that take 3 horus", "meetings that are three hours long that start at 10am", "show me all meetings beginning at 10 am which are three hours long"]}, "person that is attendee of the least number of meeting": {"denotation": "(list (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["who has attended the least meetings", "who has attended the least number of meetings", "show me the people attending the most meetings", "person attending least number of meetings", "person that attends the fewest meetings"]}, "meeting whose end time is 10am and whose attendee is alice": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string attendee) (string =) en.person.alice))", "paraphrases": ["show me all meetings which alice has attended that end at 10 am", "what meeting ends at 10am in which alice is attending", "meeting in which alice is attending and ends at 10 am", "show me the meeting alice will attend which ends at 10am"]}, "date of weekly standup": {"denotation": "(list (date 2015 1 3))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date)))", "paraphrases": ["show me the dates of all weekly standup meetings", "what is the date of weekly standup", "show me the dates of the weekly standup meetings", "weekly standup date", "what date is the weekly standup meeting"]}, "meeting whose date is not jan 2": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.14) (name en.meeting.15) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.44) (name en.meeting.47) (name en.meeting.48) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string !=) (date 2015 1 2)))", "paraphrases": ["show me all meetings happening on days other than january 2nd", "what meeting is not on jan 2", "show me all meetings that fall before or after jan 2", "show me meetings not on jan 2", "meetings that are not on january 2"]}, "meeting whose location is greenberg cafe or central office": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.location.greenberg_cafe en.location.central_office)))", "paraphrases": ["what meeting is in either greenberg cage or central office", "show me any meetings located at greenberg cafe or central office", "meetings held at greenberg cafe or central office", "meeting in greenberg cafe or central office", "show me all meetings in greenberg cafe or central office"]}, "meeting that has the smallest date": {"denotation": "(list (name en.meeting.15) (name en.meeting.21) (name en.meeting.22) (name en.meeting.32) (name en.meeting.34) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.44) (name en.meeting.48) (name en.meeting.50) (name en.meeting.51) (name en.meeting.53) (name en.meeting.57) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date))))", "paraphrases": ["show me the meetings scheduled earliest in the month", "what meeting has the earliest date", "which meeting is scheduled on the earliest date"]}, "location that is location of meeting whose length is three hours": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "paraphrases": ["show me the locations of all meetings three hours in length", "location is same as the location of three hours long meeting", "what location is the three hour meeting", "locations of meetings that are three hours long", "where is the threehour long meeting"]}, "meeting whose length is smaller than three hours": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.40) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.hour))))", "paraphrases": ["what meeting has a length smaller than three hours", "meeting that has duration of lesser than three hour", "meetings that are shorter than three hours", "find me a meeting shorter than three hours", "show me all meetings shorter than three hours"]}, "meeting whose length is smaller than three hours or one hour": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.40) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour)))))", "paraphrases": ["what meeting was shorter than three hours", "meetings that are shorter than three hours or shorter than one hour", "what meeting has length shorter than one to three hours", "show me all meetings scheduled to be less than three hours or less than one hour"]}, "meeting that is important and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["what important meeting has a location at greenberg cafe", "important meeting at greenberg cafe", "important meetings at greenberg cafe", "show me all meetings marked as important happening at greenberg cafe", "show me important meetings at greenberg cafe"]}, "meeting that has the least number of attendee": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (string attendee)))", "paraphrases": ["what meeting has the least number of attendees", "which meeting has the fewest attendees", "meeting with least attendees", "what meeting had the fewest people show up", "meetings attended by the smallest number of people"]}, "meeting whose date is at least jan 2": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.4) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.49) (name en.meeting.5) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.58) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["what meeting has a date no later than jan 2", "what meetings are scheduled for a date no earlier than jan 2", "show me all meetings happening on or after january 2nd", "meetings held on or after january 2"]}, "meeting whose start time is at least 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.50) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["show me all meetings that start no earlier than 10am", "meetings that start at or after 10am", "meeting that starts at 10am or earlier", "show me all meetings starting at 10 am or after", "what meeting starts at least at 10am"]}, "meeting whose end time is at least 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["what meeting ends 10am or later", "meetings that end at or after 10 am or at or after 3pm", "what meeting ends at 10am or 3pm"]}, "meeting whose end time is 10am and whose date is jan 2": {"denotation": "(list (name en.meeting.30))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["what meeting has an end time of 10am on jan2", "what meeting ends at 10am on january second", "what meetings on january 2 end at 10am", "show me all meetings on january 2nd which end at 10 am", "show me all meetings that end at 10am on jan 2"]}, "meeting that is important and whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.17) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.32) (name en.meeting.33) (name en.meeting.37) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.6) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "paraphrases": ["what important meeting has alice attending", "important meetings attended by alice", "important meeting with alice as attendee", "show me important meetings with alice", "show me all meetings marked important which are also attended by alice"]}, "location that is location of more than two meeting": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["location of more than two meetings", "what location has more than two meetings", "show me all locations that are used for more than two meetings", "location where more than two meetings are held", "what is the location that more than two meetings will be held at"]}, "meeting whose length is larger than length of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.2) (name en.meeting.22) (name en.meeting.23) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.53) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string length)))))", "paraphrases": ["which meetings will be longer than weekly standup", "what meeting is longer than weekly standup", "meetings that are longer than the weekly startup meeting", "what meeting has a length greater than weekly startup", "show me all meetings scheduled to be longer than the weekly standup meeting"]}, "location that is location of the most number of meeting": {"denotation": "(list (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["location features the largest number of meetings", "what is the location that the most number of meetings will be held", "show me the locations which have the most number of meetings", "which location hosts the most meetings", "what location is most meetings"]}, "person that is attendee of meeting whose start time is 10am": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0))))", "paraphrases": ["who is attending the 10 am meeting", "who is attending the 10sm meeting", "what person is attending the meeting that starts at 10am", "show me all attendees of meetings beginning at 10 am", "people attending meetings that start at 10 am"]}, "person that is attendee of meeting that is important": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important))))", "paraphrases": ["people that attend important meetings", "show me all attendees of meetings marked important", "which person is attending an important meeting", "person who attends important meeting", "who will be attending important meetings"]}, "meeting that has less than two attendee": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose end time is 10am and whose end time is 10am": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["which meetings end at 10am", "show me all meetings beginning at 10 am and all meetings ending at 10 am", "show me all meetings that end at 10am"]}, "person that is attendee of meeting whose location is greenberg cafe": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "paraphrases": ["what person is attending the meeting at greenberg cafe", "who are the attendees for fo the meetings in greenberg cafe", "who is attending the greenberg cafe for the meeting", "people that attend meetings at greenberg cafe", "show me all attendees of meetings at the greenberg cafe"]}, "meeting whose end time is larger than 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.31) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["what meeting ended after 10am", "show me meetings ending after 10am", "meetings that end later than 10am", "meeting ends after 10am", "show me all meetings which end later than 10 am"]}, "meeting that has at least two attendee": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string >=) (number 2)))", "paraphrases": ["meetings attended by two or more people", "meeting which has minimum two attendees", "show me all meetings with two or more people attending", "show me all meetings with at least two people attending", "show me all the meetings that have two or more participants"]}, "meeting whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.32) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.50) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings that begin at 10am", "meeting which starts at 10 am"]}, "meeting whose location is greenberg cafe and that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string is_important)))", "paraphrases": ["show me important meetings at greenberg cafe", "what important meeting is located at greenberg cafe"]}, "meeting that is important and whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.20) (name en.meeting.22) (name en.meeting.32) (name en.meeting.37) (name en.meeting.43) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["what important meeting started at 10am", "show me all meetings marked important beginning at 10 am", "important meeting at 10am", "show me important meetings that start at 10am", "important meetings that start at 10am"]}, "meeting whose end time is smaller than 10am": {"denotation": "(list (name en.meeting.32) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.45) (name en.meeting.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["what meeting ends no earlier than 10am", "show me meetings before 10am", "meetings that end before 10am", "show me all meetings ending before 10 am"]}, "meeting whose location is greenberg cafe and whose length is three hours": {"denotation": "(list (name en.meeting.2) (name en.meeting.33) (name en.meeting.36) (name en.meeting.41) (name en.meeting.57) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["three hour long meeting at greenberg", "which meetings in greenberg cafe will last three hours", "what three hour meeting is at greenberg cafe", "show me all meetings three hours long happening at the greenberg cafe"]}, "meeting whose end time is end time of weekly standup": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time))))", "paraphrases": ["show me all meetings which end at the same time as the weekly standup ends", "meetings that end at the same as the weekly standup meeting", "meeting that ends at end time of weekly standup", "what meeting has and end time the same as weekly startup", "what meetings end at the same time as the weekly roundup meeting"]}, "meeting whose end time is smaller than start time of weekly standup": {"denotation": "(list (name en.meeting.15) (name en.meeting.16) (name en.meeting.18) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["show me all meetings which end earlier than the weekly standup begins", "what meeting has an end time earlier than weekly startup", "what meeting ends before the start of weekly standup", "show me meetings that will end before weekly standup begins", "meetings that end before the weekly standup meeting starts"]}, "meeting whose start time is at most 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["show me meetings starting before 3pm", "meeting starts at 10am or 3pm at the earliest", "show me all meetings beginning at 3 pm at latest", "what meeting has a start time no later than 10am or 3pm"]}, "meeting whose start time is larger than end time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.21) (name en.meeting.23) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.53) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["show me all meetings ending after the weekly standup ends", "meetings that start later than the weekly standup meeting", "meeting whose start time is after end time of weekly standup"]}, "meeting that has the largest date": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.20) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.35) (name en.meeting.47) (name en.meeting.5) (name en.meeting.8) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date))))", "paraphrases": ["what meeting has the later date", "show me the meetings which are latest in the month", "what is the most recent meeting", "which meeting is scheduled on the latest date"]}, "meeting that is important and that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.3) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.6) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "paraphrases": ["show me important meetings", "what is an important meeting", "show me all meetings marked important", "which meetings are important", "select all important meetings"]}, "meeting whose start time is 10am or 3pm": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.47) (name en.meeting.50) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0))))", "paraphrases": ["meeting which starts at 1000 am or 300 pm", "what meetings have a start time of 10 am or 3pm", "meetings that start at 10am or 3pm"]}, "meeting whose start time is at least end time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.50) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["what meeting who starts right right after weekly standup", "show me meetings that start before the weekly standup meeting ends", "show me meetings that start before the weekly standup ends", "show me all meetings which begin after the weekly standup ends", "meetings that start at the same time or after the weekly standup meeting ends"]}, "meeting whose attendee is person that is attendee of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "paraphrases": ["meetings that are attended by people that also attend the weekly standup meeting", "show me all meetings attended by people who have also attended the weekly standup", "show me all meetings that share an attendee with the weekly standup meeting", "meeting shares attendee with weekly standup"]}, "meeting whose length is at most three hours or one hour": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour)))))", "paraphrases": ["what meeting is no greater than one to three hours", "she me all meetings with a duration between 1 and 3 hours", "meetings that are three hours or less or one hour or less", "show me meetings shorter than three hours"]}, "person that is attendee of at most two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose start time is at least 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.50) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["show me meetings starting at 10am or 3pm", "tell me the all meetings begins after 10am or 3pm", "what meeting starts at least at 10am or 3pm", "show me all meetings beginning no later than 10 am or 3 pm"]}, "meeting that has more than two location": {"denotation": null, "formula": null, "paraphrases": []}, "length of weekly standup": {"denotation": "(list (number 1 en.hour))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string length)))", "paraphrases": ["weekly standup duration", "how long is the weekly standup meeting", "show me the length of the weekly standup", "what is the length of weekly startup"]}, "meeting whose location is greenberg cafe and whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.23) (name en.meeting.36) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["what meetings take place on jan 2 in greenberg cafe", "what meeting has a location at greeberg cafe on jan 2", "show me all meetings on january 2nd happening at the greenberg cafe", "show me meetings at greenberg cafe on jan 2"]}, "meeting whose date is jan 2 and whose length is three hours": {"denotation": "(list (name en.meeting.36) (name en.meeting.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["which january 2nd meeting is three hours long", "what three hour meeting is on jan 2", "what meetings are scheduled to run for three hours on jan 2", "show me all meetings on january 2nd which are three hours long"]}, "meeting whose length is at least three hours or one hour": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour)))))", "paraphrases": ["meetings that are three hours or longer or an hour or longer", "what meeting is one hour or longer", "show me all meetings at least one hour or three hours long"]}, "meeting whose end time is 10am and whose start time is 10am": {"denotation": "(list (name en.meeting.22) (name en.meeting.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings that end at 10am and start at 10am", "show me all meetings which begin at 10 am and end at 10 am", "show me meetings that start and end at 10am", "meetings that end at 10am and start at 10am"]}, "location of weekly standup": {"denotation": "(list (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string location)))", "paraphrases": ["where is the weekly standup meeting located"]}, "meeting whose start time is larger than 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.21) (name en.meeting.23) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.53) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["show me meetings starting later than 10am", "meetings that start after 10am or after 3pm", "show me all meetings happening later than 10 am or 3 pm"]}, "person that is attendee of meeting whose attendee is alice": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "paraphrases": ["who is attending the same meeting as alice", "people attending meetings that alice attends", "person attending same meeting as alice", "show me everyone who attended meetings also attended by alice"]}, "meeting whose length is length of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.24) (name en.meeting.29) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string length))))", "paraphrases": ["show me all meetings the same length of the weekly standup", "what meeting is the same length as that of weekly startup", "what meetings have the same duration as the weekly stand up meeting", "meetings that are the same length as the weekly standup meeting"]}, "meeting whose date is larger than jan 2": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.14) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.20) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.31) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.42) (name en.meeting.47) (name en.meeting.5) (name en.meeting.52) (name en.meeting.54) (name en.meeting.58) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["meetings held later than january 2", "what meeting has a date after jan 2", "show me all meetings after january 2nd", "show me meetings happening after jan 2nd"]}, "jan 2 or jan 3": {"denotation": "(list (date 2015 1 2) (date 2015 1 3))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3)))", "paraphrases": ["is this meeting on january 2 or january 3", "find all meetings which begin on january 2nd or january 3rd", "january 2nd or 3rd"]}, "person that is attendee of weekly standup or annual review": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meeting.weekly_standup en.meeting.annual_review)))", "paraphrases": ["who is at the weekly standup or annual review", "person is attendee of weekly standup or annual review", "people that attend the weekly standup meeting or the annual review meeting", "show me all people attending either the weekly standup meeting or annual review"]}, "location that is location of at least two meeting": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["what is the location of the meeting that will have two or more attendees", "what are the areas where two or more meetings take place", "locations that house at least two meetings", "location of at least two meetings is the location", "show me all locations which have had at least two meetings"]}, "meeting whose attendee is attendee of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string attendee))))", "paraphrases": ["meetings attended by people that attend the weekly standup meeting", "meeting share attendee with weekly standup", "show me all meetings attended by people who have also attended the weekly standup meeting", "what meeting had someone who went to weekly standup"]}, "meeting whose start time is larger than 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.21) (name en.meeting.23) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.5) (name en.meeting.53) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.7) (name en.meeting.8) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["what meeting start time is later than 10am", "show me all meetings that start later than 10 am", "meetings that start after 10am", "meeting starts later than 10am"]}, "meeting whose date is jan 2 and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.23) (name en.meeting.36) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["what meeting has a date of jan 2 at greenberg cafe", "show me meetings on jan 2 in greenberg cafe", "show me all meetings on january 2nd at the greenberg cafe", "show me all meetings in greenberg cafe on jan 2"]}, "meeting whose end time is at least 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["find me a meeting that ends 10am or later", "what meeting has an end time of at least 10am", "show me all meetings ending at or after 10 am", "show me all meetings that end by 10am", "meetings that end at or after 10am"]}, "greenberg cafe or central office": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.location.greenberg_cafe en.location.central_office))", "paraphrases": ["location is greenberg cafe or central office", "show me all meetings happening at greenberg cafe or central office"]}, "meeting that has the smallest start time": {"denotation": "(list (name en.meeting.25) (name en.meeting.35) (name en.meeting.39) (name en.meeting.48) (name en.meeting.49) (name en.meeting.51) (name en.meeting.59) (name en.meeting.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time))))", "paraphrases": ["meetings with the earliest start time", "what meeting starts the earliest", "which meeting begins earliest", "what meeting has the earliest start time", "meeting which has shortest start time"]}, "meeting whose attendee is alice and whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string attendee) (string =) en.person.alice))", "paraphrases": ["show me all meetings that alice is attending"]}, "meeting whose end time is at most 10am": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.37) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.45) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.59) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["what meeting ends at most at 10am", "show me all meeting that will end by 10am", "meetings that end at or before 10am", "what meeting ends at 10am or earlier", "show me all meetings ending no later than 10 am"]}, "meeting whose end time is smaller than end time of weekly standup": {"denotation": "(list (name en.meeting.32) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.45) (name en.meeting.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["show me all meetings that end earlier than the week standup meeting ends", "what meeting has an end time smaller than weekly standup", "meeting that ends sooner than weekly standup ends", "meetings that end earlier than the weekly standup meeting"]}, "meeting whose start time is smaller than end time of weekly standup": {"denotation": "(list (name en.meeting.25) (name en.meeting.35) (name en.meeting.39) (name en.meeting.48) (name en.meeting.49) (name en.meeting.51) (name en.meeting.59) (name en.meeting.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["what meeting starts before weekly standup ends", "meetings that start before the weekly standup meeting ends", "what meeting starts earlier than the end time of weekly standup", "meeting starts before end time of weekly standup"]}, "meeting whose attendee is alice and that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.17) (name en.meeting.2) (name en.meeting.21) (name en.meeting.22) (name en.meeting.29) (name en.meeting.32) (name en.meeting.33) (name en.meeting.37) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.6) (name en.meeting.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string is_important)))", "paraphrases": ["what important meetings are attended by alice", "show me all important meetings that alice is attending", "what important meeting is alice attending", "show me all meetings alice has attended marked as important", "important meeting alice is attending"]}, "meeting whose length is three hours and whose attendee is alice": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.33) (name en.meeting.35) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "paraphrases": ["meetings that are attended by alice and are three hours long", "show me all 3 hour meetings with alice", "show me meetings that take 3 hours and are with alice", "what meetings have a length of three hours and alice is attending", "show me all meetings alice is attending which are three hours long"]}, "location that is location of meeting whose start time is 10am": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0))))", "paraphrases": ["what location is the meeting that starts at 10am", "location of meetings that start at 10am", "show me the locations of all meetings beginning at 10 am", "show me meeting locations that start at 10am"]}, "meeting whose location is greenberg cafe and whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.20) (name en.meeting.24) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string start_time) (string =) (time 10 0)))", "paraphrases": ["meeting which starts at 10 am at greenberg cafe", "what meeting has a location at greenberg cafe and starts at 10am", "meetings at greenberg cafe that start at 10am", "what is the meeting that starts at 10 am in greenberg cafe"]}, "person that is attendee of less than two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "average length of meeting": {"denotation": "(list (number 2 en.hour))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length))))", "paraphrases": ["what is the average length of a meeting", "show me average meeting length", "what is the average length of all the meetings", "what is the average length of all meetings", "how long does the average meeting last"]}, "location that is location of meeting whose date is jan 2": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "paraphrases": ["show me the locations of all meetings on january 2", "locations that house meetings on january 2", "location is same as the location of meeting on jan 2", "what is the location of the jan 2 meeting", "where is my jan 2 meeting"]}, "meeting whose length is larger than three hours": {"denotation": null, "formula": null, "paraphrases": []}, "meeting that has the largest length": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.27) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))", "paraphrases": ["show me the meetings which have lasted the longest", "show me the longest meetings", "what is the longest meeting", "what meeting has the longest length", "show me the meetings that are scheduled for longest length of time"]}, "meeting whose location is location that is location of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) en.meeting.weekly_standup)))", "paraphrases": ["show me meetings that share location with the weekly standup meeting", "meeting whose location is same as the  location of weekly standup", "show me all meetings happening at the same location as the weekly standup", "meetings held in the same place as the weekly standup meeting", "what meeting has the same location as weekly standup"]}, "meeting whose end time is at least start time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.17) (name en.meeting.19) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.35) (name en.meeting.4) (name en.meeting.44) (name en.meeting.47) (name en.meeting.48) (name en.meeting.5) (name en.meeting.50) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["meeting ends at least at start time of weekly roundup", "show me meetings that end before the weekly standup starts", "meetings that end at the same time as or later than the start of the weekly standup meeting", "what meeting ends at the start or after the start of weekly standup", "show me all meetings which end at the same time or later than the weekly standup meeting begins"]}, "person that is attendee of meeting whose date is jan 2": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "paraphrases": ["person attending jan 2nd meeting", "show me the attendees for all meetings on jan 2", "which people are attending meetings on january 2", "who is attending the meeting on jan 2", "show me all attendees of meetings on january 2nd"]}, "meeting whose start time is larger than start time of weekly standup": {"denotation": "(list (name en.meeting.17) (name en.meeting.2) (name en.meeting.21) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.42) (name en.meeting.45) (name en.meeting.47) (name en.meeting.7) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["meetings that start after the weekly standup meeting starts", "start time of the meeting is after the start time of weekly standup", "show me the meetings that start later than the weekly standup meeting", "show me all meetings beginning later than the weekly standup"]}, "number of location": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type))))", "paraphrases": ["how many locations house meetings", "what is the number of the location"]}, "meeting whose length is at most length of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.24) (name en.meeting.29) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string length)))))", "paraphrases": ["meeting no longer than duration of weekly standup", "show me all meetings no longer than the weekly standup", "meetings that are the same length or shorter than the weekly standup meeting", "what meeting has the length of most weekly startup meetings"]}, "meeting whose date is larger than jan 2 or jan 3": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.14) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.20) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.31) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.42) (name en.meeting.47) (name en.meeting.5) (name en.meeting.52) (name en.meeting.54) (name en.meeting.58) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3)))))", "paraphrases": ["meetings after january 2 or after january 3", "meeting later than january 2nd or 3rd", "show me meetings after jan 2", "show me all meetings happening after january 2nd or january 3rd", "what meeting has a after jan 2 or 3"]}, "meeting whose end time is 10am and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.25) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["show me meetings ending at 10am in greenberg cafe", "meeting at greenberg cafe which ends at 10 am", "show me all meetings at the greenberg cafe ending at 10 am", "show me all metings in greenberg cafe that end at 10am", "meetings at greenberg cafe that end a 10am"]}, "meeting whose end time is smaller than 10am or 3pm": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.24) (name en.meeting.25) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["what meeting ends before 3pm or 10am", "meetings that end before 10 am or before 3pm", "meeting ends before 10am or 3pm", "what meeting ends earlier than 10am or 3pm"]}, "person that is attendee of meeting whose length is three hours": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "paraphrases": ["who is attending the three hour meeting", "person attending three hour meeting", "show me who is attending three hour meetings", "show me all attendees of meetings three hours long", "people that attend three hour long meetings"]}, "meeting whose end time is at least end time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["what meetings end no later then the weekly standup meeting ends", "meeting which ends at or after the end time of weekly standup", "what meeting ends at the same time as weekly standup or later", "show me all meetings ending at the same time or later than the weekly standup meeting ends", "meetings that end at or after the weekly standup meeting ends"]}, "location that is location of two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "meeting that has the least number of location": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (string location)))", "paraphrases": ["what meeting has the fewest locations", "meeting with fewest locations", "meeting held in the fewest number of locations", "show me the meetings with the least number of different locations", "which meeting has the fewest scheduled locations"]}, "meeting whose date is larger than date of weekly standup": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.20) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.35) (name en.meeting.47) (name en.meeting.5) (name en.meeting.8) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date)))))", "paraphrases": ["what meeting has a later date than weekly standup", "show me all meetings happening after the weekly standup", "meeting occurs on later date than weekly standup", "show me meeting happening after the day of weekly standup"]}, "meeting that has at most two attendee": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string <=) (number 2)))", "paraphrases": ["what meeting has two attendees or less", "meeting that has maximum 2 attendees", "meetings attended by two or fewer people", "show me all meetings that have two or fewer attendees", "show me all meetings which has no more than two attendees"]}, "location that is location of meeting that is important": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important))))", "paraphrases": ["where is the important meeting being held", "what is the location of the important meeting", "show me locations of all meetings which are marked as important", "locations of important meetings"]}, "meeting whose date is at most date of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date)))))", "paraphrases": ["meetings held on or before the weekly standup meeting", "show me meetings before the weekly standup", "show me all meetings happening on the same day or before the weekly standup", "what meeting no later than that of weekly startup"]}, "meeting whose length is larger than three hours or one hour": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.2) (name en.meeting.22) (name en.meeting.23) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.53) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour)))))", "paraphrases": ["meeting longer than one or three hours", "meetings that are longer than three hours or longer than an hour", "show me any meetings scheduled to be longer than one hour or three hours", "show me all meetings that last longer than three hours"]}, "meeting whose date is jan 2 or jan 3": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.23) (name en.meeting.24) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.4) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.58) (name en.meeting.6) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3))))", "paraphrases": ["meeting which is on jan 2 or jan 3", "what meeting is on jan 2 or 3rd", "show me all metings that take place jan 2 or jan 3", "show me all meetings happening on january 2nd or january 3rd", "meetings on january 2 or january 3"]}, "three hours or one hour": {"denotation": "(list (number 1 en.hour) (number 3 en.hour))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.hour) (number 1 en.hour)))", "paraphrases": ["is this meeting three hours long or an hour long", "three or one hours", "show me all meetings scheduled to be three hours or one hour long"]}, "meeting whose end time is at most start time of weekly standup": {"denotation": "(list (name en.meeting.12) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["show me all meetings ending at the same time or earlier than the weekly standup begins", "meeting ends no later than start time of weekly standup", "show me meeting which end before weekly standup", "what meeting has an end time the same as weekly standup", "what is the meeting that take place immediately before the weekly standup"]}, "start time of weekly standup": {"denotation": "(list (time 13 0))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))", "paraphrases": ["when does the weekly standup meeting begin", "when is the weekly standup", "what time does the weekly standup meeting start", "what is the start time for the weekly stand up meeting", "weekly standup start time"]}, "meeting whose end time is at most 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["meeting ends no later than 10am or 3pm", "what meeting ends no later than 10am or 3pm", "meetings that end at or before 10am or at or before 3pm"]}, "weekly standup or annual review": {"denotation": "(list (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meeting.weekly_standup en.meeting.annual_review))", "paraphrases": ["show me any meetings that are either the weekly standup or annual review", "show me all meetings that are either weekly standup or annual review", "when is weekly standup or annual review"]}, "meeting whose location is greenberg cafe and whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.17) (name en.meeting.2) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.33) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string attendee) (string =) en.person.alice))", "paraphrases": ["show me all meetings in greenberg cafe that alice is attending", "meetings attended by alice in greenberg cafe", "show me any meetings which alice has attended and take place at greenberg cafe", "what meeting did alice attend at the greenberg cafe", "what meeting is at greenberg cafe and alice is attending"]}, "meeting whose attendee is alice and whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.16) (name en.meeting.19) (name en.meeting.23) (name en.meeting.30) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["what meeting has alice attending on jan 2", "show me meetings on jan 2 with alice", "show me all meetings alice attended on january 2nd", "meeting on jan 2nd with alice as attendee", "show me all meetings that alice is attending on jan 2"]}, "meeting whose date is date of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.17) (name en.meeting.18) (name en.meeting.24) (name en.meeting.31) (name en.meeting.33) (name en.meeting.37) (name en.meeting.42) (name en.meeting.52) (name en.meeting.54) (name en.meeting.58) (name en.meeting.6) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date))))", "paraphrases": ["what meeting has the same date as weekly startup", "what meetings occur on the same day as weekly standup", "show me all meetings on the same day as the weekly standup meeting", "what meetings are the same day as the weekly standup meeting", "what meetings have the same date as the weekly standup meeting"]}, "meeting whose length is three hours and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.2) (name en.meeting.33) (name en.meeting.36) (name en.meeting.41) (name en.meeting.57) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["show me all meetings three hours long at the greenberg cafe", "three hour meeting at greenberg cafe", "show me all meetings in greenber cafe that will run three hours", "show me meetings that take three hours in greenberg cafe"]}, "meeting whose start time is at most 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.25) (name en.meeting.32) (name en.meeting.35) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.55) (name en.meeting.59) (name en.meeting.6) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["show me all meetings starting at or before 10 am", "meeting which starts at or before 10 am", "show me meetings starting before 10am", "show me all meetings that start no later than 10am", "meetings that start at or before 10am"]}, "meeting whose start time is 10am and whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.32) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.50) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings beginning at 10 am", "what meeting starts at 10am", "meetings that start at 10am", "show me all meeting that begin at 10am", "meeting which starts at 1000 am"]}, "meeting whose start time is 10am and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.20) (name en.meeting.24) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["what meeting has a start time at 10am at greenberg cafe", "show meetings that start at 10am in greenberg cafe", "meeting which starts at 1000 am at greenberg cafe", "meetings in greenberg cafe that start at 10am"]}, "meeting whose attendee is alice or bob": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))", "paraphrases": ["show me all meetings with either bob or alice attending", "show me all meetings attended by either alice or bob", "show me meetings with alice or bob", "alice or bob is an attendee at the meeting", "meetings attended by alice or bob"]}, "meeting whose start time is 10am and whose attendee is alice": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.22) (name en.meeting.24) (name en.meeting.32) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string attendee) (string =) en.person.alice))", "paraphrases": ["show me all meetings alice has attended which begin at 10 am", "meeting featuring alice as attendee starting at 10am", "show me all 10am meetings that alice is attending", "show me meetings at 10am with alice"]}, "meeting whose length is three hours and whose date is jan 2": {"denotation": "(list (name en.meeting.36) (name en.meeting.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["three hour meeting on january 2nd", "show me three hour meetings on jan 2", "show me all meetings on january 2nd which are also 3 hours long", "meetings on january 2 that are three hours long", "show me all three hour meetings on jan 2"]}, "meeting whose length is three hours and whose length is three hours": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.27) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["show me all meetings scheduled for three hourse", "show me all meetings lasting for three hours", "three hour meeting", "show me meetings that take 3 hours"]}, "number of person": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["how many attendees are there for this meeting", "what is the number of the person", "how many people attended meetings"]}, "meeting whose start time is smaller than 10am": {"denotation": "(list (name en.meeting.25) (name en.meeting.35) (name en.meeting.39) (name en.meeting.48) (name en.meeting.49) (name en.meeting.51) (name en.meeting.59) (name en.meeting.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (time 10 0))))", "paraphrases": ["meetings starting later than 10am", "show me all meetings starting earlier than 10 am", "show all meetings that start ealier than 10am", "what meeting starts earlier than 10am", "meetings that start before 10am"]}, "location that is location of meeting whose attendee is alice": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "paraphrases": ["what location is the meeting who has alice attending", "show me meeting locations with alice", "locations of meetings attended by alice", "show me the location of all meetings attended by alice", "what is the location of the meeting that alice is attending"]}, "number of meeting": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["how many meetings are scheduled", "how many meetings are there", "what is the number of the meeting"]}, "alice or bob": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob))", "paraphrases": ["show me any meetings that alice or bob have attended"]}, "meeting whose start time is 10am and that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.20) (name en.meeting.22) (name en.meeting.32) (name en.meeting.37) (name en.meeting.43) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "paraphrases": ["what important meeting has a start time at 10am", "what meetings are imporant and start at 10am", "show me all meetings labeled as important that start at 10 am", "what important meetings start at 10am", "which important meeting starts at 10 in the morning"]}, "location that is location of the least number of meeting": {"denotation": "(list (name en.location.central_office))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["what is the location of the meting with least number of attendees", "show me all meetings which happened at the same location as the least number of meetings", "what location are the fewest meetings held", "places that house at least one meeting", "show me locations with the fewest meetings"]}, "meeting whose date is jan 2 and that is important": {"denotation": "(list (name en.meeting.11) (name en.meeting.36) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string is_important)))", "paraphrases": ["show me all important meetings on jan 2", "show me important meetings on jan 2"]}, "location that is location of weekly standup or annual review": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meeting.weekly_standup en.meeting.annual_review)))", "paraphrases": ["locations of the weekly standup meeting or annual review meeting", "show me where the weekly standup and annual review is happening", "where will weekly standup and annual review take place", "location same as weekly meeting or annual review", "what location is weekly standup and annual review"]}, "end time of weekly standup": {"denotation": "(list (time 10 0))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))", "paraphrases": ["weekly standup end time", "what is the end time of weekly standup", "what time does the weekly standup meeting end", "what time does the weekly stand up end"]}, "location that is location of less than two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "location that is not location of weekly standup": {"denotation": "(list (name en.location.central_office))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string !=) en.meeting.weekly_standup))", "paraphrases": ["what location is not the same as weekly standup", "locations that do not house the weekly standup meeting", "what location does not hold the weekly standup meeting", "location different from location of weekly standup", "show me all locations which do not host the weekly standup"]}, "meeting whose length is three hours and whose start time is 10am": {"denotation": "(list (name en.meeting.41))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["show me meetings that take 3 hours and start at 10am", "show me all meetings lasting three hours beginning at 10 am", "meeting that starts at 10am and ends at 1pm", "show me all three hour meetings that begin at 10am"]}, "meeting that has the most number of attendee": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (string attendee)))", "paraphrases": ["which meeting is attended by the most people", "show me the meetings with the most attendees", "meeting with largest number of attendees", "which meeting has the most people scheduled to attend", "what meeting has the most attendees"]}, "person that is attendee of weekly standup": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) en.meeting.weekly_standup))", "paraphrases": ["what person is attending weekly startup", "show me all attendees of the weekly standup meeting", "person who attends weekly standup", "who attends weekly standup"]}, "meeting that has less than two location": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string <) (number 2)))", "paraphrases": ["what meeting has less than two locations", "meetings held in less than two locations", "show me all meetings which have only one location", "show me meetings at fewer than two locations", "meeting at a single location"]}, "person that is attendee of at least two meeting": {"denotation": "(list (name en.person.alice) (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type))))", "paraphrases": ["person attending at least two meetings", "people that attend at least two meetings", "who are the people attending at least two different meetings", "what person is an attendee of at least two meetings", "show me all people who have attended at least two meetings"]}, "meeting whose date is at least jan 2 or jan 3": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.4) (name en.meeting.42) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.49) (name en.meeting.5) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.58) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3)))))", "paraphrases": ["show me all meetings beginning on or after january 2nd", "what meeting has a date of jan 2 or jan 3", "meetings that are on or before january 3", "meeting is no later than january 2nd or 3rd"]}, "meeting whose end time is 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.17) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.25) (name en.meeting.26) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.4) (name en.meeting.40) (name en.meeting.44) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0))))", "paraphrases": ["meeting ends at 10 am or 3 pm", "show me all meetings ending at 10 am or 3 pm", "show meetings that end at 10am or 3pm", "what meetings end at 10am or 3pm", "meetings that end at 10am or 3pm"]}, "meeting whose date is jan 2 and whose start time is 10am": {"denotation": "(list (name en.meeting.11) (name en.meeting.19) (name en.meeting.43) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string start_time) (string =) (time 10 0)))", "paraphrases": ["what meeting is on jan 2 at 10am", "show me the meeting that starts at 10 am on january 2", "meeting which starts at 10 am on jan 2", "show me all meetings on january 2nd beginning at 10 am"]}, "meeting whose date is at most jan 2 or jan 3": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3)))))", "paraphrases": ["meetings held before january 3", "what meeting is on or before jan 2 or 3rd", "meeting which is on jan 3 or before", "show me all meeting that take place by jan 3", "show me all meetings which are scheduled no later than january 3"]}, "meeting whose date is at most jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.30) (name en.meeting.32) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["what meeting will take place no later than jan 2", "meetings on or before january 2", "show me all meetings happening on or before january 2nd", "what meeting was on or before jan 2", "what meeting is on jan 2 or earlier"]}, "meeting whose location is location of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string location))))", "paraphrases": ["show me meetings that have the same location as weekly startup", "meetings held in the same location as the weekly standup meeting", "show me all meetings at the same location as the weekly standup", "meeting at location of weekly standup", "what meeting is at the same location as weekly standup"]}, "person that is not attendee of weekly standup": {"denotation": "(list (name en.person.bob))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string !=) en.meeting.weekly_standup))", "paraphrases": ["show me all of the people who did not attend the weekly standup meeting", "show me who is not at the weekly standup", "what person is not attending the weekly standup meeting", "who is not an attendee of weekly standup", "people that do not attend the weekly standup meeting"]}, "meeting whose date is at least date of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.14) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.20) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.31) (name en.meeting.33) (name en.meeting.35) (name en.meeting.37) (name en.meeting.42) (name en.meeting.47) (name en.meeting.5) (name en.meeting.52) (name en.meeting.54) (name en.meeting.58) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string date)))))", "paraphrases": ["meeting which is on the date of first weekly standup", "show me meetings after the weekly standup day", "show me all meetings happening on or after the date of the weekly standup", "show me all meetings that start no earlier than the weekly standup meeting", "meetings held on the same day as or after the weekly standup meeting"]}, "meeting whose length is three hours and whose end time is 10am": {"denotation": "(list (name en.meeting.33))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["show me all meetings three hours long which end at 10 am", "meeting starts at 700 am and ends at 000 am", "show me all three hour meetings that end at 10am", "meetings ending at 10 am that are three hours long"]}, "meeting whose length is three hours": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.27) (name en.meeting.33) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["meetings that are three hours long", "show me all meetings three hours long", "find me a meeting that is three hours long", "show me meetings that last three hours"]}, "meeting whose length is at most three hours": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.hour))))", "paraphrases": ["show me all meetings scheduled to run for 3 hours", "show me all meetings less than three hours long", "meetings that are three hours long or less", "show me meetings shorter than 3 hours"]}, "total length of meeting": {"denotation": "(list (number 6 en.hour))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length))))", "paraphrases": ["duration of meeting", "how long is the meeting", "what is the length of the meeting", "how long is this meeting"]}, "location that is location of weekly standup and that is location of weekly standup": {"denotation": "(list (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) en.meeting.weekly_standup) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) en.meeting.weekly_standup))", "paraphrases": ["what is the location of weekly startup", "where is the weekly standup"]}, "meeting whose start time is end time of weekly standup": {"denotation": "(list (name en.meeting.11) (name en.meeting.12) (name en.meeting.19) (name en.meeting.20) (name en.meeting.22) (name en.meeting.24) (name en.meeting.32) (name en.meeting.37) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.50) (name en.meeting.52) (name en.meeting.55) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time))))", "paraphrases": ["show me all meetings which begin at the same time the weekly standup ends", "show me all meetings that begin at the time the weekly standup meeting ends", "meeting that starts when the weekly standup meeting ends", "what meeting starts when weekly standup ends", "what meeting has a start time at the end time of weekly standup"]}, "meeting whose location is not greenberg cafe": {"denotation": "(list (name en.meeting.10) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.16) (name en.meeting.18) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.35) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.47) (name en.meeting.49) (name en.meeting.50) (name en.meeting.53) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string !=) en.location.greenberg_cafe))", "paraphrases": ["meetings that are not held at greenberg cafe", "what meeting is not located at greenberg cafe", "show me all meetings not happening at greenberg cafe", "show me meetings not at greenberg cafe", "meeting is not at greenberg cafe"]}, "meeting whose start time is smaller than 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.35) (name en.meeting.37) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["what meeting starts earlier than 10am or 3pm", "what meeting starts before 10am or 3pm", "meetings that start before 10am or before 3pm", "meeting starts before 10am or 3pm", "show me all meetings which begin earlier than 10 am or 3 pm"]}, "meeting whose date is jan 2 and whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.16) (name en.meeting.19) (name en.meeting.23) (name en.meeting.30) (name en.meeting.36) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["show me meetings on jan 2", "january 2nd meeting", "what meeting is on jan 2", "show me all meetings on jan 2", "show me all meetings happening on january 2nd"]}, "meeting that has two location": {"denotation": null, "formula": null, "paraphrases": []}, "person that is attendee of weekly standup and that is attendee of weekly standup": {"denotation": "(list (name en.person.alice))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) en.meeting.weekly_standup) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string attendee)) (string =) en.meeting.weekly_standup))", "paraphrases": ["who is the person attending the weekly stand up meeting", "what person is attending weekly standup", "what person attended weekly standup"]}, "meeting that is important and whose length is three hours": {"denotation": "(list (name en.meeting.2) (name en.meeting.33) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string is_important)) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["show me the important meetings that last three hours", "important meeting with three hour duration", "show me any meetings labeled as important which are also three hours long", "what important meeting has a length of three hours"]}, "person that is attendee of two meeting": {"denotation": null, "formula": null, "paraphrases": []}, "meeting whose start time is at least start time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.2) (name en.meeting.21) (name en.meeting.23) (name en.meeting.26) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.33) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.40) (name en.meeting.42) (name en.meeting.45) (name en.meeting.47) (name en.meeting.54) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string start_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["meetings that start later than or at the same time as the weekly standup meeting", "show meetings that start no earlier than the weekly startup meeting", "show me all meetings which start at the same time or later than the weekly standup", "meeting which starts before the start time of weekly standup"]}, "meeting whose end time is not 10am": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "paraphrases": ["meetings that do not end at 10am", "show me all meetings not ending at 10 am", "show me meetings which do not conclude at 10am", "meeting that does not end at 10am", "what meeting doesnt end at 10am"]}, "meeting that has the smallest end time": {"denotation": "(list (name en.meeting.32) (name en.meeting.37) (name en.meeting.39) (name en.meeting.41) (name en.meeting.43) (name en.meeting.45) (name en.meeting.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time))))", "paraphrases": ["what meeting ends ealiest in the day", "meeting of smallest duration", "what meeting has the shortest time", "meetings that end the earliest", "which meeting has the earliest end time"]}, "meeting that has two attendee": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) (number 2)))", "paraphrases": ["meetings attended by two people", "show me all meetings with two attendees", "show me all meetings that have two attendees", "two attendees are at the meeting", "show me meetings that have two attendees"]}, "meeting whose end time is larger than 10am or 3pm": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.3) (name en.meeting.31) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.38) (name en.meeting.4) (name en.meeting.42) (name en.meeting.44) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (time 10 0) (time 15 0)))))", "paraphrases": ["show me all meetings ending after 10 am or 3 pm", "meetings that end later than 10am or later than 3pm", "what meeting has fan end time after 10am or 3pm", "which meetings end later than 10 in the morning or 3 in the afternoon"]}, "meeting whose attendee is alice and whose length is three hours": {"denotation": "(list (name en.meeting.14) (name en.meeting.2) (name en.meeting.33) (name en.meeting.35) (name en.meeting.4) (name en.meeting.41) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "paraphrases": ["show me all meetings attended by alice which are three hours long", "meetings attended by alice that are three hours long", "show me all three hour meetings that alice is attending", "three hour meeting with alice as attendee", "what three hour meeting has alice attending"]}, "meeting whose length is smaller than length of weekly standup": {"denotation": null, "formula": null, "paraphrases": []}, "meeting that has at most two location": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.14) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.2) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.27) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.33) (name en.meeting.34) (name en.meeting.35) (name en.meeting.36) (name en.meeting.37) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.58) (name en.meeting.59) (name en.meeting.6) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string <=) (number 2)))", "paraphrases": ["meetings held in two or fewer locations", "meeting with no more than 2 locations", "what meeting has two locations", "what meetings have no more than two different locations", "show me all meetings that have at most two locations"]}, "meeting whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.16) (name en.meeting.19) (name en.meeting.23) (name en.meeting.30) (name en.meeting.36) (name en.meeting.4) (name en.meeting.43) (name en.meeting.45) (name en.meeting.46) (name en.meeting.49) (name en.meeting.55) (name en.meeting.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["show me meetings for jan 2", "show the meeting on jan 2", "meetings on january 2"]}, "meeting whose attendee is alice and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.17) (name en.meeting.2) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.33) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["meetings at greenberg cafe attended by alice", "show me all meetings alice has attended at the greenberg cafe", "what meeting is located at greenberg cafe and alice will be attending", "find the meeting with alice at greenberg cafe"]}, "meeting whose start time is 10am and whose date is jan 2": {"denotation": "(list (name en.meeting.11) (name en.meeting.19) (name en.meeting.43) (name en.meeting.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "paraphrases": ["show me all meetings that start at 10am on jan 2", "what meeting starts at 10am on jan 2", "meeting on january 2nd at 10am", "show me any meetings on january 2 beginning at 10 am"]}, "meeting whose end time is at most end time of weekly standup": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.32) (name en.meeting.33) (name en.meeting.37) (name en.meeting.39) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.45) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.59) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string end_time)))))", "paraphrases": ["show me the meetings which end no later than the weekly standup ends", "meetings that end at the same time as or before the weekly standup meeting ends", "show me meetings that end before the weekly standup", "what meeting has the same end time as that of weekly standup", "show me all meetings that end at the same time or earlier than the weekly standup meeting"]}, "meeting whose end time is 10am": {"denotation": "(list (name en.meeting.21) (name en.meeting.22) (name en.meeting.25) (name en.meeting.29) (name en.meeting.30) (name en.meeting.33) (name en.meeting.40) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "paraphrases": ["meetings that end at 10am", "which meetings are scheduled to end at 10am", "show me any meetings which end at 10 am"]}, "meeting whose date is smaller than jan 2 or jan 3": {"denotation": "(list (name en.meeting.11) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.19) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.30) (name en.meeting.32) (name en.meeting.34) (name en.meeting.36) (name en.meeting.38) (name en.meeting.39) (name en.meeting.4) (name en.meeting.40) (name en.meeting.41) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.49) (name en.meeting.50) (name en.meeting.51) (name en.meeting.53) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.59) (name en.meeting.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 1 3)))))", "paraphrases": ["what meetings date is earlier than jan 2 or 3rd", "meetings held before january 2 or january 3", "show me meetings before jan 3", "show me all meetings happening before january 2nd or january 3rd"]}, "meeting whose length is not three hours": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.12) (name en.meeting.13) (name en.meeting.15) (name en.meeting.16) (name en.meeting.17) (name en.meeting.18) (name en.meeting.19) (name en.meeting.20) (name en.meeting.21) (name en.meeting.22) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.28) (name en.meeting.29) (name en.meeting.3) (name en.meeting.30) (name en.meeting.31) (name en.meeting.32) (name en.meeting.34) (name en.meeting.37) (name en.meeting.40) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.47) (name en.meeting.48) (name en.meeting.49) (name en.meeting.5) (name en.meeting.50) (name en.meeting.51) (name en.meeting.52) (name en.meeting.53) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.6) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string length) (string !=) (number 3 en.hour)))", "paraphrases": ["what meeting is not three hours", "meetings that are not three hours long", "show me all meetings with lengths that either less or more than three hours", "what meeting was shorter or longer than three hours", "show me all meetings which are either shorter or longer than three hours"]}, "meeting whose end time is larger than start time of weekly standup": {"denotation": "(list (name en.meeting.10) (name en.meeting.11) (name en.meeting.13) (name en.meeting.17) (name en.meeting.23) (name en.meeting.24) (name en.meeting.26) (name en.meeting.4) (name en.meeting.44) (name en.meeting.47) (name en.meeting.5) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.annual_review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.meeting.weekly_standup (string start_time)))))", "paraphrases": ["meeting that starts later than start of weekly standup", "meetings that end after the weekly startup meeting starts", "show me all meetings that end after the weekly stand up meeting starts", "what meeting has an end time greater than weekly standup", "show me all meetings which end later than the weekly standup begins"]}, "meeting whose location is greenberg cafe and whose location is greenberg cafe": {"denotation": "(list (name en.meeting.11) (name en.meeting.15) (name en.meeting.17) (name en.meeting.2) (name en.meeting.20) (name en.meeting.23) (name en.meeting.24) (name en.meeting.25) (name en.meeting.26) (name en.meeting.3) (name en.meeting.33) (name en.meeting.36) (name en.meeting.37) (name en.meeting.40) (name en.meeting.41) (name en.meeting.42) (name en.meeting.43) (name en.meeting.44) (name en.meeting.45) (name en.meeting.46) (name en.meeting.48) (name en.meeting.5) (name en.meeting.51) (name en.meeting.52) (name en.meeting.54) (name en.meeting.55) (name en.meeting.56) (name en.meeting.57) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9) (name en.meeting.weekly_standup))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string location) (string =) en.location.greenberg_cafe))", "paraphrases": ["what meetings take place in greenbug cafe", "show me meetings at greenberg cafe", "what meetings are located at greenberg cafe", "show me all meetings located at greenberg cafe"]}, "location that is location of meeting whose end time is 10am": {"denotation": "(list (name en.location.central_office) (name en.location.greenberg_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.location) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string location)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0))))", "paraphrases": ["what location is the meeting that ends at 10am", "where are the meetings ending at 10am going to be held", "show me all locations which have meetings ending at 10 am", "locations of meetings that end at 10am", "location is same as location of meeting ends at 10 am"]}, "meeting that has the largest end time": {"denotation": "(list (name en.meeting.10) (name en.meeting.13) (name en.meeting.17) (name en.meeting.23) (name en.meeting.26) (name en.meeting.4) (name en.meeting.44) (name en.meeting.7) (name en.meeting.8) (name en.meeting.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meeting) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string end_time))))", "paraphrases": ["what meeting has the longest time", "meetings with the latest end time", "show me the meetings with the latest end times", "meeting which has longest end time", "show me the meeting that has the latest end time"]}}