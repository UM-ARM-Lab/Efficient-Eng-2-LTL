{"canonical": "article that the most number of article cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what article has the most number of articles cited"}
{"canonical": "person that is not author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "natural": "person who has not published article in multivariate data analysis"}
{"canonical": "person that is not author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "natural": "what person is not the author of multivariate data analysis"}
{"canonical": "article that two article cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "article cited by two articles"}
{"canonical": "article that not cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string !=) en.article.multivariate_data_analysis))", "natural": "articles that do not cite multivariate data analysis"}
{"canonical": "article whose venue is annals of statistics and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "articles published in the annals of statistics citing multivariate data analysis"}
{"canonical": "article that has the smallest publication date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date))))", "natural": "article that has the smallest publication date"}
{"canonical": "article that has at most two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string <=) (number 2)))", "natural": "article that has at most two author"}
{"canonical": "article that cites article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "article citing an article citing multivariate data analysis"}
{"canonical": "venue that is venue of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what venue has fewer than two articles"}
{"canonical": "venue that is venue of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "publisher of article citing multivariate data analysis"}
{"canonical": "article that won an award and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "natural": "article written by efron that won an award"}
{"canonical": "person that is not author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "natural": "writers who didnt write multivariate data analysis"}
{"canonical": "article that cites the most number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "article that cites the most number of article"}
{"canonical": "article that cites article whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "natural": "articles that cite articles published in annals of statistics"}
{"canonical": "article that article whose author is efron cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "what article is cited by an efron article"}
{"canonical": "article that cites article whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "natural": "what article cites another article with a publication date of 2004"}
{"canonical": "article that has more than two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "natural": "article with more than two venues"}
{"canonical": "venue that is venue of article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "publications containing articles that cite multivariate data analysis"}
{"canonical": "article that cites article that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "natural": "articles that cite awardwinning articles"}
{"canonical": "article whose venue is annals of statistics and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "what article is in annals of statistics and is cited by multivariate data analysis"}
{"canonical": "article whose publication date is 2004 and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "natural": "efron articles published in 2004"}
{"canonical": "article that has the most number of venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string venue)))", "natural": "articles published in the most venues"}
{"canonical": "article whose author is efron or lakoff", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.efron en.person.lakoff)))", "natural": "find an article by efron or lakoff"}
{"canonical": "article whose venue is annals of statistics and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "articles found in annals of statistics"}
{"canonical": "article that article that cites multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "article that cites multivariate data analysis"}
{"canonical": "venue that is venue of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "which venue is of less than two article"}
{"canonical": "number of venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type))))", "natural": "number of publications"}
{"canonical": "article whose publication date is publication date of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date))))", "natural": "articles published on the same day as multivariate data analysis"}
{"canonical": "article whose publication date is smaller than publication date of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "natural": "articles published before multivariate data analysis"}
{"canonical": "venue that is venue of at most two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "venue of at most two article"}
{"canonical": "article whose publication date is smaller than 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "what article was published before 2010"}
{"canonical": "article that has the largest publication date", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date))))", "natural": "articles published most recently"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "what article citing multivariate data analysis was in annals of statistics"}
{"canonical": "article whose venue is annals of statistics or computational linguistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics)))", "natural": "what article is about a venue of annals of statistics or computational linguistics"}
{"canonical": "article whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron))", "natural": "articles by efron"}
{"canonical": "article that cites article that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "natural": "awarded articles"}
{"canonical": "article that won an award and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "natural": "what article written by efron won an award"}
{"canonical": "person that is not author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "natural": "person who is not author of multivariate data analysis"}
{"canonical": "article that has the most number of author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string author)))", "natural": "articles written by the most writers"}
{"canonical": "venue that is venue of at most two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "name a venue of no more than two articles"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "which is the article that cites multivariate data analysis that was published in the annals of statistics"}
{"canonical": "article whose venue is venue that is venue of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis)))", "natural": "articles that do not appear in the same publications as multivariate data analysis"}
{"canonical": "article whose publication date is at least publication date of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "natural": "articles published on or after the publication date of multivariate data analysis"}
{"canonical": "article whose venue is not annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string !=) en.venue.annals_of_statistics))", "natural": "find an article not in annals of statistics"}
{"canonical": "venue that is venue of more than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what is the venue that is mentioned in more than two articles"}
{"canonical": "article that article that cites multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "name an article about multivariate data analysis"}
{"canonical": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "natural": "writer of multivariate data analysis"}
{"canonical": "person that is author of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "author citing multivariate data analysis in article"}
{"canonical": "article that cites article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "what article cites articles about multivariate data analysis"}
{"canonical": "article whose publication date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "find an article published in 2004 or later"}
{"canonical": "article that cites multivariate data analysis and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "article that cites the multivariate data analysis article"}
{"canonical": "article whose publication date is 2004 and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "natural": "what article written by efron has a publication date of 2004"}
{"canonical": "article that cites multivariate data analysis and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "find an article that cites multivariate data analysis"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "articles about a citys annals of statistics"}
{"canonical": "person that is not author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "natural": "who has not written a multivariate data analysis"}
{"canonical": "article that has two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (number 2)))", "natural": "find an article with two authors"}
{"canonical": "article that won an award and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "what article cited by multivariate data analysis won an award"}
{"canonical": "person that is author of article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "which authors cite multivariate data analysis in their articles"}
{"canonical": "article that multivariate data analysis cites and whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string publication_date) (string =) (date 2004 -1 -1)))", "natural": "article that cites multivariate data analysis and whose publication date is 2004"}
{"canonical": "article whose publication date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "natural": "what are some articles with publications dates between 2004 and 2010"}
{"canonical": "article whose author is efron and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string author) (string =) en.person.efron))", "natural": "articles written by efron"}
{"canonical": "article that cites less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what article has less than two citations"}
{"canonical": "article that multivariate data analysis cites and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "name an article about multivariate data analysis in the annals of statistics"}
{"canonical": "article that cites multivariate data analysis and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "what article discusses the multivariate data analysis of cities"}
{"canonical": "person that is author of the least number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "author with the least number of articles"}
{"canonical": "venue that is venue of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "venues of articles cited by multivariate data analysis"}
{"canonical": "article that has two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "natural": "articles published in multiple places"}
{"canonical": "article that cites multivariate data analysis and whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string publication_date) (string =) (date 2004 -1 -1)))", "natural": "what article published in 2004 cited multivariate data analysis"}
{"canonical": "article whose venue is annals of statistics or computational linguistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics)))", "natural": "articles published in annals of statistics or computational linguistics"}
{"canonical": "article that article whose author is efron cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "the article cites that the author is efron"}
{"canonical": "person that is author of article whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "natural": "name an author whose publication date is 2004"}
{"canonical": "person that is author of the most number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what author has written the most articles"}
{"canonical": "article that at least two article cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "articles cited by two or more articles"}
{"canonical": "person that is author of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "name an author of an article about multivariate data analysis"}
{"canonical": "venue that is venue of article that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "natural": "what venue is about an article that won an award"}
{"canonical": "person that is author of article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "author of the article that cites multivariate data analysis"}
{"canonical": "article that has more than two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >) (number 2)))", "natural": "article by three or more authors"}
{"canonical": "article that cites article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "what article cites an article that cites multivariate data analysis"}
{"canonical": "article whose publication date is 2004 and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "find an article published in 2004 in annals of statistics"}
{"canonical": "article whose author is efron and whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string publication_date) (string =) (date 2004 -1 -1)))", "natural": "article published by efron in 2004"}
{"canonical": "person that is author of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "who has authored fewer than two articiles"}
{"canonical": "article whose publication date is not 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string !=) (date 2004 -1 -1)))", "natural": "what article does not have a publication date of 2004"}
{"canonical": "article that cites the most number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "article that references the most number of articles"}
{"canonical": "article whose publication date is at least 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "articles published 2004 or more recent"}
{"canonical": "article that has more than two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "natural": "what article has over two venues"}
{"canonical": "article that has the most number of author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string author)))", "natural": "what article has the fewest authors"}
{"canonical": "article whose publication date is at most 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "natural": "article whose publication date is at most 2004"}
{"canonical": "article whose publication date is 2004 and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "articles published in 2004 cited in multivariate data analysis"}
{"canonical": "article that multivariate data analysis cites and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string author) (string =) en.person.efron))", "natural": "what article by efron cites multivariate data analysis"}
{"canonical": "article that has more than two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "natural": "what article has over two venues"}
{"canonical": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "natural": "writer of multivariate data analysis"}
{"canonical": "article that article whose publication date is 2004 cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "natural": "articles about cities published after 2004"}
{"canonical": "person that is author of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "author of only one article"}
{"canonical": "article whose venue is annals of statistics and that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "natural": "what article won an award and whose venue is annals and statistics"}
{"canonical": "article whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "what are some articles about annals of statistics"}
{"canonical": "article whose author is efron or lakoff", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.efron en.person.lakoff)))", "natural": "articles written by efron or lakoff"}
{"canonical": "person that is author of at least two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "which author has published at least two articles"}
{"canonical": "person that is author of article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "who is the author of an article citing multivariate data analysis"}
{"canonical": "article whose publication date is 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "natural": "articles published in 2004 or 2010"}
{"canonical": "article that cites multivariate data analysis and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "articles citing multivariate data analysis and cited by multivariate data analysis"}
{"canonical": "article that article whose author is efron cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "name an article by the author efron"}
{"canonical": "article that has at least two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >=) (number 2)))", "natural": "article with minimum two venue"}
{"canonical": "venue that is venue of multivariate data analysis and that is venue of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis))", "natural": "what publications contain multivariate data analysis"}
{"canonical": "article whose author is efron and that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "natural": "awardwinning articles by efron"}
{"canonical": "article whose author is efron and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "what efron article was cited by multivariate data analysis"}
{"canonical": "article that has the least number of venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string venue)))", "natural": "what article has the least number of venues"}
{"canonical": "person that is author of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "author of lees than two articles"}
{"canonical": "article that cites the least number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "find the article with the fewest citations"}
{"canonical": "article that article whose author is efron cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "article cited by article written by efron"}
{"canonical": "article that won an award and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "award winning article that cites multivariate data analysis"}
{"canonical": "article that has the least number of venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string venue)))", "natural": "articles that has the minimum number of venues stated"}
{"canonical": "person that is author of article whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "natural": "authors of articles published in annals of statistics"}
{"canonical": "article that cites the most number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "which article cites the most articles"}
{"canonical": "person that is author of at least two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "author who have written two or more articles"}
{"canonical": "article that has the least number of author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string author)))", "natural": "articles with the least number of authors"}
{"canonical": "article that has at least two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >=) (number 2)))", "natural": "find an article with two or more authors"}
{"canonical": "article that cites article whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "articles that cities articles by efron"}
{"canonical": "person that is author of article whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "what articles are written by efron"}
{"canonical": "venue that is venue of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "name a publication containing an article about multivariate data analysis"}
{"canonical": "person that is author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "natural": "who is the author of multivariate data analysis article"}
{"canonical": "venue that is venue of two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "publication that two articles are published in"}
{"canonical": "venue that is not venue of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string !=) en.article.multivariate_data_analysis))", "natural": "what is a venue that is not multivariate data analysis related"}
{"canonical": "article whose publication date is 2004 and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "what articles publication date is in 2004 and cites multivariate data analysis"}
{"canonical": "article whose publication date is larger than publication date of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "natural": "articles published after multivariate data analysis"}
{"canonical": "article that multivariate data analysis cites and whose publication date is 2004", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string publication_date) (string =) (date 2004 -1 -1)))", "natural": "article cited by multivariate data analysis and published in 2004"}
{"canonical": "article that cites article whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "natural": "article that cites article whose author is efron"}
{"canonical": "article whose author is efron and that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string cites) (string =) en.article.multivariate_data_analysis))", "natural": "efron articles citing multivariate data analysis"}
{"canonical": "article whose venue is annals of statistics or computational linguistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics)))", "natural": "find an article in either annals of statistics or computational linguistics"}
{"canonical": "venue that is venue of article that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "natural": "venue that won an award based on the article"}
{"canonical": "article that has at least two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >=) (number 2)))", "natural": "what article has at least two authors"}
{"canonical": "annals of statistics or computational linguistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics))", "natural": "list articles on annals of statistics or computational linguistics"}
{"canonical": "article that has at most two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string <=) (number 2)))", "natural": "article that has maximum two venues"}
{"canonical": "venue that is venue of more than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what venue is of more than two articles"}
{"canonical": "venue that is venue of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "venue of article that cites multivariate data analysis"}
{"canonical": "article that cites two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "which articles cite two articles"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "articles in the annals of statistics that cite multivariate data analysis"}
{"canonical": "venue that is venue of the most number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "publication that has included the most articles"}
{"canonical": "article that has two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (number 2)))", "natural": "what article has two authors"}
{"canonical": "article that multivariate data analysis cites and whose author is efron", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string author) (string =) en.person.efron))", "natural": "what efron article is cited in multivariate data analysis"}
{"canonical": "venue that is venue of at most two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what is the venue of at least two articles"}
{"canonical": "person that is author of more than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what author has written more than two articles"}
{"canonical": "article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "article cited bymultivariate data analysis"}
{"canonical": "article whose author is efron and that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "natural": "articles by efron cited in multivariate data analysis"}
{"canonical": "article that less than two article cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "article cited by less than two articles"}
{"canonical": "article that cites article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "articles that city multivariate data analysis articles"}
{"canonical": "article that multivariate data analysis cites and that won an award", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "natural": "articles on multivariate data analysis that won an award"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "what annals of statistics article cites multivariate data analysis"}
{"canonical": "venue that is venue of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "what venue contains the article about city multivariate data analysis"}
{"canonical": "article whose publication date is at least 2004 or 2010", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "natural": "articles published after 2004 or after 2010"}
{"canonical": "person that is author of less than two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "writer of fewer than two articles"}
{"canonical": "article that has two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "natural": "what article was in two venues"}
{"canonical": "article that has more than two venue", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "natural": "articles about more than two venues"}
{"canonical": "number of article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what is the number of the article"}
{"canonical": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "natural": "writer of multivariate data analysis"}
{"canonical": "venue that is venue of two article", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "natural": "what is a venue of two articles"}
{"canonical": "person that is author of article that multivariate data analysis cites", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "natural": "who is the author of an article cited by multivariate data analysis"}
{"canonical": "article that won an award and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "which article won an award and has its venue as annals of statistics"}
{"canonical": "article that cites multivariate data analysis and whose venue is annals of statistics", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "natural": "name an article about multivariate data analysis from the annals of statistics"}
{"canonical": "article that has at least two author", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >=) (number 2)))", "natural": "articles with two or more authors"}
{"canonical": "article that cites article that cites multivariate data analysis", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "natural": "articles that cite multivariate data analysis"}
